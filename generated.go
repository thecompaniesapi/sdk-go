// Package thecompaniesapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package thecompaniesapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyScopes = "apiKey.Scopes"
)

// Defines values for ActionDataFieldsType.
const (
	ActionDataFieldsTypeArrayboolean ActionDataFieldsType = "array|boolean"
	ActionDataFieldsTypeArraynumber  ActionDataFieldsType = "array|number"
	ActionDataFieldsTypeArraystring  ActionDataFieldsType = "array|string"
	ActionDataFieldsTypeBoolean      ActionDataFieldsType = "boolean"
	ActionDataFieldsTypeNumber       ActionDataFieldsType = "number"
	ActionDataFieldsTypeString       ActionDataFieldsType = "string"
)

// Defines values for ActionDataJob.
const (
	ActionDataJobAskDomain       ActionDataJob = "ask-domain"
	ActionDataJobAskList         ActionDataJob = "ask-list"
	ActionDataJobCleanupList     ActionDataJob = "cleanup-list"
	ActionDataJobEnrichCompanies ActionDataJob = "enrich-companies"
	ActionDataJobEnrichList      ActionDataJob = "enrich-list"
)

// Defines values for ActionDataModel.
const (
	Claude     ActionDataModel = "claude"
	ClaudeMini ActionDataModel = "claude-mini"
	Cousteau   ActionDataModel = "cousteau"
	Gpt        ActionDataModel = "gpt"
	GptMini    ActionDataModel = "gpt-mini"
	Groq       ActionDataModel = "groq"
	GroqMini   ActionDataModel = "groq-mini"
	Llama3     ActionDataModel = "llama3"
	Llama4     ActionDataModel = "llama4"
	Nllb       ActionDataModel = "nllb"
	Nuextract  ActionDataModel = "nuextract"
	Phi3       ActionDataModel = "phi3"
)

// Defines values for ActionStatus.
const (
	ActionStatusActive    ActionStatus = "active"
	ActionStatusCompleted ActionStatus = "completed"
	ActionStatusFailed    ActionStatus = "failed"
	ActionStatusPending   ActionStatus = "pending"
)

// Defines values for ActionType.
const (
	ActionTypeCompaniesAdded ActionType = "companies:added"
	ActionTypeJobsRequest    ActionType = "jobs:request"
)

// Defines values for CompanyV2AboutBusinessType.
const (
	EducationalInstitution CompanyV2AboutBusinessType = "educational-institution"
	GovernmentAgency       CompanyV2AboutBusinessType = "government-agency"
	Nonprofit              CompanyV2AboutBusinessType = "nonprofit"
	Partnership            CompanyV2AboutBusinessType = "partnership"
	PrivatelyHeld          CompanyV2AboutBusinessType = "privately-held"
	PublicCompany          CompanyV2AboutBusinessType = "public-company"
	SelfEmployed           CompanyV2AboutBusinessType = "self-employed"
	SoleProprietorship     CompanyV2AboutBusinessType = "sole-proprietorship"
)

// Defines values for CompanyV2AboutTotalEmployees.
const (
	N1050   CompanyV2AboutTotalEmployees = "10-50"
	N110    CompanyV2AboutTotalEmployees = "1-10"
	N1k5k   CompanyV2AboutTotalEmployees = "1k-5k"
	N200500 CompanyV2AboutTotalEmployees = "200-500"
	N5001k  CompanyV2AboutTotalEmployees = "500-1k"
	N50200  CompanyV2AboutTotalEmployees = "50-200"
	N5k10k  CompanyV2AboutTotalEmployees = "5k-10k"
	Over10k CompanyV2AboutTotalEmployees = "over-10k"
)

// Defines values for CompanyV2AnalyticsMonthlyVisitors.
const (
	CompanyV2AnalyticsMonthlyVisitorsN100k500k CompanyV2AnalyticsMonthlyVisitors = "100k-500k"
	CompanyV2AnalyticsMonthlyVisitorsN100m500m CompanyV2AnalyticsMonthlyVisitors = "100m-500m"
	CompanyV2AnalyticsMonthlyVisitorsN10k50k   CompanyV2AnalyticsMonthlyVisitors = "10k-50k"
	CompanyV2AnalyticsMonthlyVisitorsN10m50m   CompanyV2AnalyticsMonthlyVisitors = "10m-50m"
	CompanyV2AnalyticsMonthlyVisitorsN1m10m    CompanyV2AnalyticsMonthlyVisitors = "1m-10m"
	CompanyV2AnalyticsMonthlyVisitorsN500k1m   CompanyV2AnalyticsMonthlyVisitors = "500k-1m"
	CompanyV2AnalyticsMonthlyVisitorsN500m1b   CompanyV2AnalyticsMonthlyVisitors = "500m-1b"
	CompanyV2AnalyticsMonthlyVisitorsN50k100k  CompanyV2AnalyticsMonthlyVisitors = "50k-100k"
	CompanyV2AnalyticsMonthlyVisitorsN50m100m  CompanyV2AnalyticsMonthlyVisitors = "50m-100m"
	CompanyV2AnalyticsMonthlyVisitorsOver1b    CompanyV2AnalyticsMonthlyVisitors = "over-1b"
	CompanyV2AnalyticsMonthlyVisitorsUnder10k  CompanyV2AnalyticsMonthlyVisitors = "under-10k"
)

// Defines values for CompanyV2AppsAmazonType.
const (
	CompanyV2AppsAmazonTypeApp       CompanyV2AppsAmazonType = "app"
	CompanyV2AppsAmazonTypeDeveloper CompanyV2AppsAmazonType = "developer"
	CompanyV2AppsAmazonTypeExtension CompanyV2AppsAmazonType = "extension"
)

// Defines values for CompanyV2AppsAndroidType.
const (
	CompanyV2AppsAndroidTypeApp       CompanyV2AppsAndroidType = "app"
	CompanyV2AppsAndroidTypeDeveloper CompanyV2AppsAndroidType = "developer"
	CompanyV2AppsAndroidTypeExtension CompanyV2AppsAndroidType = "extension"
)

// Defines values for CompanyV2AppsChromeType.
const (
	CompanyV2AppsChromeTypeApp       CompanyV2AppsChromeType = "app"
	CompanyV2AppsChromeTypeDeveloper CompanyV2AppsChromeType = "developer"
	CompanyV2AppsChromeTypeExtension CompanyV2AppsChromeType = "extension"
)

// Defines values for CompanyV2AppsIosType.
const (
	CompanyV2AppsIosTypeApp       CompanyV2AppsIosType = "app"
	CompanyV2AppsIosTypeDeveloper CompanyV2AppsIosType = "developer"
	CompanyV2AppsIosTypeExtension CompanyV2AppsIosType = "extension"
)

// Defines values for CompanyV2AppsMacType.
const (
	CompanyV2AppsMacTypeApp       CompanyV2AppsMacType = "app"
	CompanyV2AppsMacTypeDeveloper CompanyV2AppsMacType = "developer"
	CompanyV2AppsMacTypeExtension CompanyV2AppsMacType = "extension"
)

// Defines values for CompanyV2AppsMetaType.
const (
	CompanyV2AppsMetaTypeApp       CompanyV2AppsMetaType = "app"
	CompanyV2AppsMetaTypeDeveloper CompanyV2AppsMetaType = "developer"
	CompanyV2AppsMetaTypeExtension CompanyV2AppsMetaType = "extension"
)

// Defines values for CompanyV2AppsMicrosoftType.
const (
	CompanyV2AppsMicrosoftTypeApp       CompanyV2AppsMicrosoftType = "app"
	CompanyV2AppsMicrosoftTypeDeveloper CompanyV2AppsMicrosoftType = "developer"
	CompanyV2AppsMicrosoftTypeExtension CompanyV2AppsMicrosoftType = "extension"
)

// Defines values for CompanyV2AppsPlaystationType.
const (
	CompanyV2AppsPlaystationTypeApp       CompanyV2AppsPlaystationType = "app"
	CompanyV2AppsPlaystationTypeDeveloper CompanyV2AppsPlaystationType = "developer"
	CompanyV2AppsPlaystationTypeExtension CompanyV2AppsPlaystationType = "extension"
)

// Defines values for CompanyV2AppsXboxType.
const (
	App       CompanyV2AppsXboxType = "app"
	Developer CompanyV2AppsXboxType = "developer"
	Extension CompanyV2AppsXboxType = "extension"
)

// Defines values for CompanyV2ContactsEmailsCategory.
const (
	CompanyV2ContactsEmailsCategoryAccounts     CompanyV2ContactsEmailsCategory = "accounts"
	CompanyV2ContactsEmailsCategoryChannels     CompanyV2ContactsEmailsCategory = "channels"
	CompanyV2ContactsEmailsCategoryGeneral      CompanyV2ContactsEmailsCategory = "general"
	CompanyV2ContactsEmailsCategoryMarketing    CompanyV2ContactsEmailsCategory = "marketing"
	CompanyV2ContactsEmailsCategoryReservations CompanyV2ContactsEmailsCategory = "reservations"
	CompanyV2ContactsEmailsCategorySales        CompanyV2ContactsEmailsCategory = "sales"
	CompanyV2ContactsEmailsCategoryTechnical    CompanyV2ContactsEmailsCategory = "technical"
)

// Defines values for CompanyV2ContactsLinesCategory.
const (
	CompanyV2ContactsLinesCategoryAccounts     CompanyV2ContactsLinesCategory = "accounts"
	CompanyV2ContactsLinesCategoryChannels     CompanyV2ContactsLinesCategory = "channels"
	CompanyV2ContactsLinesCategoryGeneral      CompanyV2ContactsLinesCategory = "general"
	CompanyV2ContactsLinesCategoryMarketing    CompanyV2ContactsLinesCategory = "marketing"
	CompanyV2ContactsLinesCategoryReservations CompanyV2ContactsLinesCategory = "reservations"
	CompanyV2ContactsLinesCategorySales        CompanyV2ContactsLinesCategory = "sales"
	CompanyV2ContactsLinesCategoryTechnical    CompanyV2ContactsLinesCategory = "technical"
)

// Defines values for CompanyV2ContactsPhonesCategory.
const (
	CompanyV2ContactsPhonesCategoryAccounts     CompanyV2ContactsPhonesCategory = "accounts"
	CompanyV2ContactsPhonesCategoryChannels     CompanyV2ContactsPhonesCategory = "channels"
	CompanyV2ContactsPhonesCategoryGeneral      CompanyV2ContactsPhonesCategory = "general"
	CompanyV2ContactsPhonesCategoryMarketing    CompanyV2ContactsPhonesCategory = "marketing"
	CompanyV2ContactsPhonesCategoryReservations CompanyV2ContactsPhonesCategory = "reservations"
	CompanyV2ContactsPhonesCategorySales        CompanyV2ContactsPhonesCategory = "sales"
	CompanyV2ContactsPhonesCategoryTechnical    CompanyV2ContactsPhonesCategory = "technical"
)

// Defines values for CompanyV2ContactsWhatsappsCategory.
const (
	CompanyV2ContactsWhatsappsCategoryAccounts     CompanyV2ContactsWhatsappsCategory = "accounts"
	CompanyV2ContactsWhatsappsCategoryChannels     CompanyV2ContactsWhatsappsCategory = "channels"
	CompanyV2ContactsWhatsappsCategoryGeneral      CompanyV2ContactsWhatsappsCategory = "general"
	CompanyV2ContactsWhatsappsCategoryMarketing    CompanyV2ContactsWhatsappsCategory = "marketing"
	CompanyV2ContactsWhatsappsCategoryReservations CompanyV2ContactsWhatsappsCategory = "reservations"
	CompanyV2ContactsWhatsappsCategorySales        CompanyV2ContactsWhatsappsCategory = "sales"
	CompanyV2ContactsWhatsappsCategoryTechnical    CompanyV2ContactsWhatsappsCategory = "technical"
)

// Defines values for CompanyV2DomainState.
const (
	Broken     CompanyV2DomainState = "broken"
	ForSale    CompanyV2DomainState = "for-sale"
	Operating  CompanyV2DomainState = "operating"
	Redirected CompanyV2DomainState = "redirected"
)

// Defines values for CompanyV2FinancesRevenue.
const (
	CompanyV2FinancesRevenueN100m200m CompanyV2FinancesRevenue = "100m-200m"
	CompanyV2FinancesRevenueN10m50m   CompanyV2FinancesRevenue = "10m-50m"
	CompanyV2FinancesRevenueN1m10m    CompanyV2FinancesRevenue = "1m-10m"
	CompanyV2FinancesRevenueN200m1b   CompanyV2FinancesRevenue = "200m-1b"
	CompanyV2FinancesRevenueN50m100m  CompanyV2FinancesRevenue = "50m-100m"
	CompanyV2FinancesRevenueOver1b    CompanyV2FinancesRevenue = "over-1b"
	CompanyV2FinancesRevenueUnder1m   CompanyV2FinancesRevenue = "under-1m"
)

// Defines values for CompanyV2TechnologiesDetailsDetectionTypes.
const (
	CompanyV2TechnologiesDetailsDetectionTypesCookies         CompanyV2TechnologiesDetailsDetectionTypes = "cookies"
	CompanyV2TechnologiesDetailsDetectionTypesDns             CompanyV2TechnologiesDetailsDetectionTypes = "dns"
	CompanyV2TechnologiesDetailsDetectionTypesEvaluate        CompanyV2TechnologiesDetailsDetectionTypes = "evaluate"
	CompanyV2TechnologiesDetailsDetectionTypesEvaluateBundle  CompanyV2TechnologiesDetailsDetectionTypes = "evaluate-bundle"
	CompanyV2TechnologiesDetailsDetectionTypesEvaluateVersion CompanyV2TechnologiesDetailsDetectionTypes = "evaluate-version"
	CompanyV2TechnologiesDetailsDetectionTypesHeaders         CompanyV2TechnologiesDetailsDetectionTypes = "headers"
	CompanyV2TechnologiesDetailsDetectionTypesMetas           CompanyV2TechnologiesDetailsDetectionTypes = "metas"
	CompanyV2TechnologiesDetailsDetectionTypesScripts         CompanyV2TechnologiesDetailsDetectionTypes = "scripts"
	CompanyV2TechnologiesDetailsDetectionTypesTags            CompanyV2TechnologiesDetailsDetectionTypes = "tags"
	CompanyV2TechnologiesDetailsDetectionTypesUrls            CompanyV2TechnologiesDetailsDetectionTypes = "urls"
	CompanyV2TechnologiesDetailsDetectionTypesVariables       CompanyV2TechnologiesDetailsDetectionTypes = "variables"
)

// Defines values for LLMAnswerFieldsType.
const (
	LLMAnswerFieldsTypeArrayboolean LLMAnswerFieldsType = "array|boolean"
	LLMAnswerFieldsTypeArraynumber  LLMAnswerFieldsType = "array|number"
	LLMAnswerFieldsTypeArraystring  LLMAnswerFieldsType = "array|string"
	LLMAnswerFieldsTypeBoolean      LLMAnswerFieldsType = "boolean"
	LLMAnswerFieldsTypeNumber       LLMAnswerFieldsType = "number"
	LLMAnswerFieldsTypeString       LLMAnswerFieldsType = "string"
)

// Defines values for ListMailFrequencies.
const (
	ListMailFrequenciesDaily    ListMailFrequencies = "daily"
	ListMailFrequenciesDisabled ListMailFrequencies = "disabled"
	ListMailFrequenciesMonthly  ListMailFrequencies = "monthly"
	ListMailFrequenciesWeekly   ListMailFrequencies = "weekly"
)

// Defines values for NominatimContinentCode.
const (
	NominatimContinentCodeAf NominatimContinentCode = "af"
	NominatimContinentCodeAn NominatimContinentCode = "an"
	NominatimContinentCodeAs NominatimContinentCode = "as"
	NominatimContinentCodeEu NominatimContinentCode = "eu"
	NominatimContinentCodeNa NominatimContinentCode = "na"
	NominatimContinentCodeOc NominatimContinentCode = "oc"
	NominatimContinentCodeSa NominatimContinentCode = "sa"
)

// Defines values for NominatimCountryContinent.
const (
	Africa       NominatimCountryContinent = "Africa"
	Antarctica   NominatimCountryContinent = "Antarctica"
	Asia         NominatimCountryContinent = "Asia"
	Europe       NominatimCountryContinent = "Europe"
	NorthAmerica NominatimCountryContinent = "North America"
	Oceania      NominatimCountryContinent = "Oceania"
	SouthAmerica NominatimCountryContinent = "South America"
)

// Defines values for NominatimCountryContinentCode.
const (
	NominatimCountryContinentCodeAf NominatimCountryContinentCode = "af"
	NominatimCountryContinentCodeAn NominatimCountryContinentCode = "an"
	NominatimCountryContinentCodeAs NominatimCountryContinentCode = "as"
	NominatimCountryContinentCodeEu NominatimCountryContinentCode = "eu"
	NominatimCountryContinentCodeNa NominatimCountryContinentCode = "na"
	NominatimCountryContinentCodeOc NominatimCountryContinentCode = "oc"
	NominatimCountryContinentCodeSa NominatimCountryContinentCode = "sa"
)

// Defines values for PromptContext.
const (
	PromptContextAnalytics     PromptContext = "analytics"
	PromptContextApi           PromptContext = "api"
	PromptContextCompanies     PromptContext = "companies"
	PromptContextCompany       PromptContext = "company"
	PromptContextDocumentation PromptContext = "documentation"
	PromptContextEnrichment    PromptContext = "enrichment"
	PromptContextLanding       PromptContext = "landing"
	PromptContextList          PromptContext = "list"
	PromptContextSimilarity    PromptContext = "similarity"
)

// Defines values for PromptDataFieldsType.
const (
	PromptDataFieldsTypeArrayboolean PromptDataFieldsType = "array|boolean"
	PromptDataFieldsTypeArraynumber  PromptDataFieldsType = "array|number"
	PromptDataFieldsTypeArraystring  PromptDataFieldsType = "array|string"
	PromptDataFieldsTypeBoolean      PromptDataFieldsType = "boolean"
	PromptDataFieldsTypeNumber       PromptDataFieldsType = "number"
	PromptDataFieldsTypeString       PromptDataFieldsType = "string"
)

// Defines values for PromptDataModel.
const (
	PromptDataModelLarge PromptDataModel = "large"
	PromptDataModelSmall PromptDataModel = "small"
)

// Defines values for PromptFeature.
const (
	PromptFeatureAsk     PromptFeature = "ask"
	PromptFeatureCleanup PromptFeature = "cleanup"
	PromptFeatureEnrich  PromptFeature = "enrich"
	PromptFeatureProduct PromptFeature = "product"
	PromptFeatureSearch  PromptFeature = "search"
	PromptFeatureSimilar PromptFeature = "similar"
)

// Defines values for PromptModel.
const (
	PromptModelLarge PromptModel = "large"
	PromptModelSmall PromptModel = "small"
)

// Defines values for PromptResponse0ActionDataFieldsType.
const (
	PromptResponse0ActionDataFieldsTypeArrayboolean PromptResponse0ActionDataFieldsType = "array|boolean"
	PromptResponse0ActionDataFieldsTypeArraynumber  PromptResponse0ActionDataFieldsType = "array|number"
	PromptResponse0ActionDataFieldsTypeArraystring  PromptResponse0ActionDataFieldsType = "array|string"
	PromptResponse0ActionDataFieldsTypeBoolean      PromptResponse0ActionDataFieldsType = "boolean"
	PromptResponse0ActionDataFieldsTypeNumber       PromptResponse0ActionDataFieldsType = "number"
	PromptResponse0ActionDataFieldsTypeString       PromptResponse0ActionDataFieldsType = "string"
)

// Defines values for PromptResponse0ActionDataJob.
const (
	PromptResponse0ActionDataJobAskList PromptResponse0ActionDataJob = "ask-list"
)

// Defines values for PromptResponse0ActionStatus.
const (
	PromptResponse0ActionStatusPending PromptResponse0ActionStatus = "pending"
)

// Defines values for PromptResponse0ActionType.
const (
	PromptResponse0ActionTypeJobsRequest PromptResponse0ActionType = "jobs:request"
)

// Defines values for PromptResponse1ActionCost.
const (
	N0 PromptResponse1ActionCost = 0
)

// Defines values for PromptResponse1ActionDataJob.
const (
	PromptResponse1ActionDataJobCleanupList PromptResponse1ActionDataJob = "cleanup-list"
)

// Defines values for PromptResponse1ActionStatus.
const (
	PromptResponse1ActionStatusPending PromptResponse1ActionStatus = "pending"
)

// Defines values for PromptResponse1ActionType.
const (
	PromptResponse1ActionTypeJobsRequest PromptResponse1ActionType = "jobs:request"
)

// Defines values for PromptResponse2ActionDataJob.
const (
	EnrichCompanies PromptResponse2ActionDataJob = "enrich-companies"
	EnrichList      PromptResponse2ActionDataJob = "enrich-list"
)

// Defines values for PromptResponse2ActionStatus.
const (
	PromptResponse2ActionStatusPending PromptResponse2ActionStatus = "pending"
)

// Defines values for PromptResponse2ActionType.
const (
	PromptResponse2ActionTypeJobsRequest PromptResponse2ActionType = "jobs:request"
)

// Defines values for SegmentationConditionAttribute.
const (
	SegmentationConditionAttributeAboutBusinessType                  SegmentationConditionAttribute = "about.businessType"
	SegmentationConditionAttributeAboutIndustries                    SegmentationConditionAttribute = "about.industries"
	SegmentationConditionAttributeAboutIndustry                      SegmentationConditionAttribute = "about.industry"
	SegmentationConditionAttributeAboutName                          SegmentationConditionAttribute = "about.name"
	SegmentationConditionAttributeAboutTotalEmployees                SegmentationConditionAttribute = "about.totalEmployees"
	SegmentationConditionAttributeAboutYearFounded                   SegmentationConditionAttribute = "about.yearFounded"
	SegmentationConditionAttributeAiSearch                           SegmentationConditionAttribute = "ai.search"
	SegmentationConditionAttributeAnalyticsMonthlyVisitors           SegmentationConditionAttribute = "analytics.monthlyVisitors"
	SegmentationConditionAttributeApps                               SegmentationConditionAttribute = "apps"
	SegmentationConditionAttributeCodesNaics                         SegmentationConditionAttribute = "codes.naics"
	SegmentationConditionAttributeCodesSic                           SegmentationConditionAttribute = "codes.sic"
	SegmentationConditionAttributeContacts                           SegmentationConditionAttribute = "contacts"
	SegmentationConditionAttributeDomainDomain                       SegmentationConditionAttribute = "domain.domain"
	SegmentationConditionAttributeDomainTld                          SegmentationConditionAttribute = "domain.tld"
	SegmentationConditionAttributeFinancesRevenue                    SegmentationConditionAttribute = "finances.revenue"
	SegmentationConditionAttributeFinancesStockExchange              SegmentationConditionAttribute = "finances.stockExchange"
	SegmentationConditionAttributeLocationsHeadquartersCityCode      SegmentationConditionAttribute = "locations.headquarters.city.code"
	SegmentationConditionAttributeLocationsHeadquartersContinentCode SegmentationConditionAttribute = "locations.headquarters.continent.code"
	SegmentationConditionAttributeLocationsHeadquartersCountryCode   SegmentationConditionAttribute = "locations.headquarters.country.code"
	SegmentationConditionAttributeLocationsHeadquartersCountyCode    SegmentationConditionAttribute = "locations.headquarters.county.code"
	SegmentationConditionAttributeLocationsHeadquartersStateCode     SegmentationConditionAttribute = "locations.headquarters.state.code"
	SegmentationConditionAttributeMetaListIds                        SegmentationConditionAttribute = "meta.listIds"
	SegmentationConditionAttributeMetaScore                          SegmentationConditionAttribute = "meta.score"
	SegmentationConditionAttributeMetaSyncedAt                       SegmentationConditionAttribute = "meta.syncedAt"
	SegmentationConditionAttributeSocials                            SegmentationConditionAttribute = "socials"
	SegmentationConditionAttributeSocialsLinkedinId                  SegmentationConditionAttribute = "socials.linkedin.id"
	SegmentationConditionAttributeTechnologiesActive                 SegmentationConditionAttribute = "technologies.active"
	SegmentationConditionAttributeTechnologiesCategories             SegmentationConditionAttribute = "technologies.categories"
	SegmentationConditionAttributeUrls                               SegmentationConditionAttribute = "urls"
)

// Defines values for SegmentationConditionOperator.
const (
	And SegmentationConditionOperator = "and"
	Or  SegmentationConditionOperator = "or"
)

// Defines values for SegmentationConditionSign.
const (
	Equals      SegmentationConditionSign = "equals"
	ExactEquals SegmentationConditionSign = "exactEquals"
	Greater     SegmentationConditionSign = "greater"
	Lower       SegmentationConditionSign = "lower"
	NotEquals   SegmentationConditionSign = "notEquals"
)

// Defines values for UserColorMode.
const (
	Dark   UserColorMode = "dark"
	Light  UserColorMode = "light"
	System UserColorMode = "system"
)

// Defines values for UserRole.
const (
	UserRoleOwner UserRole = "owner"
	UserRoleUser  UserRole = "user"
)

// Defines values for FetchActionsParamsStatus.
const (
	Active    FetchActionsParamsStatus = "active"
	Completed FetchActionsParamsStatus = "completed"
	Failed    FetchActionsParamsStatus = "failed"
	Pending   FetchActionsParamsStatus = "pending"
)

// Defines values for FetchActionsParamsType.
const (
	FetchActionsParamsTypeCompaniesAdded FetchActionsParamsType = "companies:added"
	FetchActionsParamsTypeJobsRequest    FetchActionsParamsType = "jobs:request"
)

// Defines values for RequestActionJSONBodyFieldsType.
const (
	RequestActionJSONBodyFieldsTypeArrayboolean RequestActionJSONBodyFieldsType = "array|boolean"
	RequestActionJSONBodyFieldsTypeArraynumber  RequestActionJSONBodyFieldsType = "array|number"
	RequestActionJSONBodyFieldsTypeArraystring  RequestActionJSONBodyFieldsType = "array|string"
	RequestActionJSONBodyFieldsTypeBoolean      RequestActionJSONBodyFieldsType = "boolean"
	RequestActionJSONBodyFieldsTypeNumber       RequestActionJSONBodyFieldsType = "number"
	RequestActionJSONBodyFieldsTypeString       RequestActionJSONBodyFieldsType = "string"
)

// Defines values for RequestActionJSONBodyJob.
const (
	RequestActionJSONBodyJobAskDomain       RequestActionJSONBodyJob = "ask-domain"
	RequestActionJSONBodyJobAskList         RequestActionJSONBodyJob = "ask-list"
	RequestActionJSONBodyJobCleanupList     RequestActionJSONBodyJob = "cleanup-list"
	RequestActionJSONBodyJobEnrichCompanies RequestActionJSONBodyJob = "enrich-companies"
	RequestActionJSONBodyJobEnrichList      RequestActionJSONBodyJob = "enrich-list"
)

// Defines values for RequestActionJSONBodyType.
const (
	RequestActionJSONBodyTypeCompaniesAdded RequestActionJSONBodyType = "companies:added"
	RequestActionJSONBodyTypeJobsRequest    RequestActionJSONBodyType = "jobs:request"
)

// Defines values for SearchCompaniesParamsSearchFields.
const (
	SearchCompaniesParamsSearchFieldsAboutName    SearchCompaniesParamsSearchFields = "about.name"
	SearchCompaniesParamsSearchFieldsDomainDomain SearchCompaniesParamsSearchFields = "domain.domain"
)

// Defines values for SearchCompaniesParamsSortFieldsKey.
const (
	SearchCompaniesParamsSortFieldsKeyAboutBusinessType                SearchCompaniesParamsSortFieldsKey = "about.businessType"
	SearchCompaniesParamsSortFieldsKeyAboutIndustries                  SearchCompaniesParamsSortFieldsKey = "about.industries"
	SearchCompaniesParamsSortFieldsKeyAboutIndustry                    SearchCompaniesParamsSortFieldsKey = "about.industry"
	SearchCompaniesParamsSortFieldsKeyAboutName                        SearchCompaniesParamsSortFieldsKey = "about.name"
	SearchCompaniesParamsSortFieldsKeyAboutTotalEmployees              SearchCompaniesParamsSortFieldsKey = "about.totalEmployees"
	SearchCompaniesParamsSortFieldsKeyAboutYearFounded                 SearchCompaniesParamsSortFieldsKey = "about.yearFounded"
	SearchCompaniesParamsSortFieldsKeyAnalyticsMonthlyVisitors         SearchCompaniesParamsSortFieldsKey = "analytics.monthlyVisitors"
	SearchCompaniesParamsSortFieldsKeyApps                             SearchCompaniesParamsSortFieldsKey = "apps"
	SearchCompaniesParamsSortFieldsKeyCodesNaics                       SearchCompaniesParamsSortFieldsKey = "codes.naics"
	SearchCompaniesParamsSortFieldsKeyCodesSic                         SearchCompaniesParamsSortFieldsKey = "codes.sic"
	SearchCompaniesParamsSortFieldsKeyContacts                         SearchCompaniesParamsSortFieldsKey = "contacts"
	SearchCompaniesParamsSortFieldsKeyDomainDomain                     SearchCompaniesParamsSortFieldsKey = "domain.domain"
	SearchCompaniesParamsSortFieldsKeyDomainTld                        SearchCompaniesParamsSortFieldsKey = "domain.tld"
	SearchCompaniesParamsSortFieldsKeyFinancesRevenue                  SearchCompaniesParamsSortFieldsKey = "finances.revenue"
	SearchCompaniesParamsSortFieldsKeyLocationsHeadquartersCityCode    SearchCompaniesParamsSortFieldsKey = "locations.headquarters.city.code"
	SearchCompaniesParamsSortFieldsKeyLocationsHeadquartersCountryCode SearchCompaniesParamsSortFieldsKey = "locations.headquarters.country.code"
	SearchCompaniesParamsSortFieldsKeyLocationsHeadquartersCountyCode  SearchCompaniesParamsSortFieldsKey = "locations.headquarters.county.code"
	SearchCompaniesParamsSortFieldsKeyLocationsHeadquartersStateCode   SearchCompaniesParamsSortFieldsKey = "locations.headquarters.state.code"
	SearchCompaniesParamsSortFieldsKeyMetaScore                        SearchCompaniesParamsSortFieldsKey = "meta.score"
	SearchCompaniesParamsSortFieldsKeyMetaSyncedAt                     SearchCompaniesParamsSortFieldsKey = "meta.syncedAt"
	SearchCompaniesParamsSortFieldsKeySocials                          SearchCompaniesParamsSortFieldsKey = "socials"
	SearchCompaniesParamsSortFieldsKeyTechnologiesActive               SearchCompaniesParamsSortFieldsKey = "technologies.active"
	SearchCompaniesParamsSortFieldsKeyUrls                             SearchCompaniesParamsSortFieldsKey = "urls"
)

// Defines values for SearchCompaniesParamsSortFieldsMissing.
const (
	SearchCompaniesParamsSortFieldsMissingUnderscoreFirst SearchCompaniesParamsSortFieldsMissing = "_first"
	SearchCompaniesParamsSortFieldsMissingUnderscoreLast  SearchCompaniesParamsSortFieldsMissing = "_last"
)

// Defines values for SearchCompaniesParamsSortFieldsOrder.
const (
	SearchCompaniesParamsSortFieldsOrderAsc  SearchCompaniesParamsSortFieldsOrder = "asc"
	SearchCompaniesParamsSortFieldsOrderDesc SearchCompaniesParamsSortFieldsOrder = "desc"
)

// Defines values for SearchCompaniesParamsSortKey.
const (
	SearchCompaniesParamsSortKeyAboutBusinessType                SearchCompaniesParamsSortKey = "about.businessType"
	SearchCompaniesParamsSortKeyAboutIndustries                  SearchCompaniesParamsSortKey = "about.industries"
	SearchCompaniesParamsSortKeyAboutIndustry                    SearchCompaniesParamsSortKey = "about.industry"
	SearchCompaniesParamsSortKeyAboutName                        SearchCompaniesParamsSortKey = "about.name"
	SearchCompaniesParamsSortKeyAboutTotalEmployees              SearchCompaniesParamsSortKey = "about.totalEmployees"
	SearchCompaniesParamsSortKeyAboutYearFounded                 SearchCompaniesParamsSortKey = "about.yearFounded"
	SearchCompaniesParamsSortKeyAnalyticsMonthlyVisitors         SearchCompaniesParamsSortKey = "analytics.monthlyVisitors"
	SearchCompaniesParamsSortKeyApps                             SearchCompaniesParamsSortKey = "apps"
	SearchCompaniesParamsSortKeyCodesNaics                       SearchCompaniesParamsSortKey = "codes.naics"
	SearchCompaniesParamsSortKeyCodesSic                         SearchCompaniesParamsSortKey = "codes.sic"
	SearchCompaniesParamsSortKeyContacts                         SearchCompaniesParamsSortKey = "contacts"
	SearchCompaniesParamsSortKeyDomainDomain                     SearchCompaniesParamsSortKey = "domain.domain"
	SearchCompaniesParamsSortKeyDomainTld                        SearchCompaniesParamsSortKey = "domain.tld"
	SearchCompaniesParamsSortKeyFinancesRevenue                  SearchCompaniesParamsSortKey = "finances.revenue"
	SearchCompaniesParamsSortKeyLocationsHeadquartersCityCode    SearchCompaniesParamsSortKey = "locations.headquarters.city.code"
	SearchCompaniesParamsSortKeyLocationsHeadquartersCountryCode SearchCompaniesParamsSortKey = "locations.headquarters.country.code"
	SearchCompaniesParamsSortKeyLocationsHeadquartersCountyCode  SearchCompaniesParamsSortKey = "locations.headquarters.county.code"
	SearchCompaniesParamsSortKeyLocationsHeadquartersStateCode   SearchCompaniesParamsSortKey = "locations.headquarters.state.code"
	SearchCompaniesParamsSortKeyMetaScore                        SearchCompaniesParamsSortKey = "meta.score"
	SearchCompaniesParamsSortKeyMetaSyncedAt                     SearchCompaniesParamsSortKey = "meta.syncedAt"
	SearchCompaniesParamsSortKeySocials                          SearchCompaniesParamsSortKey = "socials"
	SearchCompaniesParamsSortKeyTechnologiesActive               SearchCompaniesParamsSortKey = "technologies.active"
	SearchCompaniesParamsSortKeyUrls                             SearchCompaniesParamsSortKey = "urls"
)

// Defines values for SearchCompaniesParamsSortOrder.
const (
	SearchCompaniesParamsSortOrderAsc  SearchCompaniesParamsSortOrder = "asc"
	SearchCompaniesParamsSortOrderDesc SearchCompaniesParamsSortOrder = "desc"
)

// Defines values for SearchCompaniesPostJSONBodySearchFields.
const (
	SearchCompaniesPostJSONBodySearchFieldsAboutName    SearchCompaniesPostJSONBodySearchFields = "about.name"
	SearchCompaniesPostJSONBodySearchFieldsDomainDomain SearchCompaniesPostJSONBodySearchFields = "domain.domain"
)

// Defines values for SearchCompaniesPostJSONBodySortFieldsKey.
const (
	SearchCompaniesPostJSONBodySortFieldsKeyAboutBusinessType                SearchCompaniesPostJSONBodySortFieldsKey = "about.businessType"
	SearchCompaniesPostJSONBodySortFieldsKeyAboutIndustries                  SearchCompaniesPostJSONBodySortFieldsKey = "about.industries"
	SearchCompaniesPostJSONBodySortFieldsKeyAboutIndustry                    SearchCompaniesPostJSONBodySortFieldsKey = "about.industry"
	SearchCompaniesPostJSONBodySortFieldsKeyAboutName                        SearchCompaniesPostJSONBodySortFieldsKey = "about.name"
	SearchCompaniesPostJSONBodySortFieldsKeyAboutTotalEmployees              SearchCompaniesPostJSONBodySortFieldsKey = "about.totalEmployees"
	SearchCompaniesPostJSONBodySortFieldsKeyAboutYearFounded                 SearchCompaniesPostJSONBodySortFieldsKey = "about.yearFounded"
	SearchCompaniesPostJSONBodySortFieldsKeyAnalyticsMonthlyVisitors         SearchCompaniesPostJSONBodySortFieldsKey = "analytics.monthlyVisitors"
	SearchCompaniesPostJSONBodySortFieldsKeyApps                             SearchCompaniesPostJSONBodySortFieldsKey = "apps"
	SearchCompaniesPostJSONBodySortFieldsKeyCodesNaics                       SearchCompaniesPostJSONBodySortFieldsKey = "codes.naics"
	SearchCompaniesPostJSONBodySortFieldsKeyCodesSic                         SearchCompaniesPostJSONBodySortFieldsKey = "codes.sic"
	SearchCompaniesPostJSONBodySortFieldsKeyContacts                         SearchCompaniesPostJSONBodySortFieldsKey = "contacts"
	SearchCompaniesPostJSONBodySortFieldsKeyDomainDomain                     SearchCompaniesPostJSONBodySortFieldsKey = "domain.domain"
	SearchCompaniesPostJSONBodySortFieldsKeyDomainTld                        SearchCompaniesPostJSONBodySortFieldsKey = "domain.tld"
	SearchCompaniesPostJSONBodySortFieldsKeyFinancesRevenue                  SearchCompaniesPostJSONBodySortFieldsKey = "finances.revenue"
	SearchCompaniesPostJSONBodySortFieldsKeyLocationsHeadquartersCityCode    SearchCompaniesPostJSONBodySortFieldsKey = "locations.headquarters.city.code"
	SearchCompaniesPostJSONBodySortFieldsKeyLocationsHeadquartersCountryCode SearchCompaniesPostJSONBodySortFieldsKey = "locations.headquarters.country.code"
	SearchCompaniesPostJSONBodySortFieldsKeyLocationsHeadquartersCountyCode  SearchCompaniesPostJSONBodySortFieldsKey = "locations.headquarters.county.code"
	SearchCompaniesPostJSONBodySortFieldsKeyLocationsHeadquartersStateCode   SearchCompaniesPostJSONBodySortFieldsKey = "locations.headquarters.state.code"
	SearchCompaniesPostJSONBodySortFieldsKeyMetaScore                        SearchCompaniesPostJSONBodySortFieldsKey = "meta.score"
	SearchCompaniesPostJSONBodySortFieldsKeyMetaSyncedAt                     SearchCompaniesPostJSONBodySortFieldsKey = "meta.syncedAt"
	SearchCompaniesPostJSONBodySortFieldsKeySocials                          SearchCompaniesPostJSONBodySortFieldsKey = "socials"
	SearchCompaniesPostJSONBodySortFieldsKeyTechnologiesActive               SearchCompaniesPostJSONBodySortFieldsKey = "technologies.active"
	SearchCompaniesPostJSONBodySortFieldsKeyUrls                             SearchCompaniesPostJSONBodySortFieldsKey = "urls"
)

// Defines values for SearchCompaniesPostJSONBodySortFieldsMissing.
const (
	SearchCompaniesPostJSONBodySortFieldsMissingUnderscoreFirst SearchCompaniesPostJSONBodySortFieldsMissing = "_first"
	SearchCompaniesPostJSONBodySortFieldsMissingUnderscoreLast  SearchCompaniesPostJSONBodySortFieldsMissing = "_last"
)

// Defines values for SearchCompaniesPostJSONBodySortFieldsOrder.
const (
	SearchCompaniesPostJSONBodySortFieldsOrderAsc  SearchCompaniesPostJSONBodySortFieldsOrder = "asc"
	SearchCompaniesPostJSONBodySortFieldsOrderDesc SearchCompaniesPostJSONBodySortFieldsOrder = "desc"
)

// Defines values for SearchCompaniesPostJSONBodySortKey.
const (
	SearchCompaniesPostJSONBodySortKeyAboutBusinessType                SearchCompaniesPostJSONBodySortKey = "about.businessType"
	SearchCompaniesPostJSONBodySortKeyAboutIndustries                  SearchCompaniesPostJSONBodySortKey = "about.industries"
	SearchCompaniesPostJSONBodySortKeyAboutIndustry                    SearchCompaniesPostJSONBodySortKey = "about.industry"
	SearchCompaniesPostJSONBodySortKeyAboutName                        SearchCompaniesPostJSONBodySortKey = "about.name"
	SearchCompaniesPostJSONBodySortKeyAboutTotalEmployees              SearchCompaniesPostJSONBodySortKey = "about.totalEmployees"
	SearchCompaniesPostJSONBodySortKeyAboutYearFounded                 SearchCompaniesPostJSONBodySortKey = "about.yearFounded"
	SearchCompaniesPostJSONBodySortKeyAnalyticsMonthlyVisitors         SearchCompaniesPostJSONBodySortKey = "analytics.monthlyVisitors"
	SearchCompaniesPostJSONBodySortKeyApps                             SearchCompaniesPostJSONBodySortKey = "apps"
	SearchCompaniesPostJSONBodySortKeyCodesNaics                       SearchCompaniesPostJSONBodySortKey = "codes.naics"
	SearchCompaniesPostJSONBodySortKeyCodesSic                         SearchCompaniesPostJSONBodySortKey = "codes.sic"
	SearchCompaniesPostJSONBodySortKeyContacts                         SearchCompaniesPostJSONBodySortKey = "contacts"
	SearchCompaniesPostJSONBodySortKeyDomainDomain                     SearchCompaniesPostJSONBodySortKey = "domain.domain"
	SearchCompaniesPostJSONBodySortKeyDomainTld                        SearchCompaniesPostJSONBodySortKey = "domain.tld"
	SearchCompaniesPostJSONBodySortKeyFinancesRevenue                  SearchCompaniesPostJSONBodySortKey = "finances.revenue"
	SearchCompaniesPostJSONBodySortKeyLocationsHeadquartersCityCode    SearchCompaniesPostJSONBodySortKey = "locations.headquarters.city.code"
	SearchCompaniesPostJSONBodySortKeyLocationsHeadquartersCountryCode SearchCompaniesPostJSONBodySortKey = "locations.headquarters.country.code"
	SearchCompaniesPostJSONBodySortKeyLocationsHeadquartersCountyCode  SearchCompaniesPostJSONBodySortKey = "locations.headquarters.county.code"
	SearchCompaniesPostJSONBodySortKeyLocationsHeadquartersStateCode   SearchCompaniesPostJSONBodySortKey = "locations.headquarters.state.code"
	SearchCompaniesPostJSONBodySortKeyMetaScore                        SearchCompaniesPostJSONBodySortKey = "meta.score"
	SearchCompaniesPostJSONBodySortKeyMetaSyncedAt                     SearchCompaniesPostJSONBodySortKey = "meta.syncedAt"
	SearchCompaniesPostJSONBodySortKeySocials                          SearchCompaniesPostJSONBodySortKey = "socials"
	SearchCompaniesPostJSONBodySortKeyTechnologiesActive               SearchCompaniesPostJSONBodySortKey = "technologies.active"
	SearchCompaniesPostJSONBodySortKeyUrls                             SearchCompaniesPostJSONBodySortKey = "urls"
)

// Defines values for SearchCompaniesPostJSONBodySortOrder.
const (
	SearchCompaniesPostJSONBodySortOrderAsc  SearchCompaniesPostJSONBodySortOrder = "asc"
	SearchCompaniesPostJSONBodySortOrderDesc SearchCompaniesPostJSONBodySortOrder = "desc"
)

// Defines values for FetchCompaniesAnalyticsParamsAttribute.
const (
	FetchCompaniesAnalyticsParamsAttributeAboutBusinessType                  FetchCompaniesAnalyticsParamsAttribute = "about.businessType"
	FetchCompaniesAnalyticsParamsAttributeAboutIndustries                    FetchCompaniesAnalyticsParamsAttribute = "about.industries"
	FetchCompaniesAnalyticsParamsAttributeAboutIndustry                      FetchCompaniesAnalyticsParamsAttribute = "about.industry"
	FetchCompaniesAnalyticsParamsAttributeAboutTotalEmployees                FetchCompaniesAnalyticsParamsAttribute = "about.totalEmployees"
	FetchCompaniesAnalyticsParamsAttributeAboutYearFounded                   FetchCompaniesAnalyticsParamsAttribute = "about.yearFounded"
	FetchCompaniesAnalyticsParamsAttributeAnalyticsMonthlyVisitors           FetchCompaniesAnalyticsParamsAttribute = "analytics.monthlyVisitors"
	FetchCompaniesAnalyticsParamsAttributeApps                               FetchCompaniesAnalyticsParamsAttribute = "apps"
	FetchCompaniesAnalyticsParamsAttributeCodesNaics                         FetchCompaniesAnalyticsParamsAttribute = "codes.naics"
	FetchCompaniesAnalyticsParamsAttributeCodesSic                           FetchCompaniesAnalyticsParamsAttribute = "codes.sic"
	FetchCompaniesAnalyticsParamsAttributeContacts                           FetchCompaniesAnalyticsParamsAttribute = "contacts"
	FetchCompaniesAnalyticsParamsAttributeDomainTld                          FetchCompaniesAnalyticsParamsAttribute = "domain.tld"
	FetchCompaniesAnalyticsParamsAttributeFinancesRevenue                    FetchCompaniesAnalyticsParamsAttribute = "finances.revenue"
	FetchCompaniesAnalyticsParamsAttributeFinancesStockExchange              FetchCompaniesAnalyticsParamsAttribute = "finances.stockExchange"
	FetchCompaniesAnalyticsParamsAttributeLocationsHeadquartersCityCode      FetchCompaniesAnalyticsParamsAttribute = "locations.headquarters.city.code"
	FetchCompaniesAnalyticsParamsAttributeLocationsHeadquartersContinentCode FetchCompaniesAnalyticsParamsAttribute = "locations.headquarters.continent.code"
	FetchCompaniesAnalyticsParamsAttributeLocationsHeadquartersCountryCode   FetchCompaniesAnalyticsParamsAttribute = "locations.headquarters.country.code"
	FetchCompaniesAnalyticsParamsAttributeLocationsHeadquartersCountyCode    FetchCompaniesAnalyticsParamsAttribute = "locations.headquarters.county.code"
	FetchCompaniesAnalyticsParamsAttributeLocationsHeadquartersStateCode     FetchCompaniesAnalyticsParamsAttribute = "locations.headquarters.state.code"
	FetchCompaniesAnalyticsParamsAttributeMetaScore                          FetchCompaniesAnalyticsParamsAttribute = "meta.score"
	FetchCompaniesAnalyticsParamsAttributeMetaSyncedAt                       FetchCompaniesAnalyticsParamsAttribute = "meta.syncedAt"
	FetchCompaniesAnalyticsParamsAttributeSocials                            FetchCompaniesAnalyticsParamsAttribute = "socials"
	FetchCompaniesAnalyticsParamsAttributeTechnologiesActive                 FetchCompaniesAnalyticsParamsAttribute = "technologies.active"
	FetchCompaniesAnalyticsParamsAttributeTechnologiesCategories             FetchCompaniesAnalyticsParamsAttribute = "technologies.categories"
)

// Defines values for FetchCompaniesAnalyticsParamsSort.
const (
	FetchCompaniesAnalyticsParamsSortAsc  FetchCompaniesAnalyticsParamsSort = "asc"
	FetchCompaniesAnalyticsParamsSortDesc FetchCompaniesAnalyticsParamsSort = "desc"
)

// Defines values for ExportCompaniesAnalyticsJSONBodyAttributes.
const (
	ExportCompaniesAnalyticsJSONBodyAttributesAboutBusinessType                  ExportCompaniesAnalyticsJSONBodyAttributes = "about.businessType"
	ExportCompaniesAnalyticsJSONBodyAttributesAboutIndustries                    ExportCompaniesAnalyticsJSONBodyAttributes = "about.industries"
	ExportCompaniesAnalyticsJSONBodyAttributesAboutIndustry                      ExportCompaniesAnalyticsJSONBodyAttributes = "about.industry"
	ExportCompaniesAnalyticsJSONBodyAttributesAboutTotalEmployees                ExportCompaniesAnalyticsJSONBodyAttributes = "about.totalEmployees"
	ExportCompaniesAnalyticsJSONBodyAttributesAboutYearFounded                   ExportCompaniesAnalyticsJSONBodyAttributes = "about.yearFounded"
	ExportCompaniesAnalyticsJSONBodyAttributesAnalyticsMonthlyVisitors           ExportCompaniesAnalyticsJSONBodyAttributes = "analytics.monthlyVisitors"
	ExportCompaniesAnalyticsJSONBodyAttributesApps                               ExportCompaniesAnalyticsJSONBodyAttributes = "apps"
	ExportCompaniesAnalyticsJSONBodyAttributesCodesNaics                         ExportCompaniesAnalyticsJSONBodyAttributes = "codes.naics"
	ExportCompaniesAnalyticsJSONBodyAttributesCodesSic                           ExportCompaniesAnalyticsJSONBodyAttributes = "codes.sic"
	ExportCompaniesAnalyticsJSONBodyAttributesContacts                           ExportCompaniesAnalyticsJSONBodyAttributes = "contacts"
	ExportCompaniesAnalyticsJSONBodyAttributesDomainTld                          ExportCompaniesAnalyticsJSONBodyAttributes = "domain.tld"
	ExportCompaniesAnalyticsJSONBodyAttributesFinancesRevenue                    ExportCompaniesAnalyticsJSONBodyAttributes = "finances.revenue"
	ExportCompaniesAnalyticsJSONBodyAttributesFinancesStockExchange              ExportCompaniesAnalyticsJSONBodyAttributes = "finances.stockExchange"
	ExportCompaniesAnalyticsJSONBodyAttributesLocationsHeadquartersCityCode      ExportCompaniesAnalyticsJSONBodyAttributes = "locations.headquarters.city.code"
	ExportCompaniesAnalyticsJSONBodyAttributesLocationsHeadquartersContinentCode ExportCompaniesAnalyticsJSONBodyAttributes = "locations.headquarters.continent.code"
	ExportCompaniesAnalyticsJSONBodyAttributesLocationsHeadquartersCountryCode   ExportCompaniesAnalyticsJSONBodyAttributes = "locations.headquarters.country.code"
	ExportCompaniesAnalyticsJSONBodyAttributesLocationsHeadquartersCountyCode    ExportCompaniesAnalyticsJSONBodyAttributes = "locations.headquarters.county.code"
	ExportCompaniesAnalyticsJSONBodyAttributesLocationsHeadquartersStateCode     ExportCompaniesAnalyticsJSONBodyAttributes = "locations.headquarters.state.code"
	ExportCompaniesAnalyticsJSONBodyAttributesMetaScore                          ExportCompaniesAnalyticsJSONBodyAttributes = "meta.score"
	ExportCompaniesAnalyticsJSONBodyAttributesMetaSyncedAt                       ExportCompaniesAnalyticsJSONBodyAttributes = "meta.syncedAt"
	ExportCompaniesAnalyticsJSONBodyAttributesSocials                            ExportCompaniesAnalyticsJSONBodyAttributes = "socials"
	ExportCompaniesAnalyticsJSONBodyAttributesTechnologiesActive                 ExportCompaniesAnalyticsJSONBodyAttributes = "technologies.active"
	ExportCompaniesAnalyticsJSONBodyAttributesTechnologiesCategories             ExportCompaniesAnalyticsJSONBodyAttributes = "technologies.categories"
)

// Defines values for ExportCompaniesAnalyticsJSONBodyFormat.
const (
	Csv  ExportCompaniesAnalyticsJSONBodyFormat = "csv"
	Json ExportCompaniesAnalyticsJSONBodyFormat = "json"
	Txt  ExportCompaniesAnalyticsJSONBodyFormat = "txt"
	Xls  ExportCompaniesAnalyticsJSONBodyFormat = "xls"
	Xml  ExportCompaniesAnalyticsJSONBodyFormat = "xml"
)

// Defines values for ExportCompaniesAnalyticsJSONBodySort.
const (
	ExportCompaniesAnalyticsJSONBodySortAsc  ExportCompaniesAnalyticsJSONBodySort = "asc"
	ExportCompaniesAnalyticsJSONBodySortDesc ExportCompaniesAnalyticsJSONBodySort = "desc"
)

// Defines values for SearchCompaniesByNameParamsSearchFields.
const (
	SearchCompaniesByNameParamsSearchFieldsAboutName    SearchCompaniesByNameParamsSearchFields = "about.name"
	SearchCompaniesByNameParamsSearchFieldsDomainDomain SearchCompaniesByNameParamsSearchFields = "domain.domain"
)

// Defines values for SearchCompaniesByNameParamsSortFieldsKey.
const (
	SearchCompaniesByNameParamsSortFieldsKeyAboutBusinessType                SearchCompaniesByNameParamsSortFieldsKey = "about.businessType"
	SearchCompaniesByNameParamsSortFieldsKeyAboutIndustries                  SearchCompaniesByNameParamsSortFieldsKey = "about.industries"
	SearchCompaniesByNameParamsSortFieldsKeyAboutIndustry                    SearchCompaniesByNameParamsSortFieldsKey = "about.industry"
	SearchCompaniesByNameParamsSortFieldsKeyAboutName                        SearchCompaniesByNameParamsSortFieldsKey = "about.name"
	SearchCompaniesByNameParamsSortFieldsKeyAboutTotalEmployees              SearchCompaniesByNameParamsSortFieldsKey = "about.totalEmployees"
	SearchCompaniesByNameParamsSortFieldsKeyAboutYearFounded                 SearchCompaniesByNameParamsSortFieldsKey = "about.yearFounded"
	SearchCompaniesByNameParamsSortFieldsKeyAnalyticsMonthlyVisitors         SearchCompaniesByNameParamsSortFieldsKey = "analytics.monthlyVisitors"
	SearchCompaniesByNameParamsSortFieldsKeyApps                             SearchCompaniesByNameParamsSortFieldsKey = "apps"
	SearchCompaniesByNameParamsSortFieldsKeyCodesNaics                       SearchCompaniesByNameParamsSortFieldsKey = "codes.naics"
	SearchCompaniesByNameParamsSortFieldsKeyCodesSic                         SearchCompaniesByNameParamsSortFieldsKey = "codes.sic"
	SearchCompaniesByNameParamsSortFieldsKeyContacts                         SearchCompaniesByNameParamsSortFieldsKey = "contacts"
	SearchCompaniesByNameParamsSortFieldsKeyDomainDomain                     SearchCompaniesByNameParamsSortFieldsKey = "domain.domain"
	SearchCompaniesByNameParamsSortFieldsKeyDomainTld                        SearchCompaniesByNameParamsSortFieldsKey = "domain.tld"
	SearchCompaniesByNameParamsSortFieldsKeyFinancesRevenue                  SearchCompaniesByNameParamsSortFieldsKey = "finances.revenue"
	SearchCompaniesByNameParamsSortFieldsKeyLocationsHeadquartersCityCode    SearchCompaniesByNameParamsSortFieldsKey = "locations.headquarters.city.code"
	SearchCompaniesByNameParamsSortFieldsKeyLocationsHeadquartersCountryCode SearchCompaniesByNameParamsSortFieldsKey = "locations.headquarters.country.code"
	SearchCompaniesByNameParamsSortFieldsKeyLocationsHeadquartersCountyCode  SearchCompaniesByNameParamsSortFieldsKey = "locations.headquarters.county.code"
	SearchCompaniesByNameParamsSortFieldsKeyLocationsHeadquartersStateCode   SearchCompaniesByNameParamsSortFieldsKey = "locations.headquarters.state.code"
	SearchCompaniesByNameParamsSortFieldsKeyMetaScore                        SearchCompaniesByNameParamsSortFieldsKey = "meta.score"
	SearchCompaniesByNameParamsSortFieldsKeyMetaSyncedAt                     SearchCompaniesByNameParamsSortFieldsKey = "meta.syncedAt"
	SearchCompaniesByNameParamsSortFieldsKeySocials                          SearchCompaniesByNameParamsSortFieldsKey = "socials"
	SearchCompaniesByNameParamsSortFieldsKeyTechnologiesActive               SearchCompaniesByNameParamsSortFieldsKey = "technologies.active"
	SearchCompaniesByNameParamsSortFieldsKeyUrls                             SearchCompaniesByNameParamsSortFieldsKey = "urls"
)

// Defines values for SearchCompaniesByNameParamsSortFieldsMissing.
const (
	SearchCompaniesByNameParamsSortFieldsMissingUnderscoreFirst SearchCompaniesByNameParamsSortFieldsMissing = "_first"
	SearchCompaniesByNameParamsSortFieldsMissingUnderscoreLast  SearchCompaniesByNameParamsSortFieldsMissing = "_last"
)

// Defines values for SearchCompaniesByNameParamsSortFieldsOrder.
const (
	SearchCompaniesByNameParamsSortFieldsOrderAsc  SearchCompaniesByNameParamsSortFieldsOrder = "asc"
	SearchCompaniesByNameParamsSortFieldsOrderDesc SearchCompaniesByNameParamsSortFieldsOrder = "desc"
)

// Defines values for SearchCompaniesByNameParamsSortKey.
const (
	SearchCompaniesByNameParamsSortKeyAboutBusinessType                SearchCompaniesByNameParamsSortKey = "about.businessType"
	SearchCompaniesByNameParamsSortKeyAboutIndustries                  SearchCompaniesByNameParamsSortKey = "about.industries"
	SearchCompaniesByNameParamsSortKeyAboutIndustry                    SearchCompaniesByNameParamsSortKey = "about.industry"
	SearchCompaniesByNameParamsSortKeyAboutName                        SearchCompaniesByNameParamsSortKey = "about.name"
	SearchCompaniesByNameParamsSortKeyAboutTotalEmployees              SearchCompaniesByNameParamsSortKey = "about.totalEmployees"
	SearchCompaniesByNameParamsSortKeyAboutYearFounded                 SearchCompaniesByNameParamsSortKey = "about.yearFounded"
	SearchCompaniesByNameParamsSortKeyAnalyticsMonthlyVisitors         SearchCompaniesByNameParamsSortKey = "analytics.monthlyVisitors"
	SearchCompaniesByNameParamsSortKeyApps                             SearchCompaniesByNameParamsSortKey = "apps"
	SearchCompaniesByNameParamsSortKeyCodesNaics                       SearchCompaniesByNameParamsSortKey = "codes.naics"
	SearchCompaniesByNameParamsSortKeyCodesSic                         SearchCompaniesByNameParamsSortKey = "codes.sic"
	SearchCompaniesByNameParamsSortKeyContacts                         SearchCompaniesByNameParamsSortKey = "contacts"
	SearchCompaniesByNameParamsSortKeyDomainDomain                     SearchCompaniesByNameParamsSortKey = "domain.domain"
	SearchCompaniesByNameParamsSortKeyDomainTld                        SearchCompaniesByNameParamsSortKey = "domain.tld"
	SearchCompaniesByNameParamsSortKeyFinancesRevenue                  SearchCompaniesByNameParamsSortKey = "finances.revenue"
	SearchCompaniesByNameParamsSortKeyLocationsHeadquartersCityCode    SearchCompaniesByNameParamsSortKey = "locations.headquarters.city.code"
	SearchCompaniesByNameParamsSortKeyLocationsHeadquartersCountryCode SearchCompaniesByNameParamsSortKey = "locations.headquarters.country.code"
	SearchCompaniesByNameParamsSortKeyLocationsHeadquartersCountyCode  SearchCompaniesByNameParamsSortKey = "locations.headquarters.county.code"
	SearchCompaniesByNameParamsSortKeyLocationsHeadquartersStateCode   SearchCompaniesByNameParamsSortKey = "locations.headquarters.state.code"
	SearchCompaniesByNameParamsSortKeyMetaScore                        SearchCompaniesByNameParamsSortKey = "meta.score"
	SearchCompaniesByNameParamsSortKeyMetaSyncedAt                     SearchCompaniesByNameParamsSortKey = "meta.syncedAt"
	SearchCompaniesByNameParamsSortKeySocials                          SearchCompaniesByNameParamsSortKey = "socials"
	SearchCompaniesByNameParamsSortKeyTechnologiesActive               SearchCompaniesByNameParamsSortKey = "technologies.active"
	SearchCompaniesByNameParamsSortKeyUrls                             SearchCompaniesByNameParamsSortKey = "urls"
)

// Defines values for SearchCompaniesByNameParamsSortOrder.
const (
	SearchCompaniesByNameParamsSortOrderAsc  SearchCompaniesByNameParamsSortOrder = "asc"
	SearchCompaniesByNameParamsSortOrderDesc SearchCompaniesByNameParamsSortOrder = "desc"
)

// Defines values for SearchCompaniesByPromptParamsSortFieldsKey.
const (
	SearchCompaniesByPromptParamsSortFieldsKeyAboutBusinessType                SearchCompaniesByPromptParamsSortFieldsKey = "about.businessType"
	SearchCompaniesByPromptParamsSortFieldsKeyAboutIndustries                  SearchCompaniesByPromptParamsSortFieldsKey = "about.industries"
	SearchCompaniesByPromptParamsSortFieldsKeyAboutIndustry                    SearchCompaniesByPromptParamsSortFieldsKey = "about.industry"
	SearchCompaniesByPromptParamsSortFieldsKeyAboutName                        SearchCompaniesByPromptParamsSortFieldsKey = "about.name"
	SearchCompaniesByPromptParamsSortFieldsKeyAboutTotalEmployees              SearchCompaniesByPromptParamsSortFieldsKey = "about.totalEmployees"
	SearchCompaniesByPromptParamsSortFieldsKeyAboutYearFounded                 SearchCompaniesByPromptParamsSortFieldsKey = "about.yearFounded"
	SearchCompaniesByPromptParamsSortFieldsKeyAnalyticsMonthlyVisitors         SearchCompaniesByPromptParamsSortFieldsKey = "analytics.monthlyVisitors"
	SearchCompaniesByPromptParamsSortFieldsKeyApps                             SearchCompaniesByPromptParamsSortFieldsKey = "apps"
	SearchCompaniesByPromptParamsSortFieldsKeyCodesNaics                       SearchCompaniesByPromptParamsSortFieldsKey = "codes.naics"
	SearchCompaniesByPromptParamsSortFieldsKeyCodesSic                         SearchCompaniesByPromptParamsSortFieldsKey = "codes.sic"
	SearchCompaniesByPromptParamsSortFieldsKeyContacts                         SearchCompaniesByPromptParamsSortFieldsKey = "contacts"
	SearchCompaniesByPromptParamsSortFieldsKeyDomainDomain                     SearchCompaniesByPromptParamsSortFieldsKey = "domain.domain"
	SearchCompaniesByPromptParamsSortFieldsKeyDomainTld                        SearchCompaniesByPromptParamsSortFieldsKey = "domain.tld"
	SearchCompaniesByPromptParamsSortFieldsKeyFinancesRevenue                  SearchCompaniesByPromptParamsSortFieldsKey = "finances.revenue"
	SearchCompaniesByPromptParamsSortFieldsKeyLocationsHeadquartersCityCode    SearchCompaniesByPromptParamsSortFieldsKey = "locations.headquarters.city.code"
	SearchCompaniesByPromptParamsSortFieldsKeyLocationsHeadquartersCountryCode SearchCompaniesByPromptParamsSortFieldsKey = "locations.headquarters.country.code"
	SearchCompaniesByPromptParamsSortFieldsKeyLocationsHeadquartersCountyCode  SearchCompaniesByPromptParamsSortFieldsKey = "locations.headquarters.county.code"
	SearchCompaniesByPromptParamsSortFieldsKeyLocationsHeadquartersStateCode   SearchCompaniesByPromptParamsSortFieldsKey = "locations.headquarters.state.code"
	SearchCompaniesByPromptParamsSortFieldsKeyMetaScore                        SearchCompaniesByPromptParamsSortFieldsKey = "meta.score"
	SearchCompaniesByPromptParamsSortFieldsKeyMetaSyncedAt                     SearchCompaniesByPromptParamsSortFieldsKey = "meta.syncedAt"
	SearchCompaniesByPromptParamsSortFieldsKeySocials                          SearchCompaniesByPromptParamsSortFieldsKey = "socials"
	SearchCompaniesByPromptParamsSortFieldsKeyTechnologiesActive               SearchCompaniesByPromptParamsSortFieldsKey = "technologies.active"
	SearchCompaniesByPromptParamsSortFieldsKeyUrls                             SearchCompaniesByPromptParamsSortFieldsKey = "urls"
)

// Defines values for SearchCompaniesByPromptParamsSortFieldsMissing.
const (
	SearchCompaniesByPromptParamsSortFieldsMissingUnderscoreFirst SearchCompaniesByPromptParamsSortFieldsMissing = "_first"
	SearchCompaniesByPromptParamsSortFieldsMissingUnderscoreLast  SearchCompaniesByPromptParamsSortFieldsMissing = "_last"
)

// Defines values for SearchCompaniesByPromptParamsSortFieldsOrder.
const (
	SearchCompaniesByPromptParamsSortFieldsOrderAsc  SearchCompaniesByPromptParamsSortFieldsOrder = "asc"
	SearchCompaniesByPromptParamsSortFieldsOrderDesc SearchCompaniesByPromptParamsSortFieldsOrder = "desc"
)

// Defines values for SearchCompaniesByPromptParamsSortKey.
const (
	SearchCompaniesByPromptParamsSortKeyAboutBusinessType                SearchCompaniesByPromptParamsSortKey = "about.businessType"
	SearchCompaniesByPromptParamsSortKeyAboutIndustries                  SearchCompaniesByPromptParamsSortKey = "about.industries"
	SearchCompaniesByPromptParamsSortKeyAboutIndustry                    SearchCompaniesByPromptParamsSortKey = "about.industry"
	SearchCompaniesByPromptParamsSortKeyAboutName                        SearchCompaniesByPromptParamsSortKey = "about.name"
	SearchCompaniesByPromptParamsSortKeyAboutTotalEmployees              SearchCompaniesByPromptParamsSortKey = "about.totalEmployees"
	SearchCompaniesByPromptParamsSortKeyAboutYearFounded                 SearchCompaniesByPromptParamsSortKey = "about.yearFounded"
	SearchCompaniesByPromptParamsSortKeyAnalyticsMonthlyVisitors         SearchCompaniesByPromptParamsSortKey = "analytics.monthlyVisitors"
	SearchCompaniesByPromptParamsSortKeyApps                             SearchCompaniesByPromptParamsSortKey = "apps"
	SearchCompaniesByPromptParamsSortKeyCodesNaics                       SearchCompaniesByPromptParamsSortKey = "codes.naics"
	SearchCompaniesByPromptParamsSortKeyCodesSic                         SearchCompaniesByPromptParamsSortKey = "codes.sic"
	SearchCompaniesByPromptParamsSortKeyContacts                         SearchCompaniesByPromptParamsSortKey = "contacts"
	SearchCompaniesByPromptParamsSortKeyDomainDomain                     SearchCompaniesByPromptParamsSortKey = "domain.domain"
	SearchCompaniesByPromptParamsSortKeyDomainTld                        SearchCompaniesByPromptParamsSortKey = "domain.tld"
	SearchCompaniesByPromptParamsSortKeyFinancesRevenue                  SearchCompaniesByPromptParamsSortKey = "finances.revenue"
	SearchCompaniesByPromptParamsSortKeyLocationsHeadquartersCityCode    SearchCompaniesByPromptParamsSortKey = "locations.headquarters.city.code"
	SearchCompaniesByPromptParamsSortKeyLocationsHeadquartersCountryCode SearchCompaniesByPromptParamsSortKey = "locations.headquarters.country.code"
	SearchCompaniesByPromptParamsSortKeyLocationsHeadquartersCountyCode  SearchCompaniesByPromptParamsSortKey = "locations.headquarters.county.code"
	SearchCompaniesByPromptParamsSortKeyLocationsHeadquartersStateCode   SearchCompaniesByPromptParamsSortKey = "locations.headquarters.state.code"
	SearchCompaniesByPromptParamsSortKeyMetaScore                        SearchCompaniesByPromptParamsSortKey = "meta.score"
	SearchCompaniesByPromptParamsSortKeyMetaSyncedAt                     SearchCompaniesByPromptParamsSortKey = "meta.syncedAt"
	SearchCompaniesByPromptParamsSortKeySocials                          SearchCompaniesByPromptParamsSortKey = "socials"
	SearchCompaniesByPromptParamsSortKeyTechnologiesActive               SearchCompaniesByPromptParamsSortKey = "technologies.active"
	SearchCompaniesByPromptParamsSortKeyUrls                             SearchCompaniesByPromptParamsSortKey = "urls"
)

// Defines values for SearchCompaniesByPromptParamsSortOrder.
const (
	SearchCompaniesByPromptParamsSortOrderAsc  SearchCompaniesByPromptParamsSortOrder = "asc"
	SearchCompaniesByPromptParamsSortOrderDesc SearchCompaniesByPromptParamsSortOrder = "desc"
)

// Defines values for CountCompaniesParamsSearchFields.
const (
	CountCompaniesParamsSearchFieldsAboutName    CountCompaniesParamsSearchFields = "about.name"
	CountCompaniesParamsSearchFieldsDomainDomain CountCompaniesParamsSearchFields = "domain.domain"
)

// Defines values for CountCompaniesPostJSONBodySearchFields.
const (
	CountCompaniesPostJSONBodySearchFieldsAboutName    CountCompaniesPostJSONBodySearchFields = "about.name"
	CountCompaniesPostJSONBodySearchFieldsDomainDomain CountCompaniesPostJSONBodySearchFields = "domain.domain"
)

// Defines values for SearchSimilarCompaniesParamsProximityTerm.
const (
	Close SearchSimilarCompaniesParamsProximityTerm = "close"
	Far   SearchSimilarCompaniesParamsProximityTerm = "far"
	Near  SearchSimilarCompaniesParamsProximityTerm = "near"
)

// Defines values for SearchSimilarCompaniesParamsSortFieldsKey.
const (
	SearchSimilarCompaniesParamsSortFieldsKeyAboutBusinessType                SearchSimilarCompaniesParamsSortFieldsKey = "about.businessType"
	SearchSimilarCompaniesParamsSortFieldsKeyAboutIndustries                  SearchSimilarCompaniesParamsSortFieldsKey = "about.industries"
	SearchSimilarCompaniesParamsSortFieldsKeyAboutIndustry                    SearchSimilarCompaniesParamsSortFieldsKey = "about.industry"
	SearchSimilarCompaniesParamsSortFieldsKeyAboutName                        SearchSimilarCompaniesParamsSortFieldsKey = "about.name"
	SearchSimilarCompaniesParamsSortFieldsKeyAboutTotalEmployees              SearchSimilarCompaniesParamsSortFieldsKey = "about.totalEmployees"
	SearchSimilarCompaniesParamsSortFieldsKeyAboutYearFounded                 SearchSimilarCompaniesParamsSortFieldsKey = "about.yearFounded"
	SearchSimilarCompaniesParamsSortFieldsKeyAnalyticsMonthlyVisitors         SearchSimilarCompaniesParamsSortFieldsKey = "analytics.monthlyVisitors"
	SearchSimilarCompaniesParamsSortFieldsKeyApps                             SearchSimilarCompaniesParamsSortFieldsKey = "apps"
	SearchSimilarCompaniesParamsSortFieldsKeyCodesNaics                       SearchSimilarCompaniesParamsSortFieldsKey = "codes.naics"
	SearchSimilarCompaniesParamsSortFieldsKeyCodesSic                         SearchSimilarCompaniesParamsSortFieldsKey = "codes.sic"
	SearchSimilarCompaniesParamsSortFieldsKeyContacts                         SearchSimilarCompaniesParamsSortFieldsKey = "contacts"
	SearchSimilarCompaniesParamsSortFieldsKeyDomainDomain                     SearchSimilarCompaniesParamsSortFieldsKey = "domain.domain"
	SearchSimilarCompaniesParamsSortFieldsKeyDomainTld                        SearchSimilarCompaniesParamsSortFieldsKey = "domain.tld"
	SearchSimilarCompaniesParamsSortFieldsKeyFinancesRevenue                  SearchSimilarCompaniesParamsSortFieldsKey = "finances.revenue"
	SearchSimilarCompaniesParamsSortFieldsKeyLocationsHeadquartersCityCode    SearchSimilarCompaniesParamsSortFieldsKey = "locations.headquarters.city.code"
	SearchSimilarCompaniesParamsSortFieldsKeyLocationsHeadquartersCountryCode SearchSimilarCompaniesParamsSortFieldsKey = "locations.headquarters.country.code"
	SearchSimilarCompaniesParamsSortFieldsKeyLocationsHeadquartersCountyCode  SearchSimilarCompaniesParamsSortFieldsKey = "locations.headquarters.county.code"
	SearchSimilarCompaniesParamsSortFieldsKeyLocationsHeadquartersStateCode   SearchSimilarCompaniesParamsSortFieldsKey = "locations.headquarters.state.code"
	SearchSimilarCompaniesParamsSortFieldsKeyMetaScore                        SearchSimilarCompaniesParamsSortFieldsKey = "meta.score"
	SearchSimilarCompaniesParamsSortFieldsKeyMetaSyncedAt                     SearchSimilarCompaniesParamsSortFieldsKey = "meta.syncedAt"
	SearchSimilarCompaniesParamsSortFieldsKeySocials                          SearchSimilarCompaniesParamsSortFieldsKey = "socials"
	SearchSimilarCompaniesParamsSortFieldsKeyTechnologiesActive               SearchSimilarCompaniesParamsSortFieldsKey = "technologies.active"
	SearchSimilarCompaniesParamsSortFieldsKeyUrls                             SearchSimilarCompaniesParamsSortFieldsKey = "urls"
)

// Defines values for SearchSimilarCompaniesParamsSortFieldsMissing.
const (
	SearchSimilarCompaniesParamsSortFieldsMissingUnderscoreFirst SearchSimilarCompaniesParamsSortFieldsMissing = "_first"
	SearchSimilarCompaniesParamsSortFieldsMissingUnderscoreLast  SearchSimilarCompaniesParamsSortFieldsMissing = "_last"
)

// Defines values for SearchSimilarCompaniesParamsSortFieldsOrder.
const (
	SearchSimilarCompaniesParamsSortFieldsOrderAsc  SearchSimilarCompaniesParamsSortFieldsOrder = "asc"
	SearchSimilarCompaniesParamsSortFieldsOrderDesc SearchSimilarCompaniesParamsSortFieldsOrder = "desc"
)

// Defines values for SearchSimilarCompaniesParamsSortKey.
const (
	SearchSimilarCompaniesParamsSortKeyAboutBusinessType                SearchSimilarCompaniesParamsSortKey = "about.businessType"
	SearchSimilarCompaniesParamsSortKeyAboutIndustries                  SearchSimilarCompaniesParamsSortKey = "about.industries"
	SearchSimilarCompaniesParamsSortKeyAboutIndustry                    SearchSimilarCompaniesParamsSortKey = "about.industry"
	SearchSimilarCompaniesParamsSortKeyAboutName                        SearchSimilarCompaniesParamsSortKey = "about.name"
	SearchSimilarCompaniesParamsSortKeyAboutTotalEmployees              SearchSimilarCompaniesParamsSortKey = "about.totalEmployees"
	SearchSimilarCompaniesParamsSortKeyAboutYearFounded                 SearchSimilarCompaniesParamsSortKey = "about.yearFounded"
	SearchSimilarCompaniesParamsSortKeyAnalyticsMonthlyVisitors         SearchSimilarCompaniesParamsSortKey = "analytics.monthlyVisitors"
	SearchSimilarCompaniesParamsSortKeyApps                             SearchSimilarCompaniesParamsSortKey = "apps"
	SearchSimilarCompaniesParamsSortKeyCodesNaics                       SearchSimilarCompaniesParamsSortKey = "codes.naics"
	SearchSimilarCompaniesParamsSortKeyCodesSic                         SearchSimilarCompaniesParamsSortKey = "codes.sic"
	SearchSimilarCompaniesParamsSortKeyContacts                         SearchSimilarCompaniesParamsSortKey = "contacts"
	SearchSimilarCompaniesParamsSortKeyDomainDomain                     SearchSimilarCompaniesParamsSortKey = "domain.domain"
	SearchSimilarCompaniesParamsSortKeyDomainTld                        SearchSimilarCompaniesParamsSortKey = "domain.tld"
	SearchSimilarCompaniesParamsSortKeyFinancesRevenue                  SearchSimilarCompaniesParamsSortKey = "finances.revenue"
	SearchSimilarCompaniesParamsSortKeyLocationsHeadquartersCityCode    SearchSimilarCompaniesParamsSortKey = "locations.headquarters.city.code"
	SearchSimilarCompaniesParamsSortKeyLocationsHeadquartersCountryCode SearchSimilarCompaniesParamsSortKey = "locations.headquarters.country.code"
	SearchSimilarCompaniesParamsSortKeyLocationsHeadquartersCountyCode  SearchSimilarCompaniesParamsSortKey = "locations.headquarters.county.code"
	SearchSimilarCompaniesParamsSortKeyLocationsHeadquartersStateCode   SearchSimilarCompaniesParamsSortKey = "locations.headquarters.state.code"
	SearchSimilarCompaniesParamsSortKeyMetaScore                        SearchSimilarCompaniesParamsSortKey = "meta.score"
	SearchSimilarCompaniesParamsSortKeyMetaSyncedAt                     SearchSimilarCompaniesParamsSortKey = "meta.syncedAt"
	SearchSimilarCompaniesParamsSortKeySocials                          SearchSimilarCompaniesParamsSortKey = "socials"
	SearchSimilarCompaniesParamsSortKeyTechnologiesActive               SearchSimilarCompaniesParamsSortKey = "technologies.active"
	SearchSimilarCompaniesParamsSortKeyUrls                             SearchSimilarCompaniesParamsSortKey = "urls"
)

// Defines values for SearchSimilarCompaniesParamsSortOrder.
const (
	SearchSimilarCompaniesParamsSortOrderAsc  SearchSimilarCompaniesParamsSortOrder = "asc"
	SearchSimilarCompaniesParamsSortOrderDesc SearchSimilarCompaniesParamsSortOrder = "desc"
)

// Defines values for AskCompanyJSONBodyFieldsType.
const (
	AskCompanyJSONBodyFieldsTypeArrayboolean AskCompanyJSONBodyFieldsType = "array|boolean"
	AskCompanyJSONBodyFieldsTypeArraynumber  AskCompanyJSONBodyFieldsType = "array|number"
	AskCompanyJSONBodyFieldsTypeArraystring  AskCompanyJSONBodyFieldsType = "array|string"
	AskCompanyJSONBodyFieldsTypeBoolean      AskCompanyJSONBodyFieldsType = "boolean"
	AskCompanyJSONBodyFieldsTypeNumber       AskCompanyJSONBodyFieldsType = "number"
	AskCompanyJSONBodyFieldsTypeString       AskCompanyJSONBodyFieldsType = "string"
)

// Defines values for AskCompanyJSONBodyModel.
const (
	AskCompanyJSONBodyModelLarge AskCompanyJSONBodyModel = "large"
	AskCompanyJSONBodyModelSmall AskCompanyJSONBodyModel = "small"
)

// Defines values for CreateListJSONBodyMailFrequency.
const (
	CreateListJSONBodyMailFrequencyDaily    CreateListJSONBodyMailFrequency = "daily"
	CreateListJSONBodyMailFrequencyDisabled CreateListJSONBodyMailFrequency = "disabled"
	CreateListJSONBodyMailFrequencyMonthly  CreateListJSONBodyMailFrequency = "monthly"
	CreateListJSONBodyMailFrequencyWeekly   CreateListJSONBodyMailFrequency = "weekly"
)

// Defines values for UpdateListJSONBodyMailFrequency.
const (
	Daily    UpdateListJSONBodyMailFrequency = "daily"
	Disabled UpdateListJSONBodyMailFrequency = "disabled"
	Monthly  UpdateListJSONBodyMailFrequency = "monthly"
	Weekly   UpdateListJSONBodyMailFrequency = "weekly"
)

// Defines values for FetchCompaniesInListParamsSortFieldsKey.
const (
	FetchCompaniesInListParamsSortFieldsKeyAboutBusinessType                FetchCompaniesInListParamsSortFieldsKey = "about.businessType"
	FetchCompaniesInListParamsSortFieldsKeyAboutIndustries                  FetchCompaniesInListParamsSortFieldsKey = "about.industries"
	FetchCompaniesInListParamsSortFieldsKeyAboutIndustry                    FetchCompaniesInListParamsSortFieldsKey = "about.industry"
	FetchCompaniesInListParamsSortFieldsKeyAboutName                        FetchCompaniesInListParamsSortFieldsKey = "about.name"
	FetchCompaniesInListParamsSortFieldsKeyAboutTotalEmployees              FetchCompaniesInListParamsSortFieldsKey = "about.totalEmployees"
	FetchCompaniesInListParamsSortFieldsKeyAboutYearFounded                 FetchCompaniesInListParamsSortFieldsKey = "about.yearFounded"
	FetchCompaniesInListParamsSortFieldsKeyAnalyticsMonthlyVisitors         FetchCompaniesInListParamsSortFieldsKey = "analytics.monthlyVisitors"
	FetchCompaniesInListParamsSortFieldsKeyApps                             FetchCompaniesInListParamsSortFieldsKey = "apps"
	FetchCompaniesInListParamsSortFieldsKeyCodesNaics                       FetchCompaniesInListParamsSortFieldsKey = "codes.naics"
	FetchCompaniesInListParamsSortFieldsKeyCodesSic                         FetchCompaniesInListParamsSortFieldsKey = "codes.sic"
	FetchCompaniesInListParamsSortFieldsKeyContacts                         FetchCompaniesInListParamsSortFieldsKey = "contacts"
	FetchCompaniesInListParamsSortFieldsKeyDomainDomain                     FetchCompaniesInListParamsSortFieldsKey = "domain.domain"
	FetchCompaniesInListParamsSortFieldsKeyDomainTld                        FetchCompaniesInListParamsSortFieldsKey = "domain.tld"
	FetchCompaniesInListParamsSortFieldsKeyFinancesRevenue                  FetchCompaniesInListParamsSortFieldsKey = "finances.revenue"
	FetchCompaniesInListParamsSortFieldsKeyLocationsHeadquartersCityCode    FetchCompaniesInListParamsSortFieldsKey = "locations.headquarters.city.code"
	FetchCompaniesInListParamsSortFieldsKeyLocationsHeadquartersCountryCode FetchCompaniesInListParamsSortFieldsKey = "locations.headquarters.country.code"
	FetchCompaniesInListParamsSortFieldsKeyLocationsHeadquartersCountyCode  FetchCompaniesInListParamsSortFieldsKey = "locations.headquarters.county.code"
	FetchCompaniesInListParamsSortFieldsKeyLocationsHeadquartersStateCode   FetchCompaniesInListParamsSortFieldsKey = "locations.headquarters.state.code"
	FetchCompaniesInListParamsSortFieldsKeyMetaScore                        FetchCompaniesInListParamsSortFieldsKey = "meta.score"
	FetchCompaniesInListParamsSortFieldsKeyMetaSyncedAt                     FetchCompaniesInListParamsSortFieldsKey = "meta.syncedAt"
	FetchCompaniesInListParamsSortFieldsKeySocials                          FetchCompaniesInListParamsSortFieldsKey = "socials"
	FetchCompaniesInListParamsSortFieldsKeyTechnologiesActive               FetchCompaniesInListParamsSortFieldsKey = "technologies.active"
	FetchCompaniesInListParamsSortFieldsKeyUrls                             FetchCompaniesInListParamsSortFieldsKey = "urls"
)

// Defines values for FetchCompaniesInListParamsSortFieldsMissing.
const (
	FetchCompaniesInListParamsSortFieldsMissingUnderscoreFirst FetchCompaniesInListParamsSortFieldsMissing = "_first"
	FetchCompaniesInListParamsSortFieldsMissingUnderscoreLast  FetchCompaniesInListParamsSortFieldsMissing = "_last"
)

// Defines values for FetchCompaniesInListParamsSortFieldsOrder.
const (
	FetchCompaniesInListParamsSortFieldsOrderAsc  FetchCompaniesInListParamsSortFieldsOrder = "asc"
	FetchCompaniesInListParamsSortFieldsOrderDesc FetchCompaniesInListParamsSortFieldsOrder = "desc"
)

// Defines values for FetchCompaniesInListParamsSortKey.
const (
	FetchCompaniesInListParamsSortKeyAboutBusinessType                FetchCompaniesInListParamsSortKey = "about.businessType"
	FetchCompaniesInListParamsSortKeyAboutIndustries                  FetchCompaniesInListParamsSortKey = "about.industries"
	FetchCompaniesInListParamsSortKeyAboutIndustry                    FetchCompaniesInListParamsSortKey = "about.industry"
	FetchCompaniesInListParamsSortKeyAboutName                        FetchCompaniesInListParamsSortKey = "about.name"
	FetchCompaniesInListParamsSortKeyAboutTotalEmployees              FetchCompaniesInListParamsSortKey = "about.totalEmployees"
	FetchCompaniesInListParamsSortKeyAboutYearFounded                 FetchCompaniesInListParamsSortKey = "about.yearFounded"
	FetchCompaniesInListParamsSortKeyAnalyticsMonthlyVisitors         FetchCompaniesInListParamsSortKey = "analytics.monthlyVisitors"
	FetchCompaniesInListParamsSortKeyApps                             FetchCompaniesInListParamsSortKey = "apps"
	FetchCompaniesInListParamsSortKeyCodesNaics                       FetchCompaniesInListParamsSortKey = "codes.naics"
	FetchCompaniesInListParamsSortKeyCodesSic                         FetchCompaniesInListParamsSortKey = "codes.sic"
	FetchCompaniesInListParamsSortKeyContacts                         FetchCompaniesInListParamsSortKey = "contacts"
	FetchCompaniesInListParamsSortKeyDomainDomain                     FetchCompaniesInListParamsSortKey = "domain.domain"
	FetchCompaniesInListParamsSortKeyDomainTld                        FetchCompaniesInListParamsSortKey = "domain.tld"
	FetchCompaniesInListParamsSortKeyFinancesRevenue                  FetchCompaniesInListParamsSortKey = "finances.revenue"
	FetchCompaniesInListParamsSortKeyLocationsHeadquartersCityCode    FetchCompaniesInListParamsSortKey = "locations.headquarters.city.code"
	FetchCompaniesInListParamsSortKeyLocationsHeadquartersCountryCode FetchCompaniesInListParamsSortKey = "locations.headquarters.country.code"
	FetchCompaniesInListParamsSortKeyLocationsHeadquartersCountyCode  FetchCompaniesInListParamsSortKey = "locations.headquarters.county.code"
	FetchCompaniesInListParamsSortKeyLocationsHeadquartersStateCode   FetchCompaniesInListParamsSortKey = "locations.headquarters.state.code"
	FetchCompaniesInListParamsSortKeyMetaScore                        FetchCompaniesInListParamsSortKey = "meta.score"
	FetchCompaniesInListParamsSortKeyMetaSyncedAt                     FetchCompaniesInListParamsSortKey = "meta.syncedAt"
	FetchCompaniesInListParamsSortKeySocials                          FetchCompaniesInListParamsSortKey = "socials"
	FetchCompaniesInListParamsSortKeyTechnologiesActive               FetchCompaniesInListParamsSortKey = "technologies.active"
	FetchCompaniesInListParamsSortKeyUrls                             FetchCompaniesInListParamsSortKey = "urls"
)

// Defines values for FetchCompaniesInListParamsSortOrder.
const (
	FetchCompaniesInListParamsSortOrderAsc  FetchCompaniesInListParamsSortOrder = "asc"
	FetchCompaniesInListParamsSortOrderDesc FetchCompaniesInListParamsSortOrder = "desc"
)

// Defines values for FetchCompaniesInListPostJSONBodySortFieldsKey.
const (
	FetchCompaniesInListPostJSONBodySortFieldsKeyAboutBusinessType                FetchCompaniesInListPostJSONBodySortFieldsKey = "about.businessType"
	FetchCompaniesInListPostJSONBodySortFieldsKeyAboutIndustries                  FetchCompaniesInListPostJSONBodySortFieldsKey = "about.industries"
	FetchCompaniesInListPostJSONBodySortFieldsKeyAboutIndustry                    FetchCompaniesInListPostJSONBodySortFieldsKey = "about.industry"
	FetchCompaniesInListPostJSONBodySortFieldsKeyAboutName                        FetchCompaniesInListPostJSONBodySortFieldsKey = "about.name"
	FetchCompaniesInListPostJSONBodySortFieldsKeyAboutTotalEmployees              FetchCompaniesInListPostJSONBodySortFieldsKey = "about.totalEmployees"
	FetchCompaniesInListPostJSONBodySortFieldsKeyAboutYearFounded                 FetchCompaniesInListPostJSONBodySortFieldsKey = "about.yearFounded"
	FetchCompaniesInListPostJSONBodySortFieldsKeyAnalyticsMonthlyVisitors         FetchCompaniesInListPostJSONBodySortFieldsKey = "analytics.monthlyVisitors"
	FetchCompaniesInListPostJSONBodySortFieldsKeyApps                             FetchCompaniesInListPostJSONBodySortFieldsKey = "apps"
	FetchCompaniesInListPostJSONBodySortFieldsKeyCodesNaics                       FetchCompaniesInListPostJSONBodySortFieldsKey = "codes.naics"
	FetchCompaniesInListPostJSONBodySortFieldsKeyCodesSic                         FetchCompaniesInListPostJSONBodySortFieldsKey = "codes.sic"
	FetchCompaniesInListPostJSONBodySortFieldsKeyContacts                         FetchCompaniesInListPostJSONBodySortFieldsKey = "contacts"
	FetchCompaniesInListPostJSONBodySortFieldsKeyDomainDomain                     FetchCompaniesInListPostJSONBodySortFieldsKey = "domain.domain"
	FetchCompaniesInListPostJSONBodySortFieldsKeyDomainTld                        FetchCompaniesInListPostJSONBodySortFieldsKey = "domain.tld"
	FetchCompaniesInListPostJSONBodySortFieldsKeyFinancesRevenue                  FetchCompaniesInListPostJSONBodySortFieldsKey = "finances.revenue"
	FetchCompaniesInListPostJSONBodySortFieldsKeyLocationsHeadquartersCityCode    FetchCompaniesInListPostJSONBodySortFieldsKey = "locations.headquarters.city.code"
	FetchCompaniesInListPostJSONBodySortFieldsKeyLocationsHeadquartersCountryCode FetchCompaniesInListPostJSONBodySortFieldsKey = "locations.headquarters.country.code"
	FetchCompaniesInListPostJSONBodySortFieldsKeyLocationsHeadquartersCountyCode  FetchCompaniesInListPostJSONBodySortFieldsKey = "locations.headquarters.county.code"
	FetchCompaniesInListPostJSONBodySortFieldsKeyLocationsHeadquartersStateCode   FetchCompaniesInListPostJSONBodySortFieldsKey = "locations.headquarters.state.code"
	FetchCompaniesInListPostJSONBodySortFieldsKeyMetaScore                        FetchCompaniesInListPostJSONBodySortFieldsKey = "meta.score"
	FetchCompaniesInListPostJSONBodySortFieldsKeyMetaSyncedAt                     FetchCompaniesInListPostJSONBodySortFieldsKey = "meta.syncedAt"
	FetchCompaniesInListPostJSONBodySortFieldsKeySocials                          FetchCompaniesInListPostJSONBodySortFieldsKey = "socials"
	FetchCompaniesInListPostJSONBodySortFieldsKeyTechnologiesActive               FetchCompaniesInListPostJSONBodySortFieldsKey = "technologies.active"
	FetchCompaniesInListPostJSONBodySortFieldsKeyUrls                             FetchCompaniesInListPostJSONBodySortFieldsKey = "urls"
)

// Defines values for FetchCompaniesInListPostJSONBodySortFieldsMissing.
const (
	UnderscoreFirst FetchCompaniesInListPostJSONBodySortFieldsMissing = "_first"
	UnderscoreLast  FetchCompaniesInListPostJSONBodySortFieldsMissing = "_last"
)

// Defines values for FetchCompaniesInListPostJSONBodySortFieldsOrder.
const (
	FetchCompaniesInListPostJSONBodySortFieldsOrderAsc  FetchCompaniesInListPostJSONBodySortFieldsOrder = "asc"
	FetchCompaniesInListPostJSONBodySortFieldsOrderDesc FetchCompaniesInListPostJSONBodySortFieldsOrder = "desc"
)

// Defines values for FetchCompaniesInListPostJSONBodySortKey.
const (
	AboutBusinessType                FetchCompaniesInListPostJSONBodySortKey = "about.businessType"
	AboutIndustries                  FetchCompaniesInListPostJSONBodySortKey = "about.industries"
	AboutIndustry                    FetchCompaniesInListPostJSONBodySortKey = "about.industry"
	AboutName                        FetchCompaniesInListPostJSONBodySortKey = "about.name"
	AboutTotalEmployees              FetchCompaniesInListPostJSONBodySortKey = "about.totalEmployees"
	AboutYearFounded                 FetchCompaniesInListPostJSONBodySortKey = "about.yearFounded"
	AnalyticsMonthlyVisitors         FetchCompaniesInListPostJSONBodySortKey = "analytics.monthlyVisitors"
	Apps                             FetchCompaniesInListPostJSONBodySortKey = "apps"
	CodesNaics                       FetchCompaniesInListPostJSONBodySortKey = "codes.naics"
	CodesSic                         FetchCompaniesInListPostJSONBodySortKey = "codes.sic"
	Contacts                         FetchCompaniesInListPostJSONBodySortKey = "contacts"
	DomainDomain                     FetchCompaniesInListPostJSONBodySortKey = "domain.domain"
	DomainTld                        FetchCompaniesInListPostJSONBodySortKey = "domain.tld"
	FinancesRevenue                  FetchCompaniesInListPostJSONBodySortKey = "finances.revenue"
	LocationsHeadquartersCityCode    FetchCompaniesInListPostJSONBodySortKey = "locations.headquarters.city.code"
	LocationsHeadquartersCountryCode FetchCompaniesInListPostJSONBodySortKey = "locations.headquarters.country.code"
	LocationsHeadquartersCountyCode  FetchCompaniesInListPostJSONBodySortKey = "locations.headquarters.county.code"
	LocationsHeadquartersStateCode   FetchCompaniesInListPostJSONBodySortKey = "locations.headquarters.state.code"
	MetaScore                        FetchCompaniesInListPostJSONBodySortKey = "meta.score"
	MetaSyncedAt                     FetchCompaniesInListPostJSONBodySortKey = "meta.syncedAt"
	Socials                          FetchCompaniesInListPostJSONBodySortKey = "socials"
	TechnologiesActive               FetchCompaniesInListPostJSONBodySortKey = "technologies.active"
	Urls                             FetchCompaniesInListPostJSONBodySortKey = "urls"
)

// Defines values for FetchCompaniesInListPostJSONBodySortOrder.
const (
	FetchCompaniesInListPostJSONBodySortOrderAsc  FetchCompaniesInListPostJSONBodySortOrder = "asc"
	FetchCompaniesInListPostJSONBodySortOrderDesc FetchCompaniesInListPostJSONBodySortOrder = "desc"
)

// Defines values for ToggleCompaniesInListJSONBodyAction.
const (
	Attach ToggleCompaniesInListJSONBodyAction = "attach"
	Detach ToggleCompaniesInListJSONBodyAction = "detach"
)

// Defines values for SearchCitiesParamsSortKey.
const (
	SearchCitiesParamsSortKeyCountsCompanies SearchCitiesParamsSortKey = "counts.companies"
)

// Defines values for SearchCitiesParamsSortOrder.
const (
	SearchCitiesParamsSortOrderAsc  SearchCitiesParamsSortOrder = "asc"
	SearchCitiesParamsSortOrderDesc SearchCitiesParamsSortOrder = "desc"
)

// Defines values for SearchContinentsParamsSortKey.
const (
	SearchContinentsParamsSortKeyCountsCompanies SearchContinentsParamsSortKey = "counts.companies"
)

// Defines values for SearchContinentsParamsSortOrder.
const (
	SearchContinentsParamsSortOrderAsc  SearchContinentsParamsSortOrder = "asc"
	SearchContinentsParamsSortOrderDesc SearchContinentsParamsSortOrder = "desc"
)

// Defines values for SearchCountiesParamsSortKey.
const (
	SearchCountiesParamsSortKeyCountsCompanies SearchCountiesParamsSortKey = "counts.companies"
)

// Defines values for SearchCountiesParamsSortOrder.
const (
	SearchCountiesParamsSortOrderAsc  SearchCountiesParamsSortOrder = "asc"
	SearchCountiesParamsSortOrderDesc SearchCountiesParamsSortOrder = "desc"
)

// Defines values for SearchCountriesParamsSortKey.
const (
	SearchCountriesParamsSortKeyCountsCompanies SearchCountriesParamsSortKey = "counts.companies"
)

// Defines values for SearchCountriesParamsSortOrder.
const (
	SearchCountriesParamsSortOrderAsc  SearchCountriesParamsSortOrder = "asc"
	SearchCountriesParamsSortOrderDesc SearchCountriesParamsSortOrder = "desc"
)

// Defines values for SearchStatesParamsSortKey.
const (
	CountsCompanies SearchStatesParamsSortKey = "counts.companies"
)

// Defines values for SearchStatesParamsSortOrder.
const (
	Asc  SearchStatesParamsSortOrder = "asc"
	Desc SearchStatesParamsSortOrder = "desc"
)

// Defines values for FetchPromptsParamsContext.
const (
	FetchPromptsParamsContextAnalytics     FetchPromptsParamsContext = "analytics"
	FetchPromptsParamsContextApi           FetchPromptsParamsContext = "api"
	FetchPromptsParamsContextCompanies     FetchPromptsParamsContext = "companies"
	FetchPromptsParamsContextCompany       FetchPromptsParamsContext = "company"
	FetchPromptsParamsContextDocumentation FetchPromptsParamsContext = "documentation"
	FetchPromptsParamsContextEnrichment    FetchPromptsParamsContext = "enrichment"
	FetchPromptsParamsContextLanding       FetchPromptsParamsContext = "landing"
	FetchPromptsParamsContextList          FetchPromptsParamsContext = "list"
	FetchPromptsParamsContextSimilarity    FetchPromptsParamsContext = "similarity"
)

// Defines values for FetchPromptsParamsFeature.
const (
	FetchPromptsParamsFeatureAsk     FetchPromptsParamsFeature = "ask"
	FetchPromptsParamsFeatureCleanup FetchPromptsParamsFeature = "cleanup"
	FetchPromptsParamsFeatureEnrich  FetchPromptsParamsFeature = "enrich"
	FetchPromptsParamsFeatureProduct FetchPromptsParamsFeature = "product"
	FetchPromptsParamsFeatureSearch  FetchPromptsParamsFeature = "search"
	FetchPromptsParamsFeatureSimilar FetchPromptsParamsFeature = "similar"
)

// Defines values for FetchPromptsParamsModel.
const (
	FetchPromptsParamsModelLarge FetchPromptsParamsModel = "large"
	FetchPromptsParamsModelSmall FetchPromptsParamsModel = "small"
)

// Defines values for ProductPromptJSONBodyContext.
const (
	ProductPromptJSONBodyContextAnalytics     ProductPromptJSONBodyContext = "analytics"
	ProductPromptJSONBodyContextApi           ProductPromptJSONBodyContext = "api"
	ProductPromptJSONBodyContextCompanies     ProductPromptJSONBodyContext = "companies"
	ProductPromptJSONBodyContextCompany       ProductPromptJSONBodyContext = "company"
	ProductPromptJSONBodyContextDocumentation ProductPromptJSONBodyContext = "documentation"
	ProductPromptJSONBodyContextEnrichment    ProductPromptJSONBodyContext = "enrichment"
	ProductPromptJSONBodyContextLanding       ProductPromptJSONBodyContext = "landing"
	ProductPromptJSONBodyContextList          ProductPromptJSONBodyContext = "list"
	ProductPromptJSONBodyContextSimilarity    ProductPromptJSONBodyContext = "similarity"
)

// Defines values for ProductPromptJSONBodyFeature.
const (
	Ask     ProductPromptJSONBodyFeature = "ask"
	Cleanup ProductPromptJSONBodyFeature = "cleanup"
	Enrich  ProductPromptJSONBodyFeature = "enrich"
	Product ProductPromptJSONBodyFeature = "product"
	Search  ProductPromptJSONBodyFeature = "search"
	Similar ProductPromptJSONBodyFeature = "similar"
)

// Defines values for ProductPromptJSONBodyModel.
const (
	ProductPromptJSONBodyModelLarge ProductPromptJSONBodyModel = "large"
	ProductPromptJSONBodyModelSmall ProductPromptJSONBodyModel = "small"
)

// Defines values for PromptToSegmentationJSONBodyContext.
const (
	PromptToSegmentationJSONBodyContextAnalytics     PromptToSegmentationJSONBodyContext = "analytics"
	PromptToSegmentationJSONBodyContextApi           PromptToSegmentationJSONBodyContext = "api"
	PromptToSegmentationJSONBodyContextCompanies     PromptToSegmentationJSONBodyContext = "companies"
	PromptToSegmentationJSONBodyContextCompany       PromptToSegmentationJSONBodyContext = "company"
	PromptToSegmentationJSONBodyContextDocumentation PromptToSegmentationJSONBodyContext = "documentation"
	PromptToSegmentationJSONBodyContextEnrichment    PromptToSegmentationJSONBodyContext = "enrichment"
	PromptToSegmentationJSONBodyContextLanding       PromptToSegmentationJSONBodyContext = "landing"
	PromptToSegmentationJSONBodyContextList          PromptToSegmentationJSONBodyContext = "list"
	PromptToSegmentationJSONBodyContextSimilarity    PromptToSegmentationJSONBodyContext = "similarity"
)

// Defines values for PromptToSegmentationJSONBodyModel.
const (
	PromptToSegmentationJSONBodyModelLarge PromptToSegmentationJSONBodyModel = "large"
	PromptToSegmentationJSONBodyModelSmall PromptToSegmentationJSONBodyModel = "small"
)

// Action An action tracks a request made to our job queue and its result.
type Action struct {
	Attempts  *float32 `json:"attempts,omitempty"`
	Cost      *float32 `json:"cost"`
	CreatedAt *string  `json:"createdAt"`
	Data      *struct {
		CleanedUp              *float32    `json:"cleanedUp,omitempty"`
		Completed              *[]string   `json:"completed,omitempty"`
		CompletedDomains       *float32    `json:"completedDomains,omitempty"`
		CompletedDomainsSample *[]string   `json:"completedDomainsSample,omitempty"`
		Count                  *float32    `json:"count,omitempty"`
		Domains                *[]string   `json:"domains,omitempty"`
		DomainsSample          *[]string   `json:"domainsSample,omitempty"`
		ElasticQuery           interface{} `json:"elasticQuery,omitempty"`
		Failed                 *[]string   `json:"failed,omitempty"`
		FailedDomains          *float32    `json:"failedDomains,omitempty"`
		FailedDomainsSample    *[]string   `json:"failedDomainsSample,omitempty"`
		Fields                 *[]struct {
			Description *string              `json:"description,omitempty"`
			Key         string               `json:"key"`
			Type        ActionDataFieldsType `json:"type"`
			Values      *[]string            `json:"values,omitempty"`
		} `json:"fields,omitempty"`
		Grounded *bool                    `json:"grounded,omitempty"`
		Job      *ActionDataJob           `json:"job,omitempty"`
		Model    *ActionDataModel         `json:"model,omitempty"`
		Query    *[]SegmentationCondition `json:"query,omitempty"`
		Question *string                  `json:"question,omitempty"`

		// Team A collection of users that can access the same resources.
		Team         *Team    `json:"team,omitempty"`
		TotalDomains *float32 `json:"totalDomains,omitempty"`

		// User A user of the platform.
		User *User `json:"user,omitempty"`
	} `json:"data,omitempty"`
	Id       float32  `json:"id"`
	ListId   *float32 `json:"listId,omitempty"`
	PromptId *float32 `json:"promptId,omitempty"`
	Result   *struct {
		Answers   *[]LLMAnswer `json:"answers,omitempty"`
		CleanedUp *float32     `json:"cleanedUp,omitempty"`
		Domains   *[]string    `json:"domains,omitempty"`
	} `json:"result,omitempty"`
	Status    ActionStatus `json:"status"`
	TeamId    *float32     `json:"teamId,omitempty"`
	Type      *ActionType  `json:"type,omitempty"`
	UpdatedAt *string      `json:"updatedAt"`
}

// ActionDataFieldsType defines model for Action.Data.Fields.Type.
type ActionDataFieldsType string

// ActionDataJob defines model for Action.Data.Job.
type ActionDataJob string

// ActionDataModel defines model for Action.Data.Model.
type ActionDataModel string

// ActionStatus defines model for Action.Status.
type ActionStatus string

// ActionType defines model for Action.Type.
type ActionType string

// CompanyV2 Our complete schema for company data.
type CompanyV2 struct {
	About *struct {
		// BusinessType The type of business the company is.
		BusinessType *CompanyV2AboutBusinessType `json:"businessType,omitempty"`

		// Industries The industries the company is in.
		Industries *[]string `json:"industries,omitempty"`

		// Industry The main industry of the company.
		Industry *string `json:"industry,omitempty"`

		// Languages The languages the company supports.
		Languages *[]string `json:"languages,omitempty"`

		// Name The name of the company.
		Name *string `json:"name,omitempty"`

		// NameAlts The alternative names of the company.
		NameAlts *[]string `json:"nameAlts,omitempty"`

		// NameLegal The legal name of the company.
		NameLegal *string `json:"nameLegal,omitempty"`

		// TotalEmployees The total number of employees the company has.
		TotalEmployees *CompanyV2AboutTotalEmployees `json:"totalEmployees,omitempty"`

		// TotalEmployeesExact The exact total number of employees the company has.
		TotalEmployeesExact *float32 `json:"totalEmployeesExact,omitempty"`

		// YearEnded The year the company stopped its operations.
		YearEnded *float32 `json:"yearEnded,omitempty"`

		// YearFounded The year the company was founded.
		YearFounded *float32 `json:"yearFounded,omitempty"`

		// YearFoundedDate The date the company was founded.
		YearFoundedDate *string `json:"yearFoundedDate,omitempty"`

		// YearFoundedPlace The place the company was founded.
		YearFoundedPlace *string `json:"yearFoundedPlace,omitempty"`
	} `json:"about,omitempty"`

	// Action The action results for the company.
	Action *struct {
		// Answer The answer of the action.
		Answer *struct {
			// Explanation The explanation of the answer.
			Explanation *string `json:"explanation,omitempty"`

			// Output The output of the answer.
			Output *map[string]interface{} `json:"output,omitempty"`

			// Score The score of the answer.
			Score *float32 `json:"score,omitempty"`
		} `json:"answer,omitempty"`
	} `json:"action,omitempty"`
	Analytics *struct {
		// Lighthouse Lighthouse and Core Web Vitals analysis.
		Lighthouse *struct {
			// Accessibility The accessibility score (0-100).
			Accessibility *float32 `json:"accessibility,omitempty"`

			// BestPractices The best practices score (0-100).
			BestPractices *float32 `json:"bestPractices,omitempty"`

			// CumulativeLayoutShift The cumulative layout shift.
			CumulativeLayoutShift *struct {
				Count *float32 `json:"count,omitempty"`
				Score *float32 `json:"score,omitempty"`
			} `json:"cumulativeLayoutShift,omitempty"`

			// LargestContentfulPaint The largest contentful paint.
			LargestContentfulPaint *struct {
				Ms    *float32 `json:"ms,omitempty"`
				Score *float32 `json:"score,omitempty"`
			} `json:"largestContentfulPaint,omitempty"`

			// MaxServerLatency The maximum server latency.
			MaxServerLatency *float32 `json:"maxServerLatency,omitempty"`

			// NumFonts The number of fonts.
			NumFonts *float32 `json:"numFonts,omitempty"`

			// NumRequests The number of requests.
			NumRequests *float32 `json:"numRequests,omitempty"`

			// NumScripts The number of scripts.
			NumScripts *float32 `json:"numScripts,omitempty"`

			// NumStylesheets The number of stylesheets.
			NumStylesheets *float32 `json:"numStylesheets,omitempty"`

			// NumTasks The number of tasks.
			NumTasks *float32 `json:"numTasks,omitempty"`

			// Performance The performance score (0-100).
			Performance *float32 `json:"performance,omitempty"`

			// Seo The SEO score (0-100).
			Seo *float32 `json:"seo,omitempty"`

			// TimeToInteractive The time to interactive.
			TimeToInteractive *struct {
				Ms    *float32 `json:"ms,omitempty"`
				Score *float32 `json:"score,omitempty"`
			} `json:"timeToInteractive,omitempty"`

			// TotalBlockingTime The total blocking time.
			TotalBlockingTime *struct {
				Ms    *float32 `json:"ms,omitempty"`
				Score *float32 `json:"score,omitempty"`
			} `json:"totalBlockingTime,omitempty"`
		} `json:"lighthouse,omitempty"`

		// MonthlyVisitors The total number of monthly visitors the company has.
		MonthlyVisitors *CompanyV2AnalyticsMonthlyVisitors `json:"monthlyVisitors,omitempty"`
	} `json:"analytics,omitempty"`

	// Apps The apps the company owns.
	Apps *struct {
		Amazon *[]struct {
			// Id The ID of the app.
			Id *string `json:"id,omitempty"`

			// Name The name of the app.
			Name *string `json:"name,omitempty"`

			// Rating The rating of the app.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the app has.
			Reviews *float32 `json:"reviews,omitempty"`

			// Type The type of app the company owns.
			Type *CompanyV2AppsAmazonType `json:"type,omitempty"`

			// Url The URL to the app.
			Url *string `json:"url,omitempty"`
		} `json:"amazon,omitempty"`
		Android *[]struct {
			// Id The ID of the app.
			Id *string `json:"id,omitempty"`

			// Name The name of the app.
			Name *string `json:"name,omitempty"`

			// Rating The rating of the app.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the app has.
			Reviews *float32 `json:"reviews,omitempty"`

			// Type The type of app the company owns.
			Type *CompanyV2AppsAndroidType `json:"type,omitempty"`

			// Url The URL to the app.
			Url *string `json:"url,omitempty"`
		} `json:"android,omitempty"`
		Chrome *[]struct {
			// Id The ID of the app.
			Id *string `json:"id,omitempty"`

			// Name The name of the app.
			Name *string `json:"name,omitempty"`

			// Rating The rating of the app.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the app has.
			Reviews *float32 `json:"reviews,omitempty"`

			// Type The type of app the company owns.
			Type *CompanyV2AppsChromeType `json:"type,omitempty"`

			// Url The URL to the app.
			Url *string `json:"url,omitempty"`
		} `json:"chrome,omitempty"`
		Ios *[]struct {
			// Id The ID of the app.
			Id *string `json:"id,omitempty"`

			// Name The name of the app.
			Name *string `json:"name,omitempty"`

			// Rating The rating of the app.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the app has.
			Reviews *float32 `json:"reviews,omitempty"`

			// Type The type of app the company owns.
			Type *CompanyV2AppsIosType `json:"type,omitempty"`

			// Url The URL to the app.
			Url *string `json:"url,omitempty"`
		} `json:"ios,omitempty"`
		Mac *[]struct {
			// Id The ID of the app.
			Id *string `json:"id,omitempty"`

			// Name The name of the app.
			Name *string `json:"name,omitempty"`

			// Rating The rating of the app.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the app has.
			Reviews *float32 `json:"reviews,omitempty"`

			// Type The type of app the company owns.
			Type *CompanyV2AppsMacType `json:"type,omitempty"`

			// Url The URL to the app.
			Url *string `json:"url,omitempty"`
		} `json:"mac,omitempty"`
		Meta *[]struct {
			// Id The ID of the app.
			Id *string `json:"id,omitempty"`

			// Name The name of the app.
			Name *string `json:"name,omitempty"`

			// Rating The rating of the app.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the app has.
			Reviews *float32 `json:"reviews,omitempty"`

			// Type The type of app the company owns.
			Type *CompanyV2AppsMetaType `json:"type,omitempty"`

			// Url The URL to the app.
			Url *string `json:"url,omitempty"`
		} `json:"meta,omitempty"`
		Microsoft *[]struct {
			// Id The ID of the app.
			Id *string `json:"id,omitempty"`

			// Name The name of the app.
			Name *string `json:"name,omitempty"`

			// Rating The rating of the app.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the app has.
			Reviews *float32 `json:"reviews,omitempty"`

			// Type The type of app the company owns.
			Type *CompanyV2AppsMicrosoftType `json:"type,omitempty"`

			// Url The URL to the app.
			Url *string `json:"url,omitempty"`
		} `json:"microsoft,omitempty"`
		Playstation *[]struct {
			// Id The ID of the app.
			Id *string `json:"id,omitempty"`

			// Name The name of the app.
			Name *string `json:"name,omitempty"`

			// Rating The rating of the app.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the app has.
			Reviews *float32 `json:"reviews,omitempty"`

			// Type The type of app the company owns.
			Type *CompanyV2AppsPlaystationType `json:"type,omitempty"`

			// Url The URL to the app.
			Url *string `json:"url,omitempty"`
		} `json:"playstation,omitempty"`
		Xbox *[]struct {
			// Id The ID of the app.
			Id *string `json:"id,omitempty"`

			// Name The name of the app.
			Name *string `json:"name,omitempty"`

			// Rating The rating of the app.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the app has.
			Reviews *float32 `json:"reviews,omitempty"`

			// Type The type of app the company owns.
			Type *CompanyV2AppsXboxType `json:"type,omitempty"`

			// Url The URL to the app.
			Url *string `json:"url,omitempty"`
		} `json:"xbox,omitempty"`
	} `json:"apps,omitempty"`
	Assets *struct {
		// ColorPrimary The primary color of the company.
		ColorPrimary *string `json:"colorPrimary,omitempty"`

		// Cover The cover image of the company.
		Cover *struct {
			// Height The height of the image.
			Height *float32 `json:"height,omitempty"`

			// Src The source of the image.
			Src *string `json:"src,omitempty"`

			// Width The width of the image.
			Width *float32 `json:"width,omitempty"`
		} `json:"cover,omitempty"`

		// LogoSquare The square logo of the company.
		LogoSquare *struct {
			// Height The height of the image.
			Height *float32 `json:"height,omitempty"`

			// Src The source of the image.
			Src *string `json:"src,omitempty"`

			// Width The width of the image.
			Width *float32 `json:"width,omitempty"`
		} `json:"logoSquare,omitempty"`
	} `json:"assets,omitempty"`
	Codes *struct {
		// Naics The NAICS codes of the company.
		Naics *[]string `json:"naics,omitempty"`

		// Sic The SIC codes of the company.
		Sic *[]string `json:"sic,omitempty"`
	} `json:"codes,omitempty"`
	Companies *struct {
		// Acquisitions The acquisitions the company has.
		Acquisitions *[]struct {
			// Description The description of the acquisition.
			Description *string `json:"description,omitempty"`

			// Domain The domain of the acquisition.
			Domain *string `json:"domain,omitempty"`

			// Name The name of the acquisition.
			Name *string `json:"name,omitempty"`
		} `json:"acquisitions,omitempty"`

		// Parent The parent company of the company.
		Parent *struct {
			// Description The description of the parent company.
			Description *string `json:"description,omitempty"`

			// Domain The domain of the parent company.
			Domain *string `json:"domain,omitempty"`

			// Name The name of the parent company.
			Name *string `json:"name,omitempty"`
		} `json:"parent,omitempty"`

		// Subsidiaries The subsidiaries the company has.
		Subsidiaries *[]struct {
			// Description The description of the subsidiary.
			Description *string `json:"description,omitempty"`

			// Domain The domain of the subsidiary.
			Domain *string `json:"domain,omitempty"`

			// Name The name of the subsidiary.
			Name *string `json:"name,omitempty"`
		} `json:"subsidiaries,omitempty"`
	} `json:"companies,omitempty"`
	Contacts *struct {
		// Emails The emails the company has.
		Emails *[]struct {
			// Category The category of the contact.
			Category *CompanyV2ContactsEmailsCategory `json:"category,omitempty"`

			// Value The value of the contact.
			Value *string `json:"value,omitempty"`
		} `json:"emails,omitempty"`

		// Lines The lines the company has.
		Lines *[]struct {
			// Category The category of the contact.
			Category *CompanyV2ContactsLinesCategory `json:"category,omitempty"`

			// Value The value of the contact.
			Value *string `json:"value,omitempty"`
		} `json:"lines,omitempty"`

		// Phones The phones the company has.
		Phones *[]struct {
			// Category The category of the contact.
			Category *CompanyV2ContactsPhonesCategory `json:"category,omitempty"`

			// Value The value of the contact.
			Value *string `json:"value,omitempty"`
		} `json:"phones,omitempty"`

		// Whatsapps The WhatsApp contacts the company has.
		Whatsapps *[]struct {
			// Category The category of the contact.
			Category *CompanyV2ContactsWhatsappsCategory `json:"category,omitempty"`

			// Value The value of the contact.
			Value *string `json:"value,omitempty"`
		} `json:"whatsapps,omitempty"`
	} `json:"contacts,omitempty"`
	Contents *struct {
		// Podcasts The podcasts the company has.
		Podcasts *struct {
			// Apple The Apple podcasts the company has.
			Apple *[]struct {
				// Id The ID of the podcast.
				Id *string `json:"id,omitempty"`

				// Name The name of the podcast.
				Name *string `json:"name,omitempty"`

				// Rating The rating of the podcast.
				Rating *float32 `json:"rating,omitempty"`

				// Reviews The number of reviews the podcast has.
				Reviews *float32 `json:"reviews,omitempty"`

				// Url The URL to the podcast.
				Url *string `json:"url,omitempty"`
			} `json:"apple,omitempty"`

			// Spotify The Spotify podcasts the company has.
			Spotify *[]struct {
				// Id The ID of the podcast.
				Id *string `json:"id,omitempty"`

				// Name The name of the podcast.
				Name *string `json:"name,omitempty"`

				// Rating The rating of the podcast.
				Rating *float32 `json:"rating,omitempty"`

				// Reviews The number of reviews the podcast has.
				Reviews *float32 `json:"reviews,omitempty"`

				// Url The URL to the podcast.
				Url *string `json:"url,omitempty"`
			} `json:"spotify,omitempty"`
		} `json:"podcasts,omitempty"`
	} `json:"contents,omitempty"`
	Descriptions *struct {
		// KnowledgeGraph The knowledge graph of the company.
		KnowledgeGraph *string `json:"knowledgeGraph,omitempty"`

		// Linkedin The LinkedIn description of the company.
		Linkedin *string `json:"linkedin,omitempty"`

		// Primary The primary description of the company.
		Primary *string `json:"primary,omitempty"`

		// Tagline The tagline of the company.
		Tagline *string `json:"tagline,omitempty"`

		// Website The website description of the company.
		Website *string `json:"website,omitempty"`

		// Wikipedia The Wikipedia description of the company.
		Wikipedia *string `json:"wikipedia,omitempty"`
	} `json:"descriptions,omitempty"`
	Domain *struct {
		// Alias The alias used by the origin domain.
		Alias *string `json:"alias,omitempty"`

		// CreatedAt The date the domain was created.
		CreatedAt *string `json:"createdAt,omitempty"`
		Domain    string  `json:"domain"`

		// DomainAlts The alternative domains of the company.
		DomainAlts *[]string `json:"domainAlts,omitempty"`

		// DomainName The name of the domain.
		DomainName *string `json:"domainName,omitempty"`

		// ExpiredAt The date the domain expired.
		ExpiredAt *string `json:"expiredAt,omitempty"`

		// Nsfw The NSFW state of the domain.
		Nsfw *bool `json:"nsfw,omitempty"`

		// Redirection The redirection of the domain.
		Redirection *string `json:"redirection,omitempty"`

		// RegistrantCountry The country of the registrant.
		RegistrantCountry *string `json:"registrantCountry,omitempty"`

		// RegistrantPhone The phone of the registrant.
		RegistrantPhone *string `json:"registrantPhone,omitempty"`

		// Registrar The registrar of the domain.
		Registrar *string `json:"registrar,omitempty"`

		// Root The root domain of the company.
		Root *string `json:"root,omitempty"`

		// State The state of the domain.
		State *CompanyV2DomainState `json:"state,omitempty"`

		// Status The status of the domain.
		Status *float32 `json:"status,omitempty"`

		// Tld The TLD of the domain.
		Tld interface{} `json:"tld,omitempty"`

		// UpdatedAt The date the domain was updated.
		UpdatedAt *string `json:"updatedAt,omitempty"`
	} `json:"domain,omitempty"`
	Finances *struct {
		// Revenue The total revenue the company has.
		Revenue *CompanyV2FinancesRevenue `json:"revenue,omitempty"`

		// StockExchange The stock exchange the company has.
		StockExchange *string `json:"stockExchange,omitempty"`

		// StockSymbol The stock symbol the company has.
		StockSymbol *string `json:"stockSymbol,omitempty"`
	} `json:"finances,omitempty"`
	Id        *string `json:"id,omitempty"`
	Locations *struct {
		// Headquarters The headquarters of the company.
		Headquarters *struct {
			// Address The address of the location.
			Address *struct {
				// Geopoint The geopoint of the address.
				Geopoint *struct {
					// Lat The latitude of the geopoint.
					Lat float32 `json:"lat"`

					// Lon The longitude of the geopoint.
					Lon float32 `json:"lon"`
				} `json:"geopoint,omitempty"`

				// Raw The raw complete address.
				Raw *string `json:"raw,omitempty"`
			} `json:"address,omitempty"`

			// City The city of the location.
			City *struct {
				// Code The code of the city.
				Code *string `json:"code,omitempty"`

				// Geopoint The geopoint of the city.
				Geopoint *struct {
					// Lat The latitude of the geopoint.
					Lat float32 `json:"lat"`

					// Lon The longitude of the geopoint.
					Lon float32 `json:"lon"`
				} `json:"geopoint,omitempty"`

				// Name The name of the city.
				Name *string `json:"name,omitempty"`

				// Postcode The postcode of the city.
				Postcode *string `json:"postcode,omitempty"`
			} `json:"city,omitempty"`

			// Continent The continent of the location.
			Continent *struct {
				// Code The code of the continent.
				Code *string `json:"code,omitempty"`

				// Geopoint The geopoint of the continent.
				Geopoint *struct {
					// Lat The latitude of the geopoint.
					Lat float32 `json:"lat"`

					// Lon The longitude of the geopoint.
					Lon float32 `json:"lon"`
				} `json:"geopoint,omitempty"`

				// Name The name of the continent.
				Name *string `json:"name,omitempty"`
			} `json:"continent,omitempty"`

			// Country The country of the location.
			Country *struct {
				// Code The code of the country.
				Code *string `json:"code,omitempty"`

				// Geopoint The geopoint of the country.
				Geopoint *struct {
					// Lat The latitude of the geopoint.
					Lat float32 `json:"lat"`

					// Lon The longitude of the geopoint.
					Lon float32 `json:"lon"`
				} `json:"geopoint,omitempty"`

				// Name The name of the country.
				Name *string `json:"name,omitempty"`
			} `json:"country,omitempty"`

			// County The county of the location.
			County *struct {
				// Code The code of the county.
				Code *string `json:"code,omitempty"`

				// Geopoint The geopoint of the county.
				Geopoint *struct {
					// Lat The latitude of the geopoint.
					Lat float32 `json:"lat"`

					// Lon The longitude of the geopoint.
					Lon float32 `json:"lon"`
				} `json:"geopoint,omitempty"`

				// Name The name of the county.
				Name *string `json:"name,omitempty"`
			} `json:"county,omitempty"`

			// State The state of the location.
			State *struct {
				// Code The code of the state.
				Code *string `json:"code,omitempty"`

				// Geopoint The geopoint of the state.
				Geopoint *struct {
					// Lat The latitude of the geopoint.
					Lat float32 `json:"lat"`

					// Lon The longitude of the geopoint.
					Lon float32 `json:"lon"`
				} `json:"geopoint,omitempty"`

				// Name The name of the state.
				Name *string `json:"name,omitempty"`
			} `json:"state,omitempty"`
		} `json:"headquarters,omitempty"`
	} `json:"locations,omitempty"`
	Meta *struct {
		// Cost The cost of the company (not persisted).
		Cost *float32 `json:"cost,omitempty"`

		// Credits The remaining credits of the team after requesting the company (not persisted).
		Credits *float32 `json:"credits,omitempty"`

		// FreeRequest If the company was requested for free (not persisted).
		FreeRequest *bool `json:"freeRequest,omitempty"`

		// Ideated If the company was ideated.
		Ideated *bool `json:"ideated,omitempty"`

		// ListIds The list ids the company is in.
		ListIds *[]float32 `json:"listIds,omitempty"`

		// MysqlId The MySQL ID of the company.
		MysqlId *float32 `json:"mysqlId,omitempty"`

		// New If the company is new (not persisted).
		New *bool `json:"new,omitempty"`

		// Score The data score of the company, generated from the total amount of data available.
		Score *float32 `json:"score,omitempty"`

		// SimilarAttributes The similar attributes between the companies (not persisted).
		SimilarAttributes *[]struct {
			// Attribute The similar attribute name between the companies.
			Attribute string `json:"attribute"`

			// Value The similar attribute value between the companies.
			Value string `json:"value"`
		} `json:"similarAttributes,omitempty"`

		// Similarity The similarity score between the company and the current query (not persisted).
		Similarity *float32 `json:"similarity,omitempty"`

		// Sources If the company has sources, if so how many sources.
		Sources *float32 `json:"sources,omitempty"`

		// SyncedAt The date the data was last synced.
		SyncedAt *string `json:"syncedAt,omitempty"`
	} `json:"meta,omitempty"`
	People      *map[string]interface{} `json:"people,omitempty"`
	Secondaries *struct {
		// EmailPatterns The email patterns the company has.
		EmailPatterns *[]struct {
			// EmailsCount The number of emails the pattern has.
			EmailsCount *float32 `json:"emailsCount,omitempty"`

			// Pattern The pattern of the email.
			Pattern *string `json:"pattern,omitempty"`

			// UsagePercentage The usage percentage of the pattern.
			UsagePercentage *float32 `json:"usagePercentage,omitempty"`
		} `json:"emailPatterns,omitempty"`
	} `json:"secondaries,omitempty"`

	// Socials The social media pages of the company.
	Socials *struct {
		Discord *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"discord,omitempty"`
		Dribbble *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"dribbble,omitempty"`
		Facebook *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"facebook,omitempty"`
		FacebookGroup *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"facebookGroup,omitempty"`
		Github *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"github,omitempty"`
		Instagram *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"instagram,omitempty"`
		Linkedin *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"linkedin,omitempty"`
		Mastodon *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"mastodon,omitempty"`
		Medium *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"medium,omitempty"`
		Patreon *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"patreon,omitempty"`
		Pinterest *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"pinterest,omitempty"`
		Reddit *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"reddit,omitempty"`
		Slack *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"slack,omitempty"`
		Snapchat *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"snapchat,omitempty"`
		Stackoverflow *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"stackoverflow,omitempty"`
		Steam *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"steam,omitempty"`
		Substack *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"substack,omitempty"`
		Threads *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"threads,omitempty"`
		Tiktok *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"tiktok,omitempty"`
		Tumblr *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"tumblr,omitempty"`
		Twitch *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"twitch,omitempty"`
		Twitter *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"twitter,omitempty"`
		Vimeo *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"vimeo,omitempty"`
		Vkontakte *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"vkontakte,omitempty"`
		Wellfound *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"wellfound,omitempty"`
		Xing *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"xing,omitempty"`
		Yelp *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"yelp,omitempty"`
		Youtube *struct {
			// Followers The number of followers the company has.
			Followers *float32 `json:"followers,omitempty"`

			// Following The number of following the company has.
			Following *float32 `json:"following,omitempty"`

			// Id The ID of the company.
			Id *string `json:"id,omitempty"`

			// IdNumeric The numeric ID of the company.
			IdNumeric *string `json:"idNumeric,omitempty"`

			// Likes The number of likes the company has.
			Likes *float32 `json:"likes,omitempty"`

			// Members The number of members the company has.
			Members *float32 `json:"members,omitempty"`

			// MonthlyViews The number of monthly views the company has.
			MonthlyViews *float32 `json:"monthlyViews,omitempty"`

			// Posts The number of posts the company has.
			Posts *float32 `json:"posts,omitempty"`

			// Rating The rating of the company.
			Rating *float32 `json:"rating,omitempty"`

			// Reviews The number of reviews the company has.
			Reviews *float32 `json:"reviews,omitempty"`

			// TalkingAbout The number of people talking about the company.
			TalkingAbout *float32 `json:"talkingAbout,omitempty"`

			// Url The URL to the social media page of the company.
			Url string `json:"url"`

			// Videos The number of videos the company has.
			Videos *float32 `json:"videos,omitempty"`

			// WereHere The number of people who were here.
			WereHere *float32 `json:"wereHere,omitempty"`
		} `json:"youtube,omitempty"`
	} `json:"socials,omitempty"`
	Technologies *struct {
		// Active The active company technologies.
		Active []string `json:"active"`

		// Categories The categories the company technologies are in.
		Categories []string `json:"categories"`

		// Details The details of the company technologies.
		Details []struct {
			// Categories The categories of the technology.
			Categories *[]string `json:"categories,omitempty"`

			// DetectedAt The date the technology was detected.
			DetectedAt string `json:"detectedAt"`

			// DetectionTypes The detection types the technology has.
			DetectionTypes []CompanyV2TechnologiesDetailsDetectionTypes `json:"detectionTypes"`

			// Slug The slug of the technology.
			Slug string `json:"slug"`

			// Version The version of the technology.
			Version *string `json:"version,omitempty"`
		} `json:"details"`
	} `json:"technologies,omitempty"`
	Urls *struct {
		// About The URL to the about page of the company.
		About *string `json:"about,omitempty"`

		// Blog The URL to the blog of the company.
		Blog *string `json:"blog,omitempty"`

		// Careers The URL to the careers page of the company.
		Careers *string `json:"careers,omitempty"`

		// Contact The URL to the contact page of the company.
		Contact *string `json:"contact,omitempty"`

		// Crunchbase The URL to the Crunchbase page of the company.
		Crunchbase *string `json:"crunchbase,omitempty"`

		// Developers The URL to the developers page of the company.
		Developers *string `json:"developers,omitempty"`

		// Docs The URL to the docs of the company.
		Docs *string `json:"docs,omitempty"`

		// Events The URL to the events of the company.
		Events *string `json:"events,omitempty"`

		// Glassdoor The URL to the Glassdoor page of the company.
		Glassdoor *string `json:"glassdoor,omitempty"`

		// Partnership The URL to the partnership page of the company.
		Partnership *string `json:"partnership,omitempty"`

		// Pricing The URL to the pricing page of the company.
		Pricing *string `json:"pricing,omitempty"`

		// Privacy The URL to the privacy policy of the company.
		Privacy *string `json:"privacy,omitempty"`

		// Registrar The URL to the registrar of the domain.
		Registrar *string `json:"registrar,omitempty"`

		// SalesNavigator The URL to the Sales Navigator page of the company.
		SalesNavigator *string `json:"salesNavigator,omitempty"`

		// Sitemap The URL to the sitemap of the company.
		Sitemap *string `json:"sitemap,omitempty"`

		// Status The URL to the status page of the company.
		Status *string `json:"status,omitempty"`

		// Terms The URL to the terms of service of the company.
		Terms *string `json:"terms,omitempty"`

		// Updates The URL to the updates of the company.
		Updates *string `json:"updates,omitempty"`

		// Website The URL to the website of the company.
		Website *string `json:"website,omitempty"`

		// Wellfound The URL to the Wellfound page of the company.
		Wellfound *string `json:"wellfound,omitempty"`

		// Wikidata The URL to the Wikidata page of the company.
		Wikidata *string `json:"wikidata,omitempty"`

		// Wikipedia The URL to the Wikipedia page of the company.
		Wikipedia *string `json:"wikipedia,omitempty"`
	} `json:"urls,omitempty"`
	Vectors *struct {
		// Global The global computed vector.
		Global *[]float32 `json:"global,omitempty"`
	} `json:"vectors,omitempty"`
}

// CompanyV2AboutBusinessType The type of business the company is.
type CompanyV2AboutBusinessType string

// CompanyV2AboutTotalEmployees The total number of employees the company has.
type CompanyV2AboutTotalEmployees string

// CompanyV2AnalyticsMonthlyVisitors The total number of monthly visitors the company has.
type CompanyV2AnalyticsMonthlyVisitors string

// CompanyV2AppsAmazonType The type of app the company owns.
type CompanyV2AppsAmazonType string

// CompanyV2AppsAndroidType The type of app the company owns.
type CompanyV2AppsAndroidType string

// CompanyV2AppsChromeType The type of app the company owns.
type CompanyV2AppsChromeType string

// CompanyV2AppsIosType The type of app the company owns.
type CompanyV2AppsIosType string

// CompanyV2AppsMacType The type of app the company owns.
type CompanyV2AppsMacType string

// CompanyV2AppsMetaType The type of app the company owns.
type CompanyV2AppsMetaType string

// CompanyV2AppsMicrosoftType The type of app the company owns.
type CompanyV2AppsMicrosoftType string

// CompanyV2AppsPlaystationType The type of app the company owns.
type CompanyV2AppsPlaystationType string

// CompanyV2AppsXboxType The type of app the company owns.
type CompanyV2AppsXboxType string

// CompanyV2ContactsEmailsCategory The category of the contact.
type CompanyV2ContactsEmailsCategory string

// CompanyV2ContactsLinesCategory The category of the contact.
type CompanyV2ContactsLinesCategory string

// CompanyV2ContactsPhonesCategory The category of the contact.
type CompanyV2ContactsPhonesCategory string

// CompanyV2ContactsWhatsappsCategory The category of the contact.
type CompanyV2ContactsWhatsappsCategory string

// CompanyV2DomainState The state of the domain.
type CompanyV2DomainState string

// CompanyV2FinancesRevenue The total revenue the company has.
type CompanyV2FinancesRevenue string

// CompanyV2TechnologiesDetailsDetectionTypes The type of detection the company technology has.
type CompanyV2TechnologiesDetailsDetectionTypes string

// EmailPattern An email pattern and its related informations.
type EmailPattern struct {
	EmailsCount     *float32 `json:"emailsCount"`
	Id              float32  `json:"id"`
	Pattern         string   `json:"pattern"`
	UsagePercentage *float32 `json:"usagePercentage"`
}

// JobTitle A job title and its related informations.
type JobTitle struct {
	Department              *string  `json:"department"`
	DepartmentSecondary     *string  `json:"departmentSecondary"`
	Id                      *float32 `json:"id,omitempty"`
	LinkedinCount           *float32 `json:"linkedinCount"`
	Name                    string   `json:"name"`
	NameEs                  *string  `json:"nameEs"`
	NameFr                  *string  `json:"nameFr"`
	SeniorityLevel          *string  `json:"seniorityLevel"`
	SeniorityLevelSecondary *string  `json:"seniorityLevelSecondary"`
	UsageCount              *float32 `json:"usageCount"`
}

// LLMAnswer An answer from a query made to the LLM.
type LLMAnswer struct {
	CompanyId   float32 `json:"companyId"`
	Explanation *string `json:"explanation,omitempty"`
	Fields      *[]struct {
		Description *string             `json:"description,omitempty"`
		Key         string              `json:"key"`
		Type        LLMAnswerFieldsType `json:"type"`
		Values      *[]string           `json:"values,omitempty"`
	} `json:"fields,omitempty"`
	Grounded *bool                  `json:"grounded,omitempty"`
	Output   map[string]interface{} `json:"output"`
	Question string                 `json:"question"`
	Score    float32                `json:"score"`
}

// LLMAnswerFieldsType defines model for LLMAnswer.Fields.Type.
type LLMAnswerFieldsType string

// List A collection of companies saved or imported by a team.
type List struct {
	// Analytics Analytics collection of a list.
	Analytics          *ListAnalytics                  `json:"analytics,omitempty"`
	CompanyListId      *float32                        `json:"companyListId"`
	CreatedAt          *string                         `json:"createdAt"`
	Dynamic            *bool                           `json:"dynamic"`
	Exporting          bool                            `json:"exporting"`
	ExportingAt        *string                         `json:"exportingAt"`
	Id                 float32                         `json:"id"`
	Imported           bool                            `json:"imported"`
	MailFrequencies    *map[string]ListMailFrequencies `json:"mailFrequencies"`
	MaxCompanies       *float32                        `json:"maxCompanies"`
	Name               string                          `json:"name"`
	ProcessActive      bool                            `json:"processActive"`
	ProcessDisabled    *bool                           `json:"processDisabled"`
	ProcessInitialized bool                            `json:"processInitialized"`
	ProcessMessage     *string                         `json:"processMessage"`
	ProcessingAt       *string                         `json:"processingAt"`
	Query              *[]SegmentationCondition        `json:"query,omitempty"`
	QuerySimilar       []string                        `json:"querySimilar"`
	TeamId             *string                         `json:"teamId"`
	UnseenActions      *[]Action                       `json:"unseenActions,omitempty"`
	UserId             *float32                        `json:"userId"`
	Vectors            *[][]float32                    `json:"vectors,omitempty"`
}

// ListMailFrequencies defines model for List.MailFrequencies.
type ListMailFrequencies string

// ListAnalytics Analytics collection of a list.
type ListAnalytics struct {
	CompaniesCount *float32 `json:"companiesCount"`
	Id             *float32 `json:"id,omitempty"`
	ListId         *float32 `json:"listId"`
}

// NominatimCity A city from the Nominatim API.
type NominatimCity struct {
	Code               string   `json:"code"`
	CompaniesCount     *float32 `json:"companiesCount"`
	Id                 float32  `json:"id"`
	Latitude           *string  `json:"latitude"`
	LinkedinHeadline   *string  `json:"linkedinHeadline"`
	LinkedinId         *string  `json:"linkedinId"`
	LinkedinQuery      *string  `json:"linkedinQuery"`
	Longitude          *string  `json:"longitude"`
	Name               string   `json:"name"`
	NominatimCountryId *float32 `json:"nominatimCountryId"`
	NominatimCountyId  *float32 `json:"nominatimCountyId"`
	NominatimStateId   *float32 `json:"nominatimStateId"`
	Postcode           *string  `json:"postcode"`
	UsageCount         *float32 `json:"usageCount"`
}

// NominatimContinent A continent from the Nominatim API.
type NominatimContinent struct {
	CitiesCount      *float32               `json:"citiesCount"`
	Code             NominatimContinentCode `json:"code"`
	CompaniesCount   *float32               `json:"companiesCount"`
	CountiesCount    *float32               `json:"countiesCount"`
	CountriesCount   *float32               `json:"countriesCount"`
	Icon             *string                `json:"icon"`
	Id               float32                `json:"id"`
	Latitude         *string                `json:"latitude"`
	LinkedinHeadline *string                `json:"linkedinHeadline"`
	LinkedinId       *string                `json:"linkedinId"`
	Longitude        *string                `json:"longitude"`
	Name             string                 `json:"name"`
	NameEs           string                 `json:"nameEs"`
	NameFr           string                 `json:"nameFr"`
	StatesCount      *float32               `json:"statesCount"`
	UsageCount       *float32               `json:"usageCount"`
}

// NominatimContinentCode defines model for NominatimContinent.Code.
type NominatimContinentCode string

// NominatimCountry A country from the Nominatim API.
type NominatimCountry struct {
	CitiesCount      *float32                       `json:"citiesCount"`
	Code             string                         `json:"code"`
	CompaniesCount   *float32                       `json:"companiesCount"`
	Continent        *NominatimCountryContinent     `json:"continent"`
	ContinentCode    *NominatimCountryContinentCode `json:"continentCode"`
	CountiesCount    *float32                       `json:"countiesCount"`
	Id               float32                        `json:"id"`
	Latitude         *string                        `json:"latitude"`
	LinkedinHeadline *string                        `json:"linkedinHeadline"`
	LinkedinId       *string                        `json:"linkedinId"`
	Longitude        *string                        `json:"longitude"`
	Name             string                         `json:"name"`
	NameEs           string                         `json:"nameEs"`
	NameFr           string                         `json:"nameFr"`
	NameNative       string                         `json:"nameNative"`
	Population       *float32                       `json:"population"`
	StatesCount      *float32                       `json:"statesCount"`
	UsageCount       *float32                       `json:"usageCount"`
}

// NominatimCountryContinent defines model for NominatimCountry.Continent.
type NominatimCountryContinent string

// NominatimCountryContinentCode defines model for NominatimCountry.ContinentCode.
type NominatimCountryContinentCode string

// NominatimCounty A county from the Nominatim API.
type NominatimCounty struct {
	CitiesCount        *float32 `json:"citiesCount"`
	Code               string   `json:"code"`
	CompaniesCount     *float32 `json:"companiesCount"`
	Id                 float32  `json:"id"`
	Latitude           *string  `json:"latitude"`
	LinkedinHeadline   *string  `json:"linkedinHeadline"`
	LinkedinId         *string  `json:"linkedinId"`
	LinkedinQuery      *string  `json:"linkedinQuery"`
	Longitude          *string  `json:"longitude"`
	Name               string   `json:"name"`
	NominatimCountryId *float32 `json:"nominatimCountryId"`
	NominatimStateId   *float32 `json:"nominatimStateId"`
	UsageCount         *float32 `json:"usageCount"`
}

// NominatimState A state from the Nominatim API.
type NominatimState struct {
	CitiesCount        *float32 `json:"citiesCount"`
	Code               string   `json:"code"`
	CompaniesCount     *float32 `json:"companiesCount"`
	CountiesCount      *float32 `json:"countiesCount"`
	Id                 float32  `json:"id"`
	Latitude           *string  `json:"latitude"`
	LinkedinHeadline   *string  `json:"linkedinHeadline"`
	LinkedinId         *string  `json:"linkedinId"`
	LinkedinQuery      *string  `json:"linkedinQuery"`
	Longitude          *string  `json:"longitude"`
	Name               string   `json:"name"`
	NominatimCountryId *float32 `json:"nominatimCountryId"`
	UsageCount         *float32 `json:"usageCount"`
}

// PageContentsIdeated A collection of categorized facts about a company aggregated from multiple sources.
type PageContentsIdeated struct {
	About        *[]string `json:"about,omitempty"`
	Acquired     *[]string `json:"acquired,omitempty"`
	Broken       *bool     `json:"broken,omitempty"`
	Closed       *bool     `json:"closed,omitempty"`
	Contacts     *[]string `json:"contacts,omitempty"`
	Customers    *[]string `json:"customers,omitempty"`
	Domain       *string   `json:"domain,omitempty"`
	Features     *[]string `json:"features,omitempty"`
	Finances     *[]string `json:"finances,omitempty"`
	ForSale      *bool     `json:"forSale,omitempty"`
	Industries   *[]string `json:"industries,omitempty"`
	Jobs         *[]string `json:"jobs,omitempty"`
	Locations    *[]string `json:"locations,omitempty"`
	Nsfw         *bool     `json:"nsfw,omitempty"`
	Others       *[]string `json:"others,omitempty"`
	Pricing      *[]string `json:"pricing,omitempty"`
	Related      *[]string `json:"related,omitempty"`
	Resources    *[]string `json:"resources,omitempty"`
	Security     *[]string `json:"security,omitempty"`
	Social       *[]string `json:"social,omitempty"`
	Solutions    *[]string `json:"solutions,omitempty"`
	Sources      *[]string `json:"sources,omitempty"`
	Support      *[]string `json:"support,omitempty"`
	Team         *[]string `json:"team,omitempty"`
	Technologies *[]string `json:"technologies,omitempty"`
	Tokens       *float32  `json:"tokens,omitempty"`
	UpdatedAt    *string   `json:"updatedAt,omitempty"`
	Updates      *[]string `json:"updates,omitempty"`
}

// PageContentsLink A link found in a page content.
type PageContentsLink struct {
	Text *string `json:"text,omitempty"`
	Url  string  `json:"url"`
}

// PageContentsPage A page content saved as a source for a company context.
type PageContentsPage struct {
	Content     *string             `json:"content,omitempty"`
	Description *string             `json:"description,omitempty"`
	Externals   *[]PageContentsLink `json:"externals,omitempty"`
	Html        *string             `json:"html,omitempty"`
	Navigation  *[]PageContentsLink `json:"navigation,omitempty"`
	Title       *string             `json:"title,omitempty"`
	Url         string              `json:"url"`
	VisitedAt   *string             `json:"visitedAt,omitempty"`
}

// PaginationMeta Metadata about a paginated or billed response.
type PaginationMeta struct {
	Cost                    float32 `json:"cost"`
	Credits                 float32 `json:"credits"`
	CurrentPage             float32 `json:"currentPage"`
	FirstPage               float32 `json:"firstPage"`
	FreeRequest             bool    `json:"freeRequest"`
	LastPage                float32 `json:"lastPage"`
	MaxScrollResultsReached *bool   `json:"maxScrollResultsReached,omitempty"`
	PerPage                 float32 `json:"perPage"`
	Total                   float32 `json:"total"`
}

// Prompt A natural language request made to the platform resolving to a specific action or search segment.
type Prompt struct {
	CompanyId *float32      `json:"companyId,omitempty"`
	Context   PromptContext `json:"context"`
	CreatedAt *string       `json:"createdAt,omitempty"`
	Data      *struct {
		All     *bool     `json:"all,omitempty"`
		Count   *float32  `json:"count,omitempty"`
		Domains *[]string `json:"domains,omitempty"`
		Explain *bool     `json:"explain,omitempty"`
		Fields  *[]struct {
			Description *string              `json:"description,omitempty"`
			Key         string               `json:"key"`
			Type        PromptDataFieldsType `json:"type"`
			Values      *[]string            `json:"values,omitempty"`
		} `json:"fields,omitempty"`
		Model        *PromptDataModel         `json:"model,omitempty"`
		Names        *[]string                `json:"names,omitempty"`
		Query        *[]SegmentationCondition `json:"query,omitempty"`
		Question     *string                  `json:"question,omitempty"`
		Segmentation *bool                    `json:"segmentation,omitempty"`
	} `json:"data,omitempty"`
	Feature   *PromptFeature   `json:"feature,omitempty"`
	Hits      *float32         `json:"hits,omitempty"`
	Id        float32          `json:"id"`
	Model     *PromptModel     `json:"model,omitempty"`
	Prompt    string           `json:"prompt"`
	PromptKey string           `json:"promptKey"`
	Response  *Prompt_Response `json:"response,omitempty"`
	UpdatedAt *string          `json:"updatedAt,omitempty"`
}

// PromptContext defines model for Prompt.Context.
type PromptContext string

// PromptDataFieldsType defines model for Prompt.Data.Fields.Type.
type PromptDataFieldsType string

// PromptDataModel defines model for Prompt.Data.Model.
type PromptDataModel string

// PromptFeature defines model for Prompt.Feature.
type PromptFeature string

// PromptModel defines model for Prompt.Model.
type PromptModel string

// PromptResponse0 defines model for .
type PromptResponse0 struct {
	Action *struct {
		Cost *float32 `json:"cost,omitempty"`
		Data *struct {
			// Answer An answer from a query made to the LLM.
			Answer  LLMAnswer `json:"answer"`
			Domains *[]string `json:"domains,omitempty"`
			Fields  []struct {
				Description *string                             `json:"description,omitempty"`
				Key         string                              `json:"key"`
				Type        PromptResponse0ActionDataFieldsType `json:"type"`
				Values      *[]string                           `json:"values,omitempty"`
			} `json:"fields"`
			Job      PromptResponse0ActionDataJob `json:"job"`
			Query    *[]SegmentationCondition     `json:"query,omitempty"`
			Question string                       `json:"question"`
		} `json:"data,omitempty"`
		ListId   *float32                    `json:"listId,omitempty"`
		PromptId float32                     `json:"promptId"`
		Status   PromptResponse0ActionStatus `json:"status"`
		Type     PromptResponse0ActionType   `json:"type"`
	} `json:"action,omitempty"`
	All    *bool `json:"all,omitempty"`
	Answer *struct {
		Explanation *string                `json:"explanation,omitempty"`
		Output      map[string]interface{} `json:"output"`
		Score       float32                `json:"score"`
	} `json:"answer,omitempty"`
	Cost   *float32 `json:"cost,omitempty"`
	Count  *float32 `json:"count,omitempty"`
	Domain *string  `json:"domain,omitempty"`
	Error  *string  `json:"error,omitempty"`
}

// PromptResponse0ActionDataFieldsType defines model for Prompt.Response.0.Action.Data.Fields.Type.
type PromptResponse0ActionDataFieldsType string

// PromptResponse0ActionDataJob defines model for Prompt.Response.0.Action.Data.Job.
type PromptResponse0ActionDataJob string

// PromptResponse0ActionStatus defines model for Prompt.Response.0.Action.Status.
type PromptResponse0ActionStatus string

// PromptResponse0ActionType defines model for Prompt.Response.0.Action.Type.
type PromptResponse0ActionType string

// PromptResponse1 defines model for .
type PromptResponse1 struct {
	Action *struct {
		Cost *PromptResponse1ActionCost `json:"cost,omitempty"`
		Data *struct {
			Domains *[]string                    `json:"domains,omitempty"`
			Job     PromptResponse1ActionDataJob `json:"job"`
			Query   *[]SegmentationCondition     `json:"query,omitempty"`
		} `json:"data,omitempty"`
		ListId   *float32                    `json:"listId,omitempty"`
		PromptId float32                     `json:"promptId"`
		Status   PromptResponse1ActionStatus `json:"status"`
		Type     PromptResponse1ActionType   `json:"type"`
	} `json:"action,omitempty"`
	All    *bool    `json:"all,omitempty"`
	Cost   *float32 `json:"cost,omitempty"`
	Count  *float32 `json:"count,omitempty"`
	Domain *string  `json:"domain,omitempty"`
	Error  *string  `json:"error,omitempty"`
}

// PromptResponse1ActionCost defines model for Prompt.Response.1.Action.Cost.
type PromptResponse1ActionCost float32

// PromptResponse1ActionDataJob defines model for Prompt.Response.1.Action.Data.Job.
type PromptResponse1ActionDataJob string

// PromptResponse1ActionStatus defines model for Prompt.Response.1.Action.Status.
type PromptResponse1ActionStatus string

// PromptResponse1ActionType defines model for Prompt.Response.1.Action.Type.
type PromptResponse1ActionType string

// PromptResponse2 defines model for .
type PromptResponse2 struct {
	Action *struct {
		Cost *float32 `json:"cost,omitempty"`
		Data struct {
			Domains *[]string                    `json:"domains,omitempty"`
			Job     PromptResponse2ActionDataJob `json:"job"`
			Query   *[]SegmentationCondition     `json:"query,omitempty"`
		} `json:"data"`
		ListId   *float32                    `json:"listId,omitempty"`
		PromptId float32                     `json:"promptId"`
		Status   PromptResponse2ActionStatus `json:"status"`
		Type     PromptResponse2ActionType   `json:"type"`
	} `json:"action,omitempty"`
	All    *bool    `json:"all,omitempty"`
	Cost   *float32 `json:"cost,omitempty"`
	Count  *float32 `json:"count,omitempty"`
	Domain *string  `json:"domain,omitempty"`
	Error  *string  `json:"error,omitempty"`
}

// PromptResponse2ActionDataJob defines model for Prompt.Response.2.Action.Data.Job.
type PromptResponse2ActionDataJob string

// PromptResponse2ActionStatus defines model for Prompt.Response.2.Action.Status.
type PromptResponse2ActionStatus string

// PromptResponse2ActionType defines model for Prompt.Response.2.Action.Type.
type PromptResponse2ActionType string

// PromptResponse3 defines model for .
type PromptResponse3 struct {
	All     *bool                    `json:"all,omitempty"`
	Cost    *float32                 `json:"cost,omitempty"`
	Count   *float32                 `json:"count,omitempty"`
	Domain  *string                  `json:"domain,omitempty"`
	Domains *[]string                `json:"domains,omitempty"`
	Error   *string                  `json:"error,omitempty"`
	ListId  *float32                 `json:"listId,omitempty"`
	Query   *[]SegmentationCondition `json:"query,omitempty"`
}

// PromptResponse4 defines model for .
type PromptResponse4 struct {
	All     *bool     `json:"all,omitempty"`
	Cost    *float32  `json:"cost,omitempty"`
	Count   *float32  `json:"count,omitempty"`
	Domain  *string   `json:"domain,omitempty"`
	Domains *[]string `json:"domains,omitempty"`
	Error   *string   `json:"error,omitempty"`
}

// Prompt_Response defines model for Prompt.Response.
type Prompt_Response struct {
	union json.RawMessage
}

// SegmentationCondition A condition for our platform segmentation engine.
type SegmentationCondition struct {
	Attribute       SegmentationConditionAttribute      `json:"attribute"`
	BlockedOperator *bool                               `json:"blockedOperator,omitempty"`
	Operator        SegmentationConditionOperator       `json:"operator"`
	Sign            SegmentationConditionSign           `json:"sign"`
	Values          []SegmentationCondition_Values_Item `json:"values"`
}

// SegmentationConditionAttribute defines model for SegmentationCondition.Attribute.
type SegmentationConditionAttribute string

// SegmentationConditionOperator defines model for SegmentationCondition.Operator.
type SegmentationConditionOperator string

// SegmentationConditionSign defines model for SegmentationCondition.Sign.
type SegmentationConditionSign string

// SegmentationConditionValues0 defines model for .
type SegmentationConditionValues0 = string

// SegmentationConditionValues1 defines model for .
type SegmentationConditionValues1 = float32

// SegmentationCondition_Values_Item defines model for SegmentationCondition.values.Item.
type SegmentationCondition_Values_Item struct {
	union json.RawMessage
}

// Team A collection of users that can access the same resources.
type Team struct {
	Admin                    *bool   `json:"admin"`
	Country                  *string `json:"country"`
	CreatedAt                *string `json:"createdAt"`
	Credits                  float32 `json:"credits"`
	CreditsPack              float32 `json:"creditsPack"`
	Id                       float32 `json:"id"`
	Name                     *string `json:"name"`
	Role                     *string `json:"role"`
	StripeCustomerId         *string `json:"stripeCustomerId"`
	StripeProductId          *string `json:"stripeProductId"`
	StripeSubscribed         bool    `json:"stripeSubscribed"`
	StripeSubscriptionId     *string `json:"stripeSubscriptionId"`
	StripeSubscriptionStatus *string `json:"stripeSubscriptionStatus"`
	WebsiteUrl               *string `json:"websiteUrl"`
}

// Technology A technology description from our platform.
type Technology struct {
	Categories     *[]string `json:"categories"`
	CompaniesCount *float32  `json:"companiesCount"`
	CreatedAt      *string   `json:"createdAt"`
	Editor         string    `json:"editor"`
	Free           *bool     `json:"free"`
	Id             float32   `json:"id"`
	Name           string    `json:"name"`
	NameSynonyms   *[]string `json:"nameSynonyms"`
	Paid           *bool     `json:"paid"`
	Slug           string    `json:"slug"`
	UpdatedAt      *string   `json:"updatedAt"`
	UsageCount     *float32  `json:"usageCount"`
	WebsiteUrl     *string   `json:"websiteUrl"`
}

// User A user of the platform.
type User struct {
	ColorMode             *UserColorMode `json:"colorMode,omitempty"`
	CreatedAt             *string        `json:"createdAt"`
	CurrentTeamId         *float32       `json:"currentTeamId"`
	Email                 string         `json:"email"`
	EmailFree             *bool          `json:"emailFree"`
	EmailVerified         *bool          `json:"emailVerified"`
	EmailVerifiedResentAt *string        `json:"emailVerifiedResentAt"`
	FullName              *string        `json:"fullName"`
	HasPassword           *bool          `json:"hasPassword"`
	Id                    float32        `json:"id"`
	Locale                interface{}    `json:"locale,omitempty"`
	PictureUrl            *string        `json:"pictureUrl"`
	Referral              *string        `json:"referral"`
	Role                  *UserRole      `json:"role"`
}

// UserColorMode defines model for User.ColorMode.
type UserColorMode string

// UserRole defines model for User.Role.
type UserRole string

// FetchActionsParams defines parameters for FetchActions.
type FetchActionsParams struct {
	Full   *bool                     `form:"full,omitempty" json:"full,omitempty"`
	Ids    *[]float32                `form:"ids,omitempty" json:"ids,omitempty"`
	ListId *float32                  `form:"listId,omitempty" json:"listId,omitempty"`
	Page   *float32                  `form:"page,omitempty" json:"page,omitempty"`
	Search *string                   `form:"search,omitempty" json:"search,omitempty"`
	Size   *float32                  `form:"size,omitempty" json:"size,omitempty"`
	Status *FetchActionsParamsStatus `form:"status,omitempty" json:"status,omitempty"`
	TeamId *float32                  `form:"teamId,omitempty" json:"teamId,omitempty"`
	Type   *FetchActionsParamsType   `form:"type,omitempty" json:"type,omitempty"`
}

// FetchActionsParamsStatus defines parameters for FetchActions.
type FetchActionsParamsStatus string

// FetchActionsParamsType defines parameters for FetchActions.
type FetchActionsParamsType string

// RequestActionJSONBody defines parameters for RequestAction.
type RequestActionJSONBody struct {
	Domains  *[]string `json:"domains,omitempty"`
	Estimate *bool     `json:"estimate,omitempty"`
	Fields   *[]struct {
		Description *string                         `json:"description,omitempty"`
		Key         string                          `json:"key"`
		Type        RequestActionJSONBodyFieldsType `json:"type"`
		Values      *[]string                       `json:"values,omitempty"`
	} `json:"fields,omitempty"`
	Job      *RequestActionJSONBodyJob `json:"job,omitempty"`
	ListId   *float32                  `json:"listId,omitempty"`
	Names    *[]string                 `json:"names,omitempty"`
	PromptId *float32                  `json:"promptId,omitempty"`
	Query    *[]SegmentationCondition  `json:"query,omitempty"`
	Question *string                   `json:"question,omitempty"`
	Type     RequestActionJSONBodyType `json:"type"`
}

// RequestActionJSONBodyFieldsType defines parameters for RequestAction.
type RequestActionJSONBodyFieldsType string

// RequestActionJSONBodyJob defines parameters for RequestAction.
type RequestActionJSONBodyJob string

// RequestActionJSONBodyType defines parameters for RequestAction.
type RequestActionJSONBodyType string

// RetryActionJSONBody defines parameters for RetryAction.
type RetryActionJSONBody = map[string]interface{}

// SearchCompaniesParams defines parameters for SearchCompanies.
type SearchCompaniesParams struct {
	ActionId          *float32                             `form:"actionId,omitempty" json:"actionId,omitempty"`
	DomainsToExclude  *string                              `form:"domainsToExclude,omitempty" json:"domainsToExclude,omitempty"`
	LinkedinToExclude *string                              `form:"linkedinToExclude,omitempty" json:"linkedinToExclude,omitempty"`
	Page              *float32                             `form:"page,omitempty" json:"page,omitempty"`
	Query             *[]SegmentationCondition             `form:"query,omitempty" json:"query,omitempty"`
	Search            *string                              `form:"search,omitempty" json:"search,omitempty"`
	SearchFields      *[]SearchCompaniesParamsSearchFields `form:"searchFields,omitempty" json:"searchFields,omitempty"`
	Simplified        *bool                                `form:"simplified,omitempty" json:"simplified,omitempty"`
	Size              *float32                             `form:"size,omitempty" json:"size,omitempty"`
	SortFields        *[]struct {
		Key     SearchCompaniesParamsSortFieldsKey      `json:"key"`
		Missing *SearchCompaniesParamsSortFieldsMissing `json:"missing,omitempty"`
		Order   SearchCompaniesParamsSortFieldsOrder    `json:"order"`
	} `form:"sortFields,omitempty" json:"sortFields,omitempty"`
	SortKey   *SearchCompaniesParamsSortKey   `form:"sortKey,omitempty" json:"sortKey,omitempty"`
	SortOrder *SearchCompaniesParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
}

// SearchCompaniesParamsSearchFields defines parameters for SearchCompanies.
type SearchCompaniesParamsSearchFields string

// SearchCompaniesParamsSortFieldsKey defines parameters for SearchCompanies.
type SearchCompaniesParamsSortFieldsKey string

// SearchCompaniesParamsSortFieldsMissing defines parameters for SearchCompanies.
type SearchCompaniesParamsSortFieldsMissing string

// SearchCompaniesParamsSortFieldsOrder defines parameters for SearchCompanies.
type SearchCompaniesParamsSortFieldsOrder string

// SearchCompaniesParamsSortKey defines parameters for SearchCompanies.
type SearchCompaniesParamsSortKey string

// SearchCompaniesParamsSortOrder defines parameters for SearchCompanies.
type SearchCompaniesParamsSortOrder string

// SearchCompaniesPostJSONBody defines parameters for SearchCompaniesPost.
type SearchCompaniesPostJSONBody struct {
	ActionId          *float32                                   `json:"actionId,omitempty"`
	DomainsToExclude  *string                                    `json:"domainsToExclude,omitempty"`
	LinkedinToExclude *string                                    `json:"linkedinToExclude,omitempty"`
	Page              *float32                                   `json:"page,omitempty"`
	Query             *[]SegmentationCondition                   `json:"query,omitempty"`
	Search            *string                                    `json:"search,omitempty"`
	SearchFields      *[]SearchCompaniesPostJSONBodySearchFields `json:"searchFields,omitempty"`
	Simplified        *bool                                      `json:"simplified,omitempty"`
	Size              *float32                                   `json:"size,omitempty"`
	SortFields        *[]struct {
		Key     SearchCompaniesPostJSONBodySortFieldsKey      `json:"key"`
		Missing *SearchCompaniesPostJSONBodySortFieldsMissing `json:"missing,omitempty"`
		Order   SearchCompaniesPostJSONBodySortFieldsOrder    `json:"order"`
	} `json:"sortFields,omitempty"`
	SortKey   *SearchCompaniesPostJSONBodySortKey   `json:"sortKey,omitempty"`
	SortOrder *SearchCompaniesPostJSONBodySortOrder `json:"sortOrder,omitempty"`
}

// SearchCompaniesPostJSONBodySearchFields defines parameters for SearchCompaniesPost.
type SearchCompaniesPostJSONBodySearchFields string

// SearchCompaniesPostJSONBodySortFieldsKey defines parameters for SearchCompaniesPost.
type SearchCompaniesPostJSONBodySortFieldsKey string

// SearchCompaniesPostJSONBodySortFieldsMissing defines parameters for SearchCompaniesPost.
type SearchCompaniesPostJSONBodySortFieldsMissing string

// SearchCompaniesPostJSONBodySortFieldsOrder defines parameters for SearchCompaniesPost.
type SearchCompaniesPostJSONBodySortFieldsOrder string

// SearchCompaniesPostJSONBodySortKey defines parameters for SearchCompaniesPost.
type SearchCompaniesPostJSONBodySortKey string

// SearchCompaniesPostJSONBodySortOrder defines parameters for SearchCompaniesPost.
type SearchCompaniesPostJSONBodySortOrder string

// FetchCompaniesAnalyticsParams defines parameters for FetchCompaniesAnalytics.
type FetchCompaniesAnalyticsParams struct {
	ActionId  *float32                               `form:"actionId,omitempty" json:"actionId,omitempty"`
	Attribute FetchCompaniesAnalyticsParamsAttribute `form:"attribute" json:"attribute"`
	ListId    *float32                               `form:"listId,omitempty" json:"listId,omitempty"`
	Query     *[]SegmentationCondition               `form:"query,omitempty" json:"query,omitempty"`
	Size      *float32                               `form:"size,omitempty" json:"size,omitempty"`
	Sort      *FetchCompaniesAnalyticsParamsSort     `form:"sort,omitempty" json:"sort,omitempty"`
}

// FetchCompaniesAnalyticsParamsAttribute defines parameters for FetchCompaniesAnalytics.
type FetchCompaniesAnalyticsParamsAttribute string

// FetchCompaniesAnalyticsParamsSort defines parameters for FetchCompaniesAnalytics.
type FetchCompaniesAnalyticsParamsSort string

// ExportCompaniesAnalyticsJSONBody defines parameters for ExportCompaniesAnalytics.
type ExportCompaniesAnalyticsJSONBody struct {
	ActionId   *float32                                      `json:"actionId,omitempty"`
	Attributes *[]ExportCompaniesAnalyticsJSONBodyAttributes `json:"attributes,omitempty"`
	Format     *ExportCompaniesAnalyticsJSONBodyFormat       `json:"format,omitempty"`
	Full       *bool                                         `json:"full,omitempty"`
	ListId     *float32                                      `json:"listId,omitempty"`
	Query      *[]SegmentationCondition                      `json:"query,omitempty"`
	Size       *float32                                      `json:"size,omitempty"`
	Sort       *ExportCompaniesAnalyticsJSONBodySort         `json:"sort,omitempty"`
}

// ExportCompaniesAnalyticsJSONBodyAttributes defines parameters for ExportCompaniesAnalytics.
type ExportCompaniesAnalyticsJSONBodyAttributes string

// ExportCompaniesAnalyticsJSONBodyFormat defines parameters for ExportCompaniesAnalytics.
type ExportCompaniesAnalyticsJSONBodyFormat string

// ExportCompaniesAnalyticsJSONBodySort defines parameters for ExportCompaniesAnalytics.
type ExportCompaniesAnalyticsJSONBodySort string

// FetchCompanyByEmailParams defines parameters for FetchCompanyByEmail.
type FetchCompanyByEmailParams struct {
	Email      string `form:"email" json:"email"`
	Refresh    *bool  `form:"refresh,omitempty" json:"refresh,omitempty"`
	Simplified *bool  `form:"simplified,omitempty" json:"simplified,omitempty"`
}

// SearchCompaniesByNameParams defines parameters for SearchCompaniesByName.
type SearchCompaniesByNameParams struct {
	Countries       *string                                    `form:"countries,omitempty" json:"countries,omitempty"`
	ExactWordsMatch *bool                                      `form:"exactWordsMatch,omitempty" json:"exactWordsMatch,omitempty"`
	ListsToExclude  *string                                    `form:"listsToExclude,omitempty" json:"listsToExclude,omitempty"`
	Name            string                                     `form:"name" json:"name"`
	Page            *float32                                   `form:"page,omitempty" json:"page,omitempty"`
	SearchFields    *[]SearchCompaniesByNameParamsSearchFields `form:"searchFields,omitempty" json:"searchFields,omitempty"`
	Simplified      *bool                                      `form:"simplified,omitempty" json:"simplified,omitempty"`
	Size            *float32                                   `form:"size,omitempty" json:"size,omitempty"`
	SortFields      *[]struct {
		Key     SearchCompaniesByNameParamsSortFieldsKey      `json:"key"`
		Missing *SearchCompaniesByNameParamsSortFieldsMissing `json:"missing,omitempty"`
		Order   SearchCompaniesByNameParamsSortFieldsOrder    `json:"order"`
	} `form:"sortFields,omitempty" json:"sortFields,omitempty"`
	SortKey   *SearchCompaniesByNameParamsSortKey   `form:"sortKey,omitempty" json:"sortKey,omitempty"`
	SortOrder *SearchCompaniesByNameParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
}

// SearchCompaniesByNameParamsSearchFields defines parameters for SearchCompaniesByName.
type SearchCompaniesByNameParamsSearchFields string

// SearchCompaniesByNameParamsSortFieldsKey defines parameters for SearchCompaniesByName.
type SearchCompaniesByNameParamsSortFieldsKey string

// SearchCompaniesByNameParamsSortFieldsMissing defines parameters for SearchCompaniesByName.
type SearchCompaniesByNameParamsSortFieldsMissing string

// SearchCompaniesByNameParamsSortFieldsOrder defines parameters for SearchCompaniesByName.
type SearchCompaniesByNameParamsSortFieldsOrder string

// SearchCompaniesByNameParamsSortKey defines parameters for SearchCompaniesByName.
type SearchCompaniesByNameParamsSortKey string

// SearchCompaniesByNameParamsSortOrder defines parameters for SearchCompaniesByName.
type SearchCompaniesByNameParamsSortOrder string

// SearchCompaniesByPromptParams defines parameters for SearchCompaniesByPrompt.
type SearchCompaniesByPromptParams struct {
	ListsToExclude *string  `form:"listsToExclude,omitempty" json:"listsToExclude,omitempty"`
	Page           *float32 `form:"page,omitempty" json:"page,omitempty"`
	Prompt         string   `form:"prompt" json:"prompt"`
	Similarity     *float32 `form:"similarity,omitempty" json:"similarity,omitempty"`
	Simplified     *bool    `form:"simplified,omitempty" json:"simplified,omitempty"`
	Size           *float32 `form:"size,omitempty" json:"size,omitempty"`
	SortFields     *[]struct {
		Key     SearchCompaniesByPromptParamsSortFieldsKey      `json:"key"`
		Missing *SearchCompaniesByPromptParamsSortFieldsMissing `json:"missing,omitempty"`
		Order   SearchCompaniesByPromptParamsSortFieldsOrder    `json:"order"`
	} `form:"sortFields,omitempty" json:"sortFields,omitempty"`
	SortKey   *SearchCompaniesByPromptParamsSortKey   `form:"sortKey,omitempty" json:"sortKey,omitempty"`
	SortOrder *SearchCompaniesByPromptParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
}

// SearchCompaniesByPromptParamsSortFieldsKey defines parameters for SearchCompaniesByPrompt.
type SearchCompaniesByPromptParamsSortFieldsKey string

// SearchCompaniesByPromptParamsSortFieldsMissing defines parameters for SearchCompaniesByPrompt.
type SearchCompaniesByPromptParamsSortFieldsMissing string

// SearchCompaniesByPromptParamsSortFieldsOrder defines parameters for SearchCompaniesByPrompt.
type SearchCompaniesByPromptParamsSortFieldsOrder string

// SearchCompaniesByPromptParamsSortKey defines parameters for SearchCompaniesByPrompt.
type SearchCompaniesByPromptParamsSortKey string

// SearchCompaniesByPromptParamsSortOrder defines parameters for SearchCompaniesByPrompt.
type SearchCompaniesByPromptParamsSortOrder string

// FetchCompanyBySocialParams defines parameters for FetchCompanyBySocial.
type FetchCompanyBySocialParams struct {
	Angellist  *string `form:"angellist,omitempty" json:"angellist,omitempty"`
	Dribbble   *string `form:"dribbble,omitempty" json:"dribbble,omitempty"`
	Facebook   *string `form:"facebook,omitempty" json:"facebook,omitempty"`
	Github     *string `form:"github,omitempty" json:"github,omitempty"`
	Instagram  *string `form:"instagram,omitempty" json:"instagram,omitempty"`
	Linkedin   *string `form:"linkedin,omitempty" json:"linkedin,omitempty"`
	Pinterest  *string `form:"pinterest,omitempty" json:"pinterest,omitempty"`
	Refresh    *bool   `form:"refresh,omitempty" json:"refresh,omitempty"`
	Simplified *bool   `form:"simplified,omitempty" json:"simplified,omitempty"`
	Snapchat   *string `form:"snapchat,omitempty" json:"snapchat,omitempty"`
	Souncloud  *string `form:"souncloud,omitempty" json:"souncloud,omitempty"`
	Tiktok     *string `form:"tiktok,omitempty" json:"tiktok,omitempty"`
	Twitter    *string `form:"twitter,omitempty" json:"twitter,omitempty"`
	Wellfound  *string `form:"wellfound,omitempty" json:"wellfound,omitempty"`
	Youtube    *string `form:"youtube,omitempty" json:"youtube,omitempty"`
}

// CountCompaniesParams defines parameters for CountCompanies.
type CountCompaniesParams struct {
	ActionId     *float32                            `form:"actionId,omitempty" json:"actionId,omitempty"`
	Query        *[]SegmentationCondition            `form:"query,omitempty" json:"query,omitempty"`
	Search       *string                             `form:"search,omitempty" json:"search,omitempty"`
	SearchFields *[]CountCompaniesParamsSearchFields `form:"searchFields,omitempty" json:"searchFields,omitempty"`
}

// CountCompaniesParamsSearchFields defines parameters for CountCompanies.
type CountCompaniesParamsSearchFields string

// CountCompaniesPostJSONBody defines parameters for CountCompaniesPost.
type CountCompaniesPostJSONBody struct {
	ActionId     *float32                                  `json:"actionId,omitempty"`
	Query        *[]SegmentationCondition                  `json:"query,omitempty"`
	Search       *string                                   `json:"search,omitempty"`
	SearchFields *[]CountCompaniesPostJSONBodySearchFields `json:"searchFields,omitempty"`
}

// CountCompaniesPostJSONBodySearchFields defines parameters for CountCompaniesPost.
type CountCompaniesPostJSONBodySearchFields string

// SearchSimilarCompaniesParams defines parameters for SearchSimilarCompanies.
type SearchSimilarCompaniesParams struct {
	Domains        []string                                   `form:"domains" json:"domains"`
	Page           *float32                                   `form:"page,omitempty" json:"page,omitempty"`
	ProximityExact *float32                                   `form:"proximityExact,omitempty" json:"proximityExact,omitempty"`
	ProximityTerm  *SearchSimilarCompaniesParamsProximityTerm `form:"proximityTerm,omitempty" json:"proximityTerm,omitempty"`
	Simplified     *bool                                      `form:"simplified,omitempty" json:"simplified,omitempty"`
	Size           *float32                                   `form:"size,omitempty" json:"size,omitempty"`
	SortFields     *[]struct {
		Key     SearchSimilarCompaniesParamsSortFieldsKey      `json:"key"`
		Missing *SearchSimilarCompaniesParamsSortFieldsMissing `json:"missing,omitempty"`
		Order   SearchSimilarCompaniesParamsSortFieldsOrder    `json:"order"`
	} `form:"sortFields,omitempty" json:"sortFields,omitempty"`
	SortKey   *SearchSimilarCompaniesParamsSortKey   `form:"sortKey,omitempty" json:"sortKey,omitempty"`
	SortOrder *SearchSimilarCompaniesParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
}

// SearchSimilarCompaniesParamsProximityTerm defines parameters for SearchSimilarCompanies.
type SearchSimilarCompaniesParamsProximityTerm string

// SearchSimilarCompaniesParamsSortFieldsKey defines parameters for SearchSimilarCompanies.
type SearchSimilarCompaniesParamsSortFieldsKey string

// SearchSimilarCompaniesParamsSortFieldsMissing defines parameters for SearchSimilarCompanies.
type SearchSimilarCompaniesParamsSortFieldsMissing string

// SearchSimilarCompaniesParamsSortFieldsOrder defines parameters for SearchSimilarCompanies.
type SearchSimilarCompaniesParamsSortFieldsOrder string

// SearchSimilarCompaniesParamsSortKey defines parameters for SearchSimilarCompanies.
type SearchSimilarCompaniesParamsSortKey string

// SearchSimilarCompaniesParamsSortOrder defines parameters for SearchSimilarCompanies.
type SearchSimilarCompaniesParamsSortOrder string

// FetchCompanyParams defines parameters for FetchCompany.
type FetchCompanyParams struct {
	Refresh    *bool `form:"refresh,omitempty" json:"refresh,omitempty"`
	Simplified *bool `form:"simplified,omitempty" json:"simplified,omitempty"`
}

// AskCompanyJSONBody defines parameters for AskCompany.
type AskCompanyJSONBody struct {
	Explain *bool `json:"explain,omitempty"`
	Fields  *[]struct {
		Description *string                      `json:"description,omitempty"`
		Key         string                       `json:"key"`
		Type        AskCompanyJSONBodyFieldsType `json:"type"`
		Values      *[]string                    `json:"values,omitempty"`
	} `json:"fields,omitempty"`
	ListId   *float32                 `json:"listId,omitempty"`
	Model    *AskCompanyJSONBodyModel `json:"model,omitempty"`
	Query    *[]SegmentationCondition `json:"query,omitempty"`
	Question string                   `json:"question"`
}

// AskCompanyJSONBodyFieldsType defines parameters for AskCompany.
type AskCompanyJSONBodyFieldsType string

// AskCompanyJSONBodyModel defines parameters for AskCompany.
type AskCompanyJSONBodyModel string

// FetchCompanyEmailPatternsParams defines parameters for FetchCompanyEmailPatterns.
type FetchCompanyEmailPatternsParams struct {
	EmailsCount *bool    `form:"emailsCount,omitempty" json:"emailsCount,omitempty"`
	Precision   *float32 `form:"precision,omitempty" json:"precision,omitempty"`
}

// SearchIndustriesParams defines parameters for SearchIndustries.
type SearchIndustriesParams struct {
	Page   *float32 `form:"page,omitempty" json:"page,omitempty"`
	Search *string  `form:"search,omitempty" json:"search,omitempty"`
	Size   *float32 `form:"size,omitempty" json:"size,omitempty"`
}

// SearchIndustriesSimilarParams defines parameters for SearchIndustriesSimilar.
type SearchIndustriesSimilarParams struct {
	Industries []string `form:"industries" json:"industries"`
	Page       *float32 `form:"page,omitempty" json:"page,omitempty"`
	Size       *float32 `form:"size,omitempty" json:"size,omitempty"`
}

// EnrichJobTitlesParams defines parameters for EnrichJobTitles.
type EnrichJobTitlesParams struct {
	Name *string `form:"name,omitempty" json:"name,omitempty"`
}

// FetchListsParams defines parameters for FetchLists.
type FetchListsParams struct {
	Page *float32 `form:"page,omitempty" json:"page,omitempty"`
	Size *float32 `form:"size,omitempty" json:"size,omitempty"`
}

// CreateListJSONBody defines parameters for CreateList.
type CreateListJSONBody struct {
	Dynamic            *bool                            `json:"dynamic,omitempty"`
	Imported           *bool                            `json:"imported,omitempty"`
	MailFrequency      *CreateListJSONBodyMailFrequency `json:"mailFrequency,omitempty"`
	MaxCompanies       *float32                         `json:"maxCompanies,omitempty"`
	Name               string                           `json:"name"`
	ProcessInitialized *bool                            `json:"processInitialized,omitempty"`
	Query              *[]SegmentationCondition         `json:"query,omitempty"`
	SimilarDomains     *[]string                        `json:"similarDomains,omitempty"`
}

// CreateListJSONBodyMailFrequency defines parameters for CreateList.
type CreateListJSONBodyMailFrequency string

// UpdateListJSONBody defines parameters for UpdateList.
type UpdateListJSONBody struct {
	Dynamic       *bool                            `json:"dynamic,omitempty"`
	LastSeen      *bool                            `json:"lastSeen,omitempty"`
	MailFrequency *UpdateListJSONBodyMailFrequency `json:"mailFrequency,omitempty"`
	MaxCompanies  *float32                         `json:"maxCompanies"`
	Name          *string                          `json:"name,omitempty"`
	Query         *[]SegmentationCondition         `json:"query,omitempty"`
	Resync        *bool                            `json:"resync,omitempty"`
}

// UpdateListJSONBodyMailFrequency defines parameters for UpdateList.
type UpdateListJSONBodyMailFrequency string

// FetchCompaniesInListParams defines parameters for FetchCompaniesInList.
type FetchCompaniesInListParams struct {
	ActionId   *float32                 `form:"actionId,omitempty" json:"actionId,omitempty"`
	Page       *float32                 `form:"page,omitempty" json:"page,omitempty"`
	Query      *[]SegmentationCondition `form:"query,omitempty" json:"query,omitempty"`
	Simplified *bool                    `form:"simplified,omitempty" json:"simplified,omitempty"`
	Size       *float32                 `form:"size,omitempty" json:"size,omitempty"`
	SortFields *[]struct {
		Key     FetchCompaniesInListParamsSortFieldsKey      `json:"key"`
		Missing *FetchCompaniesInListParamsSortFieldsMissing `json:"missing,omitempty"`
		Order   FetchCompaniesInListParamsSortFieldsOrder    `json:"order"`
	} `form:"sortFields,omitempty" json:"sortFields,omitempty"`
	SortKey   *FetchCompaniesInListParamsSortKey   `form:"sortKey,omitempty" json:"sortKey,omitempty"`
	SortOrder *FetchCompaniesInListParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
}

// FetchCompaniesInListParamsSortFieldsKey defines parameters for FetchCompaniesInList.
type FetchCompaniesInListParamsSortFieldsKey string

// FetchCompaniesInListParamsSortFieldsMissing defines parameters for FetchCompaniesInList.
type FetchCompaniesInListParamsSortFieldsMissing string

// FetchCompaniesInListParamsSortFieldsOrder defines parameters for FetchCompaniesInList.
type FetchCompaniesInListParamsSortFieldsOrder string

// FetchCompaniesInListParamsSortKey defines parameters for FetchCompaniesInList.
type FetchCompaniesInListParamsSortKey string

// FetchCompaniesInListParamsSortOrder defines parameters for FetchCompaniesInList.
type FetchCompaniesInListParamsSortOrder string

// FetchCompaniesInListPostJSONBody defines parameters for FetchCompaniesInListPost.
type FetchCompaniesInListPostJSONBody struct {
	ActionId   *float32                 `json:"actionId,omitempty"`
	Page       *float32                 `json:"page,omitempty"`
	Query      *[]SegmentationCondition `json:"query,omitempty"`
	Simplified *bool                    `json:"simplified,omitempty"`
	Size       *float32                 `json:"size,omitempty"`
	SortFields *[]struct {
		Key     FetchCompaniesInListPostJSONBodySortFieldsKey      `json:"key"`
		Missing *FetchCompaniesInListPostJSONBodySortFieldsMissing `json:"missing,omitempty"`
		Order   FetchCompaniesInListPostJSONBodySortFieldsOrder    `json:"order"`
	} `json:"sortFields,omitempty"`
	SortKey   *FetchCompaniesInListPostJSONBodySortKey   `json:"sortKey,omitempty"`
	SortOrder *FetchCompaniesInListPostJSONBodySortOrder `json:"sortOrder,omitempty"`
}

// FetchCompaniesInListPostJSONBodySortFieldsKey defines parameters for FetchCompaniesInListPost.
type FetchCompaniesInListPostJSONBodySortFieldsKey string

// FetchCompaniesInListPostJSONBodySortFieldsMissing defines parameters for FetchCompaniesInListPost.
type FetchCompaniesInListPostJSONBodySortFieldsMissing string

// FetchCompaniesInListPostJSONBodySortFieldsOrder defines parameters for FetchCompaniesInListPost.
type FetchCompaniesInListPostJSONBodySortFieldsOrder string

// FetchCompaniesInListPostJSONBodySortKey defines parameters for FetchCompaniesInListPost.
type FetchCompaniesInListPostJSONBodySortKey string

// FetchCompaniesInListPostJSONBodySortOrder defines parameters for FetchCompaniesInListPost.
type FetchCompaniesInListPostJSONBodySortOrder string

// ToggleCompaniesInListJSONBody defines parameters for ToggleCompaniesInList.
type ToggleCompaniesInListJSONBody struct {
	Action     ToggleCompaniesInListJSONBodyAction `json:"action"`
	CompanyIds *[]float32                          `json:"companyIds,omitempty"`
	Domains    *[]string                           `json:"domains,omitempty"`
	Refresh    *bool                               `json:"refresh,omitempty"`
}

// ToggleCompaniesInListJSONBodyAction defines parameters for ToggleCompaniesInList.
type ToggleCompaniesInListJSONBodyAction string

// SearchCitiesParams defines parameters for SearchCities.
type SearchCitiesParams struct {
	Filters   *string                      `form:"filters,omitempty" json:"filters,omitempty"`
	Page      *float32                     `form:"page,omitempty" json:"page,omitempty"`
	Search    *string                      `form:"search,omitempty" json:"search,omitempty"`
	Size      *float32                     `form:"size,omitempty" json:"size,omitempty"`
	SortKey   *SearchCitiesParamsSortKey   `form:"sortKey,omitempty" json:"sortKey,omitempty"`
	SortOrder *SearchCitiesParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
}

// SearchCitiesParamsSortKey defines parameters for SearchCities.
type SearchCitiesParamsSortKey string

// SearchCitiesParamsSortOrder defines parameters for SearchCities.
type SearchCitiesParamsSortOrder string

// SearchContinentsParams defines parameters for SearchContinents.
type SearchContinentsParams struct {
	Page      *float32                         `form:"page,omitempty" json:"page,omitempty"`
	Search    *string                          `form:"search,omitempty" json:"search,omitempty"`
	Size      *float32                         `form:"size,omitempty" json:"size,omitempty"`
	SortKey   *SearchContinentsParamsSortKey   `form:"sortKey,omitempty" json:"sortKey,omitempty"`
	SortOrder *SearchContinentsParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
}

// SearchContinentsParamsSortKey defines parameters for SearchContinents.
type SearchContinentsParamsSortKey string

// SearchContinentsParamsSortOrder defines parameters for SearchContinents.
type SearchContinentsParamsSortOrder string

// SearchCountiesParams defines parameters for SearchCounties.
type SearchCountiesParams struct {
	Page      *float32                       `form:"page,omitempty" json:"page,omitempty"`
	Search    *string                        `form:"search,omitempty" json:"search,omitempty"`
	Size      *float32                       `form:"size,omitempty" json:"size,omitempty"`
	SortKey   *SearchCountiesParamsSortKey   `form:"sortKey,omitempty" json:"sortKey,omitempty"`
	SortOrder *SearchCountiesParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
}

// SearchCountiesParamsSortKey defines parameters for SearchCounties.
type SearchCountiesParamsSortKey string

// SearchCountiesParamsSortOrder defines parameters for SearchCounties.
type SearchCountiesParamsSortOrder string

// SearchCountriesParams defines parameters for SearchCountries.
type SearchCountriesParams struct {
	Filters   *string                         `form:"filters,omitempty" json:"filters,omitempty"`
	Page      *float32                        `form:"page,omitempty" json:"page,omitempty"`
	Search    *string                         `form:"search,omitempty" json:"search,omitempty"`
	Size      *float32                        `form:"size,omitempty" json:"size,omitempty"`
	SortKey   *SearchCountriesParamsSortKey   `form:"sortKey,omitempty" json:"sortKey,omitempty"`
	SortOrder *SearchCountriesParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
}

// SearchCountriesParamsSortKey defines parameters for SearchCountries.
type SearchCountriesParamsSortKey string

// SearchCountriesParamsSortOrder defines parameters for SearchCountries.
type SearchCountriesParamsSortOrder string

// SearchStatesParams defines parameters for SearchStates.
type SearchStatesParams struct {
	Page      *float32                     `form:"page,omitempty" json:"page,omitempty"`
	Search    *string                      `form:"search,omitempty" json:"search,omitempty"`
	Size      *float32                     `form:"size,omitempty" json:"size,omitempty"`
	SortKey   *SearchStatesParamsSortKey   `form:"sortKey,omitempty" json:"sortKey,omitempty"`
	SortOrder *SearchStatesParamsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`
}

// SearchStatesParamsSortKey defines parameters for SearchStates.
type SearchStatesParamsSortKey string

// SearchStatesParamsSortOrder defines parameters for SearchStates.
type SearchStatesParamsSortOrder string

// FetchPromptsParams defines parameters for FetchPrompts.
type FetchPromptsParams struct {
	CompanyId *float32                   `form:"companyId,omitempty" json:"companyId,omitempty"`
	Context   *FetchPromptsParamsContext `form:"context,omitempty" json:"context,omitempty"`
	Feature   *FetchPromptsParamsFeature `form:"feature,omitempty" json:"feature,omitempty"`
	Limit     *float32                   `form:"limit,omitempty" json:"limit,omitempty"`
	ListId    *float32                   `form:"listId,omitempty" json:"listId,omitempty"`
	Model     *FetchPromptsParamsModel   `form:"model,omitempty" json:"model,omitempty"`
	Page      *float32                   `form:"page,omitempty" json:"page,omitempty"`
	Prompt    *string                    `form:"prompt,omitempty" json:"prompt,omitempty"`
	Search    *string                    `form:"search,omitempty" json:"search,omitempty"`
	Size      *float32                   `form:"size,omitempty" json:"size,omitempty"`
}

// FetchPromptsParamsContext defines parameters for FetchPrompts.
type FetchPromptsParamsContext string

// FetchPromptsParamsFeature defines parameters for FetchPrompts.
type FetchPromptsParamsFeature string

// FetchPromptsParamsModel defines parameters for FetchPrompts.
type FetchPromptsParamsModel string

// ProductPromptJSONBody defines parameters for ProductPrompt.
type ProductPromptJSONBody struct {
	CompanyId *float32                      `json:"companyId,omitempty"`
	Context   *ProductPromptJSONBodyContext `json:"context,omitempty"`
	Feature   *ProductPromptJSONBodyFeature `json:"feature,omitempty"`
	Force     *bool                         `json:"force,omitempty"`
	ListId    *float32                      `json:"listId,omitempty"`
	Model     *ProductPromptJSONBodyModel   `json:"model,omitempty"`
	Prompt    string                        `json:"prompt"`
}

// ProductPromptJSONBodyContext defines parameters for ProductPrompt.
type ProductPromptJSONBodyContext string

// ProductPromptJSONBodyFeature defines parameters for ProductPrompt.
type ProductPromptJSONBodyFeature string

// ProductPromptJSONBodyModel defines parameters for ProductPrompt.
type ProductPromptJSONBodyModel string

// PromptToSegmentationJSONBody defines parameters for PromptToSegmentation.
type PromptToSegmentationJSONBody struct {
	Context *PromptToSegmentationJSONBodyContext `json:"context,omitempty"`
	Force   *bool                                `json:"force,omitempty"`
	ListId  *float32                             `json:"listId,omitempty"`
	Model   *PromptToSegmentationJSONBodyModel   `json:"model,omitempty"`
	Prompt  string                               `json:"prompt"`
}

// PromptToSegmentationJSONBodyContext defines parameters for PromptToSegmentation.
type PromptToSegmentationJSONBodyContext string

// PromptToSegmentationJSONBodyModel defines parameters for PromptToSegmentation.
type PromptToSegmentationJSONBodyModel string

// UpdateTeamJSONBody defines parameters for UpdateTeam.
type UpdateTeamJSONBody struct {
	Country    *string `json:"country,omitempty"`
	Name       *string `json:"name,omitempty"`
	WebsiteUrl *string `json:"websiteUrl,omitempty"`
}

// SearchTechnologiesParams defines parameters for SearchTechnologies.
type SearchTechnologiesParams struct {
	Page   *float32 `form:"page,omitempty" json:"page,omitempty"`
	Search *string  `form:"search,omitempty" json:"search,omitempty"`
	Size   *float32 `form:"size,omitempty" json:"size,omitempty"`
}

// RequestActionJSONRequestBody defines body for RequestAction for application/json ContentType.
type RequestActionJSONRequestBody RequestActionJSONBody

// RetryActionJSONRequestBody defines body for RetryAction for application/json ContentType.
type RetryActionJSONRequestBody = RetryActionJSONBody

// SearchCompaniesPostJSONRequestBody defines body for SearchCompaniesPost for application/json ContentType.
type SearchCompaniesPostJSONRequestBody SearchCompaniesPostJSONBody

// ExportCompaniesAnalyticsJSONRequestBody defines body for ExportCompaniesAnalytics for application/json ContentType.
type ExportCompaniesAnalyticsJSONRequestBody ExportCompaniesAnalyticsJSONBody

// CountCompaniesPostJSONRequestBody defines body for CountCompaniesPost for application/json ContentType.
type CountCompaniesPostJSONRequestBody CountCompaniesPostJSONBody

// AskCompanyJSONRequestBody defines body for AskCompany for application/json ContentType.
type AskCompanyJSONRequestBody AskCompanyJSONBody

// CreateListJSONRequestBody defines body for CreateList for application/json ContentType.
type CreateListJSONRequestBody CreateListJSONBody

// UpdateListJSONRequestBody defines body for UpdateList for application/json ContentType.
type UpdateListJSONRequestBody UpdateListJSONBody

// FetchCompaniesInListPostJSONRequestBody defines body for FetchCompaniesInListPost for application/json ContentType.
type FetchCompaniesInListPostJSONRequestBody FetchCompaniesInListPostJSONBody

// ToggleCompaniesInListJSONRequestBody defines body for ToggleCompaniesInList for application/json ContentType.
type ToggleCompaniesInListJSONRequestBody ToggleCompaniesInListJSONBody

// ProductPromptJSONRequestBody defines body for ProductPrompt for application/json ContentType.
type ProductPromptJSONRequestBody ProductPromptJSONBody

// PromptToSegmentationJSONRequestBody defines body for PromptToSegmentation for application/json ContentType.
type PromptToSegmentationJSONRequestBody PromptToSegmentationJSONBody

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody UpdateTeamJSONBody

// AsPromptResponse0 returns the union data inside the Prompt_Response as a PromptResponse0
func (t Prompt_Response) AsPromptResponse0() (PromptResponse0, error) {
	var body PromptResponse0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPromptResponse0 overwrites any union data inside the Prompt_Response as the provided PromptResponse0
func (t *Prompt_Response) FromPromptResponse0(v PromptResponse0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePromptResponse0 performs a merge with any union data inside the Prompt_Response, using the provided PromptResponse0
func (t *Prompt_Response) MergePromptResponse0(v PromptResponse0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPromptResponse1 returns the union data inside the Prompt_Response as a PromptResponse1
func (t Prompt_Response) AsPromptResponse1() (PromptResponse1, error) {
	var body PromptResponse1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPromptResponse1 overwrites any union data inside the Prompt_Response as the provided PromptResponse1
func (t *Prompt_Response) FromPromptResponse1(v PromptResponse1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePromptResponse1 performs a merge with any union data inside the Prompt_Response, using the provided PromptResponse1
func (t *Prompt_Response) MergePromptResponse1(v PromptResponse1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPromptResponse2 returns the union data inside the Prompt_Response as a PromptResponse2
func (t Prompt_Response) AsPromptResponse2() (PromptResponse2, error) {
	var body PromptResponse2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPromptResponse2 overwrites any union data inside the Prompt_Response as the provided PromptResponse2
func (t *Prompt_Response) FromPromptResponse2(v PromptResponse2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePromptResponse2 performs a merge with any union data inside the Prompt_Response, using the provided PromptResponse2
func (t *Prompt_Response) MergePromptResponse2(v PromptResponse2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPromptResponse3 returns the union data inside the Prompt_Response as a PromptResponse3
func (t Prompt_Response) AsPromptResponse3() (PromptResponse3, error) {
	var body PromptResponse3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPromptResponse3 overwrites any union data inside the Prompt_Response as the provided PromptResponse3
func (t *Prompt_Response) FromPromptResponse3(v PromptResponse3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePromptResponse3 performs a merge with any union data inside the Prompt_Response, using the provided PromptResponse3
func (t *Prompt_Response) MergePromptResponse3(v PromptResponse3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPromptResponse4 returns the union data inside the Prompt_Response as a PromptResponse4
func (t Prompt_Response) AsPromptResponse4() (PromptResponse4, error) {
	var body PromptResponse4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPromptResponse4 overwrites any union data inside the Prompt_Response as the provided PromptResponse4
func (t *Prompt_Response) FromPromptResponse4(v PromptResponse4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePromptResponse4 performs a merge with any union data inside the Prompt_Response, using the provided PromptResponse4
func (t *Prompt_Response) MergePromptResponse4(v PromptResponse4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Prompt_Response) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Prompt_Response) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSegmentationConditionValues0 returns the union data inside the SegmentationCondition_Values_Item as a SegmentationConditionValues0
func (t SegmentationCondition_Values_Item) AsSegmentationConditionValues0() (SegmentationConditionValues0, error) {
	var body SegmentationConditionValues0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSegmentationConditionValues0 overwrites any union data inside the SegmentationCondition_Values_Item as the provided SegmentationConditionValues0
func (t *SegmentationCondition_Values_Item) FromSegmentationConditionValues0(v SegmentationConditionValues0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSegmentationConditionValues0 performs a merge with any union data inside the SegmentationCondition_Values_Item, using the provided SegmentationConditionValues0
func (t *SegmentationCondition_Values_Item) MergeSegmentationConditionValues0(v SegmentationConditionValues0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSegmentationConditionValues1 returns the union data inside the SegmentationCondition_Values_Item as a SegmentationConditionValues1
func (t SegmentationCondition_Values_Item) AsSegmentationConditionValues1() (SegmentationConditionValues1, error) {
	var body SegmentationConditionValues1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSegmentationConditionValues1 overwrites any union data inside the SegmentationCondition_Values_Item as the provided SegmentationConditionValues1
func (t *SegmentationCondition_Values_Item) FromSegmentationConditionValues1(v SegmentationConditionValues1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSegmentationConditionValues1 performs a merge with any union data inside the SegmentationCondition_Values_Item, using the provided SegmentationConditionValues1
func (t *SegmentationCondition_Values_Item) MergeSegmentationConditionValues1(v SegmentationConditionValues1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SegmentationCondition_Values_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SegmentationCondition_Values_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// FetchApiHealth request
	FetchApiHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchActions request
	FetchActions(ctx context.Context, params *FetchActionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RequestActionWithBody request with any body
	RequestActionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RequestAction(ctx context.Context, body RequestActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetryActionWithBody request with any body
	RetryActionWithBody(ctx context.Context, actionId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RetryAction(ctx context.Context, actionId float32, body RetryActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchCompanies request
	SearchCompanies(ctx context.Context, params *SearchCompaniesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchCompaniesPostWithBody request with any body
	SearchCompaniesPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SearchCompaniesPost(ctx context.Context, body SearchCompaniesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchCompaniesAnalytics request
	FetchCompaniesAnalytics(ctx context.Context, params *FetchCompaniesAnalyticsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportCompaniesAnalyticsWithBody request with any body
	ExportCompaniesAnalyticsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExportCompaniesAnalytics(ctx context.Context, body ExportCompaniesAnalyticsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchCompanyByEmail request
	FetchCompanyByEmail(ctx context.Context, params *FetchCompanyByEmailParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchCompaniesByName request
	SearchCompaniesByName(ctx context.Context, params *SearchCompaniesByNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchCompaniesByPrompt request
	SearchCompaniesByPrompt(ctx context.Context, params *SearchCompaniesByPromptParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchCompanyBySocial request
	FetchCompanyBySocial(ctx context.Context, params *FetchCompanyBySocialParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CountCompanies request
	CountCompanies(ctx context.Context, params *CountCompaniesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CountCompaniesPostWithBody request with any body
	CountCompaniesPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CountCompaniesPost(ctx context.Context, body CountCompaniesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchSimilarCompanies request
	SearchSimilarCompanies(ctx context.Context, params *SearchSimilarCompaniesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchCompany request
	FetchCompany(ctx context.Context, domain string, params *FetchCompanyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AskCompanyWithBody request with any body
	AskCompanyWithBody(ctx context.Context, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AskCompany(ctx context.Context, domain string, body AskCompanyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchCompanyContext request
	FetchCompanyContext(ctx context.Context, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchCompanyEmailPatterns request
	FetchCompanyEmailPatterns(ctx context.Context, domain string, params *FetchCompanyEmailPatternsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchIndustries request
	SearchIndustries(ctx context.Context, params *SearchIndustriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchIndustriesSimilar request
	SearchIndustriesSimilar(ctx context.Context, params *SearchIndustriesSimilarParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnrichJobTitles request
	EnrichJobTitles(ctx context.Context, params *EnrichJobTitlesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchLists request
	FetchLists(ctx context.Context, params *FetchListsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateListWithBody request with any body
	CreateListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateList(ctx context.Context, body CreateListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteList request
	DeleteList(ctx context.Context, listId float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateListWithBody request with any body
	UpdateListWithBody(ctx context.Context, listId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateList(ctx context.Context, listId float32, body UpdateListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchCompaniesInList request
	FetchCompaniesInList(ctx context.Context, listId float32, params *FetchCompaniesInListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchCompaniesInListPostWithBody request with any body
	FetchCompaniesInListPostWithBody(ctx context.Context, listId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	FetchCompaniesInListPost(ctx context.Context, listId float32, body FetchCompaniesInListPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToggleCompaniesInListWithBody request with any body
	ToggleCompaniesInListWithBody(ctx context.Context, listId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToggleCompaniesInList(ctx context.Context, listId float32, body ToggleCompaniesInListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchCompanyInList request
	FetchCompanyInList(ctx context.Context, listId float32, domain string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchCities request
	SearchCities(ctx context.Context, params *SearchCitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchContinents request
	SearchContinents(ctx context.Context, params *SearchContinentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchCounties request
	SearchCounties(ctx context.Context, params *SearchCountiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchCountries request
	SearchCountries(ctx context.Context, params *SearchCountriesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchStates request
	SearchStates(ctx context.Context, params *SearchStatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchOpenApi request
	FetchOpenApi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchPrompts request
	FetchPrompts(ctx context.Context, params *FetchPromptsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ProductPromptWithBody request with any body
	ProductPromptWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ProductPrompt(ctx context.Context, body ProductPromptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PromptToSegmentationWithBody request with any body
	PromptToSegmentationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PromptToSegmentation(ctx context.Context, body PromptToSegmentationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePrompt request
	DeletePrompt(ctx context.Context, promptId float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchTeam request
	FetchTeam(ctx context.Context, teamId float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTeamWithBody request with any body
	UpdateTeamWithBody(ctx context.Context, teamId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTeam(ctx context.Context, teamId float32, body UpdateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchTechnologies request
	SearchTechnologies(ctx context.Context, params *SearchTechnologiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchUser request
	FetchUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) FetchApiHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchApiHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchActions(ctx context.Context, params *FetchActionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchActionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestActionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestActionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RequestAction(ctx context.Context, body RequestActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRequestActionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetryActionWithBody(ctx context.Context, actionId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetryActionRequestWithBody(c.Server, actionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetryAction(ctx context.Context, actionId float32, body RetryActionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetryActionRequest(c.Server, actionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchCompanies(ctx context.Context, params *SearchCompaniesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchCompaniesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchCompaniesPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchCompaniesPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchCompaniesPost(ctx context.Context, body SearchCompaniesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchCompaniesPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchCompaniesAnalytics(ctx context.Context, params *FetchCompaniesAnalyticsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchCompaniesAnalyticsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportCompaniesAnalyticsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportCompaniesAnalyticsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportCompaniesAnalytics(ctx context.Context, body ExportCompaniesAnalyticsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportCompaniesAnalyticsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchCompanyByEmail(ctx context.Context, params *FetchCompanyByEmailParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchCompanyByEmailRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchCompaniesByName(ctx context.Context, params *SearchCompaniesByNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchCompaniesByNameRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchCompaniesByPrompt(ctx context.Context, params *SearchCompaniesByPromptParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchCompaniesByPromptRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchCompanyBySocial(ctx context.Context, params *FetchCompanyBySocialParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchCompanyBySocialRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CountCompanies(ctx context.Context, params *CountCompaniesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCountCompaniesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CountCompaniesPostWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCountCompaniesPostRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CountCompaniesPost(ctx context.Context, body CountCompaniesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCountCompaniesPostRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchSimilarCompanies(ctx context.Context, params *SearchSimilarCompaniesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchSimilarCompaniesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchCompany(ctx context.Context, domain string, params *FetchCompanyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchCompanyRequest(c.Server, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AskCompanyWithBody(ctx context.Context, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAskCompanyRequestWithBody(c.Server, domain, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AskCompany(ctx context.Context, domain string, body AskCompanyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAskCompanyRequest(c.Server, domain, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchCompanyContext(ctx context.Context, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchCompanyContextRequest(c.Server, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchCompanyEmailPatterns(ctx context.Context, domain string, params *FetchCompanyEmailPatternsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchCompanyEmailPatternsRequest(c.Server, domain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchIndustries(ctx context.Context, params *SearchIndustriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchIndustriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchIndustriesSimilar(ctx context.Context, params *SearchIndustriesSimilarParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchIndustriesSimilarRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnrichJobTitles(ctx context.Context, params *EnrichJobTitlesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnrichJobTitlesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchLists(ctx context.Context, params *FetchListsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchListsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateList(ctx context.Context, body CreateListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateListRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteList(ctx context.Context, listId float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteListRequest(c.Server, listId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateListWithBody(ctx context.Context, listId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateListRequestWithBody(c.Server, listId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateList(ctx context.Context, listId float32, body UpdateListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateListRequest(c.Server, listId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchCompaniesInList(ctx context.Context, listId float32, params *FetchCompaniesInListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchCompaniesInListRequest(c.Server, listId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchCompaniesInListPostWithBody(ctx context.Context, listId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchCompaniesInListPostRequestWithBody(c.Server, listId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchCompaniesInListPost(ctx context.Context, listId float32, body FetchCompaniesInListPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchCompaniesInListPostRequest(c.Server, listId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToggleCompaniesInListWithBody(ctx context.Context, listId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToggleCompaniesInListRequestWithBody(c.Server, listId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToggleCompaniesInList(ctx context.Context, listId float32, body ToggleCompaniesInListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToggleCompaniesInListRequest(c.Server, listId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchCompanyInList(ctx context.Context, listId float32, domain string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchCompanyInListRequest(c.Server, listId, domain)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchCities(ctx context.Context, params *SearchCitiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchCitiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchContinents(ctx context.Context, params *SearchContinentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchContinentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchCounties(ctx context.Context, params *SearchCountiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchCountiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchCountries(ctx context.Context, params *SearchCountriesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchCountriesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchStates(ctx context.Context, params *SearchStatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchStatesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchOpenApi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchOpenApiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchPrompts(ctx context.Context, params *FetchPromptsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchPromptsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductPromptWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductPromptRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ProductPrompt(ctx context.Context, body ProductPromptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewProductPromptRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PromptToSegmentationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPromptToSegmentationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PromptToSegmentation(ctx context.Context, body PromptToSegmentationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPromptToSegmentationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePrompt(ctx context.Context, promptId float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePromptRequest(c.Server, promptId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchTeam(ctx context.Context, teamId float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchTeamRequest(c.Server, teamId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamWithBody(ctx context.Context, teamId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamRequestWithBody(c.Server, teamId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeam(ctx context.Context, teamId float32, body UpdateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamRequest(c.Server, teamId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchTechnologies(ctx context.Context, params *SearchTechnologiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchTechnologiesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewFetchApiHealthRequest generates requests for FetchApiHealth
func NewFetchApiHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchActionsRequest generates requests for FetchActions
func NewFetchActionsRequest(server string, params *FetchActionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/actions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Full != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "full", runtime.ParamLocationQuery, *params.Full); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ids != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ids", runtime.ParamLocationQuery, *params.Ids); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ListId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "listId", runtime.ParamLocationQuery, *params.ListId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TeamId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "teamId", runtime.ParamLocationQuery, *params.TeamId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Type != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRequestActionRequest calls the generic RequestAction builder with application/json body
func NewRequestActionRequest(server string, body RequestActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRequestActionRequestWithBody(server, "application/json", bodyReader)
}

// NewRequestActionRequestWithBody generates requests for RequestAction with any type of body
func NewRequestActionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/actions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRetryActionRequest calls the generic RetryAction builder with application/json body
func NewRetryActionRequest(server string, actionId float32, body RetryActionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRetryActionRequestWithBody(server, actionId, "application/json", bodyReader)
}

// NewRetryActionRequestWithBody generates requests for RetryAction with any type of body
func NewRetryActionRequestWithBody(server string, actionId float32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "actionId", runtime.ParamLocationPath, actionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/actions/%s/retry", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchCompaniesRequest generates requests for SearchCompanies
func NewSearchCompaniesRequest(server string, params *SearchCompaniesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/companies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ActionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "actionId", runtime.ParamLocationQuery, *params.ActionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DomainsToExclude != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domainsToExclude", runtime.ParamLocationQuery, *params.DomainsToExclude); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LinkedinToExclude != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "linkedinToExclude", runtime.ParamLocationQuery, *params.LinkedinToExclude); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "searchFields", runtime.ParamLocationQuery, *params.SearchFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Simplified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "simplified", runtime.ParamLocationQuery, *params.Simplified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortFields", runtime.ParamLocationQuery, *params.SortFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, *params.SortKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchCompaniesPostRequest calls the generic SearchCompaniesPost builder with application/json body
func NewSearchCompaniesPostRequest(server string, body SearchCompaniesPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchCompaniesPostRequestWithBody(server, "application/json", bodyReader)
}

// NewSearchCompaniesPostRequestWithBody generates requests for SearchCompaniesPost with any type of body
func NewSearchCompaniesPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/companies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFetchCompaniesAnalyticsRequest generates requests for FetchCompaniesAnalytics
func NewFetchCompaniesAnalyticsRequest(server string, params *FetchCompaniesAnalyticsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/companies/analytics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ActionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "actionId", runtime.ParamLocationQuery, *params.ActionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attribute", runtime.ParamLocationQuery, params.Attribute); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.ListId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "listId", runtime.ParamLocationQuery, *params.ListId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Sort != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sort", runtime.ParamLocationQuery, *params.Sort); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExportCompaniesAnalyticsRequest calls the generic ExportCompaniesAnalytics builder with application/json body
func NewExportCompaniesAnalyticsRequest(server string, body ExportCompaniesAnalyticsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExportCompaniesAnalyticsRequestWithBody(server, "application/json", bodyReader)
}

// NewExportCompaniesAnalyticsRequestWithBody generates requests for ExportCompaniesAnalytics with any type of body
func NewExportCompaniesAnalyticsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/companies/analytics/export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFetchCompanyByEmailRequest generates requests for FetchCompanyByEmail
func NewFetchCompanyByEmailRequest(server string, params *FetchCompanyByEmailParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/companies/by-email")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, params.Email); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Refresh != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "refresh", runtime.ParamLocationQuery, *params.Refresh); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Simplified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "simplified", runtime.ParamLocationQuery, *params.Simplified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchCompaniesByNameRequest generates requests for SearchCompaniesByName
func NewSearchCompaniesByNameRequest(server string, params *SearchCompaniesByNameParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/companies/by-name")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Countries != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "countries", runtime.ParamLocationQuery, *params.Countries); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExactWordsMatch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "exactWordsMatch", runtime.ParamLocationQuery, *params.ExactWordsMatch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ListsToExclude != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "listsToExclude", runtime.ParamLocationQuery, *params.ListsToExclude); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "searchFields", runtime.ParamLocationQuery, *params.SearchFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Simplified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "simplified", runtime.ParamLocationQuery, *params.Simplified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortFields", runtime.ParamLocationQuery, *params.SortFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, *params.SortKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchCompaniesByPromptRequest generates requests for SearchCompaniesByPrompt
func NewSearchCompaniesByPromptRequest(server string, params *SearchCompaniesByPromptParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/companies/by-prompt")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ListsToExclude != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "listsToExclude", runtime.ParamLocationQuery, *params.ListsToExclude); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prompt", runtime.ParamLocationQuery, params.Prompt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Similarity != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "similarity", runtime.ParamLocationQuery, *params.Similarity); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Simplified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "simplified", runtime.ParamLocationQuery, *params.Simplified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortFields", runtime.ParamLocationQuery, *params.SortFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, *params.SortKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchCompanyBySocialRequest generates requests for FetchCompanyBySocial
func NewFetchCompanyBySocialRequest(server string, params *FetchCompanyBySocialParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/companies/by-social")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Angellist != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "angellist", runtime.ParamLocationQuery, *params.Angellist); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Dribbble != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "dribbble", runtime.ParamLocationQuery, *params.Dribbble); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Facebook != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "facebook", runtime.ParamLocationQuery, *params.Facebook); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Github != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "github", runtime.ParamLocationQuery, *params.Github); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Instagram != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "instagram", runtime.ParamLocationQuery, *params.Instagram); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Linkedin != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "linkedin", runtime.ParamLocationQuery, *params.Linkedin); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Pinterest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pinterest", runtime.ParamLocationQuery, *params.Pinterest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Refresh != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "refresh", runtime.ParamLocationQuery, *params.Refresh); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Simplified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "simplified", runtime.ParamLocationQuery, *params.Simplified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Snapchat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "snapchat", runtime.ParamLocationQuery, *params.Snapchat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Souncloud != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "souncloud", runtime.ParamLocationQuery, *params.Souncloud); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tiktok != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tiktok", runtime.ParamLocationQuery, *params.Tiktok); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Twitter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "twitter", runtime.ParamLocationQuery, *params.Twitter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Wellfound != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "wellfound", runtime.ParamLocationQuery, *params.Wellfound); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Youtube != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "youtube", runtime.ParamLocationQuery, *params.Youtube); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCountCompaniesRequest generates requests for CountCompanies
func NewCountCompaniesRequest(server string, params *CountCompaniesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/companies/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ActionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "actionId", runtime.ParamLocationQuery, *params.ActionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "searchFields", runtime.ParamLocationQuery, *params.SearchFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCountCompaniesPostRequest calls the generic CountCompaniesPost builder with application/json body
func NewCountCompaniesPostRequest(server string, body CountCompaniesPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCountCompaniesPostRequestWithBody(server, "application/json", bodyReader)
}

// NewCountCompaniesPostRequestWithBody generates requests for CountCompaniesPost with any type of body
func NewCountCompaniesPostRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/companies/count")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchSimilarCompaniesRequest generates requests for SearchSimilarCompanies
func NewSearchSimilarCompaniesRequest(server string, params *SearchSimilarCompaniesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/companies/similar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "domains", runtime.ParamLocationQuery, params.Domains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProximityExact != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "proximityExact", runtime.ParamLocationQuery, *params.ProximityExact); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProximityTerm != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "proximityTerm", runtime.ParamLocationQuery, *params.ProximityTerm); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Simplified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "simplified", runtime.ParamLocationQuery, *params.Simplified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortFields", runtime.ParamLocationQuery, *params.SortFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, *params.SortKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchCompanyRequest generates requests for FetchCompany
func NewFetchCompanyRequest(server string, domain string, params *FetchCompanyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/companies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Refresh != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "refresh", runtime.ParamLocationQuery, *params.Refresh); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Simplified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "simplified", runtime.ParamLocationQuery, *params.Simplified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAskCompanyRequest calls the generic AskCompany builder with application/json body
func NewAskCompanyRequest(server string, domain string, body AskCompanyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAskCompanyRequestWithBody(server, domain, "application/json", bodyReader)
}

// NewAskCompanyRequestWithBody generates requests for AskCompany with any type of body
func NewAskCompanyRequestWithBody(server string, domain string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/companies/%s/ask", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFetchCompanyContextRequest generates requests for FetchCompanyContext
func NewFetchCompanyContextRequest(server string, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/companies/%s/context", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchCompanyEmailPatternsRequest generates requests for FetchCompanyEmailPatterns
func NewFetchCompanyEmailPatternsRequest(server string, domain string, params *FetchCompanyEmailPatternsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/companies/%s/email-patterns", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.EmailsCount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "emailsCount", runtime.ParamLocationQuery, *params.EmailsCount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Precision != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "precision", runtime.ParamLocationQuery, *params.Precision); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchIndustriesRequest generates requests for SearchIndustries
func NewSearchIndustriesRequest(server string, params *SearchIndustriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/industries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchIndustriesSimilarRequest generates requests for SearchIndustriesSimilar
func NewSearchIndustriesSimilarRequest(server string, params *SearchIndustriesSimilarParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/industries/similar")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "industries", runtime.ParamLocationQuery, params.Industries); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnrichJobTitlesRequest generates requests for EnrichJobTitles
func NewEnrichJobTitlesRequest(server string, params *EnrichJobTitlesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/job-titles/enrich")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchListsRequest generates requests for FetchLists
func NewFetchListsRequest(server string, params *FetchListsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/lists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateListRequest calls the generic CreateList builder with application/json body
func NewCreateListRequest(server string, body CreateListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateListRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateListRequestWithBody generates requests for CreateList with any type of body
func NewCreateListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/lists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteListRequest generates requests for DeleteList
func NewDeleteListRequest(server string, listId float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listId", runtime.ParamLocationPath, listId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/lists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateListRequest calls the generic UpdateList builder with application/json body
func NewUpdateListRequest(server string, listId float32, body UpdateListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateListRequestWithBody(server, listId, "application/json", bodyReader)
}

// NewUpdateListRequestWithBody generates requests for UpdateList with any type of body
func NewUpdateListRequestWithBody(server string, listId float32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listId", runtime.ParamLocationPath, listId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/lists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFetchCompaniesInListRequest generates requests for FetchCompaniesInList
func NewFetchCompaniesInListRequest(server string, listId float32, params *FetchCompaniesInListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listId", runtime.ParamLocationPath, listId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/lists/%s/companies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ActionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "actionId", runtime.ParamLocationQuery, *params.ActionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Query != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, *params.Query); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Simplified != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "simplified", runtime.ParamLocationQuery, *params.Simplified); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortFields != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortFields", runtime.ParamLocationQuery, *params.SortFields); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, *params.SortKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchCompaniesInListPostRequest calls the generic FetchCompaniesInListPost builder with application/json body
func NewFetchCompaniesInListPostRequest(server string, listId float32, body FetchCompaniesInListPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewFetchCompaniesInListPostRequestWithBody(server, listId, "application/json", bodyReader)
}

// NewFetchCompaniesInListPostRequestWithBody generates requests for FetchCompaniesInListPost with any type of body
func NewFetchCompaniesInListPostRequestWithBody(server string, listId float32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listId", runtime.ParamLocationPath, listId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/lists/%s/companies", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewToggleCompaniesInListRequest calls the generic ToggleCompaniesInList builder with application/json body
func NewToggleCompaniesInListRequest(server string, listId float32, body ToggleCompaniesInListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewToggleCompaniesInListRequestWithBody(server, listId, "application/json", bodyReader)
}

// NewToggleCompaniesInListRequestWithBody generates requests for ToggleCompaniesInList with any type of body
func NewToggleCompaniesInListRequestWithBody(server string, listId float32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listId", runtime.ParamLocationPath, listId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/lists/%s/companies/toggle", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFetchCompanyInListRequest generates requests for FetchCompanyInList
func NewFetchCompanyInListRequest(server string, listId float32, domain string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "listId", runtime.ParamLocationPath, listId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "domain", runtime.ParamLocationPath, domain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/lists/%s/companies/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchCitiesRequest generates requests for SearchCities
func NewSearchCitiesRequest(server string, params *SearchCitiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/locations/cities")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filters", runtime.ParamLocationQuery, *params.Filters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, *params.SortKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchContinentsRequest generates requests for SearchContinents
func NewSearchContinentsRequest(server string, params *SearchContinentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/locations/continents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, *params.SortKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchCountiesRequest generates requests for SearchCounties
func NewSearchCountiesRequest(server string, params *SearchCountiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/locations/counties")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, *params.SortKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchCountriesRequest generates requests for SearchCountries
func NewSearchCountriesRequest(server string, params *SearchCountriesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/locations/countries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Filters != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filters", runtime.ParamLocationQuery, *params.Filters); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, *params.SortKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchStatesRequest generates requests for SearchStates
func NewSearchStatesRequest(server string, params *SearchStatesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/locations/states")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortKey", runtime.ParamLocationQuery, *params.SortKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchOpenApiRequest generates requests for FetchOpenApi
func NewFetchOpenApiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/openapi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchPromptsRequest generates requests for FetchPrompts
func NewFetchPromptsRequest(server string, params *FetchPromptsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/prompts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.CompanyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "companyId", runtime.ParamLocationQuery, *params.CompanyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Context != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "context", runtime.ParamLocationQuery, *params.Context); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Feature != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "feature", runtime.ParamLocationQuery, *params.Feature); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ListId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "listId", runtime.ParamLocationQuery, *params.ListId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Model != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "model", runtime.ParamLocationQuery, *params.Model); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Prompt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prompt", runtime.ParamLocationQuery, *params.Prompt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewProductPromptRequest calls the generic ProductPrompt builder with application/json body
func NewProductPromptRequest(server string, body ProductPromptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewProductPromptRequestWithBody(server, "application/json", bodyReader)
}

// NewProductPromptRequestWithBody generates requests for ProductPrompt with any type of body
func NewProductPromptRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/prompts/product")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPromptToSegmentationRequest calls the generic PromptToSegmentation builder with application/json body
func NewPromptToSegmentationRequest(server string, body PromptToSegmentationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPromptToSegmentationRequestWithBody(server, "application/json", bodyReader)
}

// NewPromptToSegmentationRequestWithBody generates requests for PromptToSegmentation with any type of body
func NewPromptToSegmentationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/prompts/segmentation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePromptRequest generates requests for DeletePrompt
func NewDeletePromptRequest(server string, promptId float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "promptId", runtime.ParamLocationPath, promptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/prompts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchTeamRequest generates requests for FetchTeam
func NewFetchTeamRequest(server string, teamId float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTeamRequest calls the generic UpdateTeam builder with application/json body
func NewUpdateTeamRequest(server string, teamId float32, body UpdateTeamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTeamRequestWithBody(server, teamId, "application/json", bodyReader)
}

// NewUpdateTeamRequestWithBody generates requests for UpdateTeam with any type of body
func NewUpdateTeamRequestWithBody(server string, teamId float32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "teamId", runtime.ParamLocationPath, teamId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchTechnologiesRequest generates requests for SearchTechnologies
func NewSearchTechnologiesRequest(server string, params *SearchTechnologiesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/technologies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Size != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "size", runtime.ParamLocationQuery, *params.Size); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchUserRequest generates requests for FetchUser
func NewFetchUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// FetchApiHealthWithResponse request
	FetchApiHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FetchApiHealthResponse, error)

	// FetchActionsWithResponse request
	FetchActionsWithResponse(ctx context.Context, params *FetchActionsParams, reqEditors ...RequestEditorFn) (*FetchActionsResponse, error)

	// RequestActionWithBodyWithResponse request with any body
	RequestActionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestActionResponse, error)

	RequestActionWithResponse(ctx context.Context, body RequestActionJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestActionResponse, error)

	// RetryActionWithBodyWithResponse request with any body
	RetryActionWithBodyWithResponse(ctx context.Context, actionId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RetryActionResponse, error)

	RetryActionWithResponse(ctx context.Context, actionId float32, body RetryActionJSONRequestBody, reqEditors ...RequestEditorFn) (*RetryActionResponse, error)

	// SearchCompaniesWithResponse request
	SearchCompaniesWithResponse(ctx context.Context, params *SearchCompaniesParams, reqEditors ...RequestEditorFn) (*SearchCompaniesResponse, error)

	// SearchCompaniesPostWithBodyWithResponse request with any body
	SearchCompaniesPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchCompaniesPostResponse, error)

	SearchCompaniesPostWithResponse(ctx context.Context, body SearchCompaniesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchCompaniesPostResponse, error)

	// FetchCompaniesAnalyticsWithResponse request
	FetchCompaniesAnalyticsWithResponse(ctx context.Context, params *FetchCompaniesAnalyticsParams, reqEditors ...RequestEditorFn) (*FetchCompaniesAnalyticsResponse, error)

	// ExportCompaniesAnalyticsWithBodyWithResponse request with any body
	ExportCompaniesAnalyticsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExportCompaniesAnalyticsResponse, error)

	ExportCompaniesAnalyticsWithResponse(ctx context.Context, body ExportCompaniesAnalyticsJSONRequestBody, reqEditors ...RequestEditorFn) (*ExportCompaniesAnalyticsResponse, error)

	// FetchCompanyByEmailWithResponse request
	FetchCompanyByEmailWithResponse(ctx context.Context, params *FetchCompanyByEmailParams, reqEditors ...RequestEditorFn) (*FetchCompanyByEmailResponse, error)

	// SearchCompaniesByNameWithResponse request
	SearchCompaniesByNameWithResponse(ctx context.Context, params *SearchCompaniesByNameParams, reqEditors ...RequestEditorFn) (*SearchCompaniesByNameResponse, error)

	// SearchCompaniesByPromptWithResponse request
	SearchCompaniesByPromptWithResponse(ctx context.Context, params *SearchCompaniesByPromptParams, reqEditors ...RequestEditorFn) (*SearchCompaniesByPromptResponse, error)

	// FetchCompanyBySocialWithResponse request
	FetchCompanyBySocialWithResponse(ctx context.Context, params *FetchCompanyBySocialParams, reqEditors ...RequestEditorFn) (*FetchCompanyBySocialResponse, error)

	// CountCompaniesWithResponse request
	CountCompaniesWithResponse(ctx context.Context, params *CountCompaniesParams, reqEditors ...RequestEditorFn) (*CountCompaniesResponse, error)

	// CountCompaniesPostWithBodyWithResponse request with any body
	CountCompaniesPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CountCompaniesPostResponse, error)

	CountCompaniesPostWithResponse(ctx context.Context, body CountCompaniesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CountCompaniesPostResponse, error)

	// SearchSimilarCompaniesWithResponse request
	SearchSimilarCompaniesWithResponse(ctx context.Context, params *SearchSimilarCompaniesParams, reqEditors ...RequestEditorFn) (*SearchSimilarCompaniesResponse, error)

	// FetchCompanyWithResponse request
	FetchCompanyWithResponse(ctx context.Context, domain string, params *FetchCompanyParams, reqEditors ...RequestEditorFn) (*FetchCompanyResponse, error)

	// AskCompanyWithBodyWithResponse request with any body
	AskCompanyWithBodyWithResponse(ctx context.Context, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AskCompanyResponse, error)

	AskCompanyWithResponse(ctx context.Context, domain string, body AskCompanyJSONRequestBody, reqEditors ...RequestEditorFn) (*AskCompanyResponse, error)

	// FetchCompanyContextWithResponse request
	FetchCompanyContextWithResponse(ctx context.Context, domain string, reqEditors ...RequestEditorFn) (*FetchCompanyContextResponse, error)

	// FetchCompanyEmailPatternsWithResponse request
	FetchCompanyEmailPatternsWithResponse(ctx context.Context, domain string, params *FetchCompanyEmailPatternsParams, reqEditors ...RequestEditorFn) (*FetchCompanyEmailPatternsResponse, error)

	// SearchIndustriesWithResponse request
	SearchIndustriesWithResponse(ctx context.Context, params *SearchIndustriesParams, reqEditors ...RequestEditorFn) (*SearchIndustriesResponse, error)

	// SearchIndustriesSimilarWithResponse request
	SearchIndustriesSimilarWithResponse(ctx context.Context, params *SearchIndustriesSimilarParams, reqEditors ...RequestEditorFn) (*SearchIndustriesSimilarResponse, error)

	// EnrichJobTitlesWithResponse request
	EnrichJobTitlesWithResponse(ctx context.Context, params *EnrichJobTitlesParams, reqEditors ...RequestEditorFn) (*EnrichJobTitlesResponse, error)

	// FetchListsWithResponse request
	FetchListsWithResponse(ctx context.Context, params *FetchListsParams, reqEditors ...RequestEditorFn) (*FetchListsResponse, error)

	// CreateListWithBodyWithResponse request with any body
	CreateListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateListResponse, error)

	CreateListWithResponse(ctx context.Context, body CreateListJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateListResponse, error)

	// DeleteListWithResponse request
	DeleteListWithResponse(ctx context.Context, listId float32, reqEditors ...RequestEditorFn) (*DeleteListResponse, error)

	// UpdateListWithBodyWithResponse request with any body
	UpdateListWithBodyWithResponse(ctx context.Context, listId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateListResponse, error)

	UpdateListWithResponse(ctx context.Context, listId float32, body UpdateListJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateListResponse, error)

	// FetchCompaniesInListWithResponse request
	FetchCompaniesInListWithResponse(ctx context.Context, listId float32, params *FetchCompaniesInListParams, reqEditors ...RequestEditorFn) (*FetchCompaniesInListResponse, error)

	// FetchCompaniesInListPostWithBodyWithResponse request with any body
	FetchCompaniesInListPostWithBodyWithResponse(ctx context.Context, listId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FetchCompaniesInListPostResponse, error)

	FetchCompaniesInListPostWithResponse(ctx context.Context, listId float32, body FetchCompaniesInListPostJSONRequestBody, reqEditors ...RequestEditorFn) (*FetchCompaniesInListPostResponse, error)

	// ToggleCompaniesInListWithBodyWithResponse request with any body
	ToggleCompaniesInListWithBodyWithResponse(ctx context.Context, listId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToggleCompaniesInListResponse, error)

	ToggleCompaniesInListWithResponse(ctx context.Context, listId float32, body ToggleCompaniesInListJSONRequestBody, reqEditors ...RequestEditorFn) (*ToggleCompaniesInListResponse, error)

	// FetchCompanyInListWithResponse request
	FetchCompanyInListWithResponse(ctx context.Context, listId float32, domain string, reqEditors ...RequestEditorFn) (*FetchCompanyInListResponse, error)

	// SearchCitiesWithResponse request
	SearchCitiesWithResponse(ctx context.Context, params *SearchCitiesParams, reqEditors ...RequestEditorFn) (*SearchCitiesResponse, error)

	// SearchContinentsWithResponse request
	SearchContinentsWithResponse(ctx context.Context, params *SearchContinentsParams, reqEditors ...RequestEditorFn) (*SearchContinentsResponse, error)

	// SearchCountiesWithResponse request
	SearchCountiesWithResponse(ctx context.Context, params *SearchCountiesParams, reqEditors ...RequestEditorFn) (*SearchCountiesResponse, error)

	// SearchCountriesWithResponse request
	SearchCountriesWithResponse(ctx context.Context, params *SearchCountriesParams, reqEditors ...RequestEditorFn) (*SearchCountriesResponse, error)

	// SearchStatesWithResponse request
	SearchStatesWithResponse(ctx context.Context, params *SearchStatesParams, reqEditors ...RequestEditorFn) (*SearchStatesResponse, error)

	// FetchOpenApiWithResponse request
	FetchOpenApiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FetchOpenApiResponse, error)

	// FetchPromptsWithResponse request
	FetchPromptsWithResponse(ctx context.Context, params *FetchPromptsParams, reqEditors ...RequestEditorFn) (*FetchPromptsResponse, error)

	// ProductPromptWithBodyWithResponse request with any body
	ProductPromptWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductPromptResponse, error)

	ProductPromptWithResponse(ctx context.Context, body ProductPromptJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductPromptResponse, error)

	// PromptToSegmentationWithBodyWithResponse request with any body
	PromptToSegmentationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PromptToSegmentationResponse, error)

	PromptToSegmentationWithResponse(ctx context.Context, body PromptToSegmentationJSONRequestBody, reqEditors ...RequestEditorFn) (*PromptToSegmentationResponse, error)

	// DeletePromptWithResponse request
	DeletePromptWithResponse(ctx context.Context, promptId float32, reqEditors ...RequestEditorFn) (*DeletePromptResponse, error)

	// FetchTeamWithResponse request
	FetchTeamWithResponse(ctx context.Context, teamId float32, reqEditors ...RequestEditorFn) (*FetchTeamResponse, error)

	// UpdateTeamWithBodyWithResponse request with any body
	UpdateTeamWithBodyWithResponse(ctx context.Context, teamId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error)

	UpdateTeamWithResponse(ctx context.Context, teamId float32, body UpdateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error)

	// SearchTechnologiesWithResponse request
	SearchTechnologiesWithResponse(ctx context.Context, params *SearchTechnologiesParams, reqEditors ...RequestEditorFn) (*SearchTechnologiesResponse, error)

	// FetchUserWithResponse request
	FetchUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FetchUserResponse, error)
}

type FetchApiHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Healthy  bool   `json:"healthy"`
		NodeName string `json:"nodeName"`
		Report   map[string]struct {
			DisplayName string `json:"displayName"`
			Health      struct {
				Healthy bool `json:"healthy"`
			} `json:"health"`
		} `json:"report"`
	}
}

// Status returns HTTPResponse.Status
func (r FetchApiHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchApiHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchActionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Actions []Action `json:"actions"`

		// Meta Metadata about a paginated or billed response.
		Meta PaginationMeta `json:"meta"`
	}
	JSON400 *struct {
		Details  interface{}             `json:"details,omitempty"`
		Messages FetchActions400Messages `json:"messages"`
		Status   float32                 `json:"status"`
	}
	JSON401 *struct {
		Details  interface{}             `json:"details,omitempty"`
		Messages FetchActions401Messages `json:"messages"`
		Status   float32                 `json:"status"`
	}
}
type FetchActions400Messages string
type FetchActions401Messages string

// Status returns HTTPResponse.Status
func (r FetchActionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchActionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RequestActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Actions []Action `json:"actions"`
	}
	JSON400 *struct {
		Details  interface{}              `json:"details,omitempty"`
		Messages RequestAction400Messages `json:"messages"`
		Status   float32                  `json:"status"`
	}
	JSON401 *struct {
		Details  interface{}              `json:"details,omitempty"`
		Messages RequestAction401Messages `json:"messages"`
		Status   float32                  `json:"status"`
	}
	JSON403 *struct {
		Details  interface{}              `json:"details,omitempty"`
		Messages RequestAction403Messages `json:"messages"`
		Status   float32                  `json:"status"`
	}
}
type RequestAction400Messages string
type RequestAction401Messages string
type RequestAction403Messages string

// Status returns HTTPResponse.Status
func (r RequestActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RequestActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetryActionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Action An action tracks a request made to our job queue and its result.
		Action Action `json:"action"`
	}
	JSON400 *struct {
		Details  interface{}            `json:"details,omitempty"`
		Messages RetryAction400Messages `json:"messages"`
		Status   float32                `json:"status"`
	}
	JSON401 *struct {
		Details  interface{}            `json:"details,omitempty"`
		Messages RetryAction401Messages `json:"messages"`
		Status   float32                `json:"status"`
	}
}
type RetryAction400Messages string
type RetryAction401Messages string

// Status returns HTTPResponse.Status
func (r RetryActionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetryActionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchCompaniesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Companies []CompanyV2 `json:"companies"`

		// Meta Metadata about a paginated or billed response.
		Meta  PaginationMeta          `json:"meta"`
		Query []SegmentationCondition `json:"query"`
	}
	JSON401 *struct {
		Details  interface{}                `json:"details,omitempty"`
		Messages SearchCompanies401Messages `json:"messages"`
		Status   float32                    `json:"status"`
	}
	JSON403 *struct {
		Details  interface{}                `json:"details,omitempty"`
		Messages SearchCompanies403Messages `json:"messages"`
		Status   float32                    `json:"status"`
	}
}
type SearchCompanies401Messages string
type SearchCompanies403Messages string

// Status returns HTTPResponse.Status
func (r SearchCompaniesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchCompaniesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchCompaniesPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Companies []CompanyV2 `json:"companies"`

		// Meta Metadata about a paginated or billed response.
		Meta  PaginationMeta          `json:"meta"`
		Query []SegmentationCondition `json:"query"`
	}
	JSON401 *struct {
		Details  interface{}                    `json:"details,omitempty"`
		Messages SearchCompaniesPost401Messages `json:"messages"`
		Status   float32                        `json:"status"`
	}
	JSON403 *struct {
		Details  interface{}                    `json:"details,omitempty"`
		Messages SearchCompaniesPost403Messages `json:"messages"`
		Status   float32                        `json:"status"`
	}
}
type SearchCompaniesPost401Messages string
type SearchCompaniesPost403Messages string

// Status returns HTTPResponse.Status
func (r SearchCompaniesPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchCompaniesPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchCompaniesAnalyticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []struct {
			Count             float32 `json:"count"`
			Name              string  `json:"name"`
			PercentageOfAll   float32 `json:"percentageOfAll"`
			PercentageOfTotal float32 `json:"percentageOfTotal"`
		} `json:"data"`
		Meta struct {
			ListId          *float32                `json:"listId,omitempty"`
			Query           []SegmentationCondition `json:"query"`
			TotalDatapoints float32                 `json:"totalDatapoints"`
			TotalDocuments  float32                 `json:"totalDocuments"`
			TotalValues     float32                 `json:"totalValues"`
		} `json:"meta"`
	}
	JSON401 *struct {
		Details  interface{}                        `json:"details,omitempty"`
		Messages FetchCompaniesAnalytics401Messages `json:"messages"`
		Status   float32                            `json:"status"`
	}
}
type FetchCompaniesAnalytics401Messages string

// Status returns HTTPResponse.Status
func (r FetchCompaniesAnalyticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchCompaniesAnalyticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportCompaniesAnalyticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data []struct {
			Count             float32 `json:"count"`
			Name              string  `json:"name"`
			PercentageOfAll   float32 `json:"percentageOfAll"`
			PercentageOfTotal float32 `json:"percentageOfTotal"`
		} `json:"data"`
		Meta struct {
			ListId          *float32                `json:"listId,omitempty"`
			Query           []SegmentationCondition `json:"query"`
			TotalDatapoints float32                 `json:"totalDatapoints"`
			TotalDocuments  float32                 `json:"totalDocuments"`
			TotalValues     float32                 `json:"totalValues"`
		} `json:"meta"`
	}
	JSON401 *struct {
		Details  interface{}                         `json:"details,omitempty"`
		Messages ExportCompaniesAnalytics401Messages `json:"messages"`
		Status   float32                             `json:"status"`
	}
}
type ExportCompaniesAnalytics401Messages string

// Status returns HTTPResponse.Status
func (r ExportCompaniesAnalyticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportCompaniesAnalyticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchCompanyByEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Company Our complete schema for company data.
		Company *CompanyV2 `json:"company,omitempty"`
		Email   struct {
			Address  *string `json:"address,omitempty"`
			Domain   string  `json:"domain"`
			FullName struct {
				First  *string `json:"first,omitempty"`
				Last   *string `json:"last,omitempty"`
				Middle *string `json:"middle,omitempty"`
			} `json:"fullName"`
			IsDisposable  bool    `json:"isDisposable"`
			IsFree        bool    `json:"isFree"`
			IsSubaddress  bool    `json:"isSubaddress"`
			IsValid       bool    `json:"isValid"`
			IsValidFormat bool    `json:"isValidFormat"`
			Name          string  `json:"name"`
			Pattern       *string `json:"pattern,omitempty"`
		} `json:"email"`
		Meta *struct {
			FreeRequest *bool `json:"freeRequest,omitempty"`
		} `json:"meta,omitempty"`
	}
	JSON401 *struct {
		Details  interface{}                    `json:"details,omitempty"`
		Messages FetchCompanyByEmail401Messages `json:"messages"`
		Status   float32                        `json:"status"`
	}
	JSON403 *struct {
		Details  interface{}                    `json:"details,omitempty"`
		Messages FetchCompanyByEmail403Messages `json:"messages"`
		Status   float32                        `json:"status"`
	}
}
type FetchCompanyByEmail401Messages string
type FetchCompanyByEmail403Messages string

// Status returns HTTPResponse.Status
func (r FetchCompanyByEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchCompanyByEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchCompaniesByNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Companies []CompanyV2 `json:"companies"`

		// Meta Metadata about a paginated or billed response.
		Meta PaginationMeta `json:"meta"`
	}
	JSON400 *struct {
		Details  interface{}                      `json:"details,omitempty"`
		Messages SearchCompaniesByName400Messages `json:"messages"`
		Status   float32                          `json:"status"`
	}
	JSON401 *struct {
		Details  interface{}                      `json:"details,omitempty"`
		Messages SearchCompaniesByName401Messages `json:"messages"`
		Status   float32                          `json:"status"`
	}
	JSON403 *struct {
		Details  interface{}                      `json:"details,omitempty"`
		Messages SearchCompaniesByName403Messages `json:"messages"`
		Status   float32                          `json:"status"`
	}
}
type SearchCompaniesByName400Messages string
type SearchCompaniesByName401Messages string
type SearchCompaniesByName403Messages string

// Status returns HTTPResponse.Status
func (r SearchCompaniesByNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchCompaniesByNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchCompaniesByPromptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Companies []CompanyV2 `json:"companies"`

		// Meta Metadata about a paginated or billed response.
		Meta PaginationMeta `json:"meta"`
	}
	JSON401 *struct {
		Details  interface{}                        `json:"details,omitempty"`
		Messages SearchCompaniesByPrompt401Messages `json:"messages"`
		Status   float32                            `json:"status"`
	}
	JSON403 *struct {
		Details  interface{}                        `json:"details,omitempty"`
		Messages SearchCompaniesByPrompt403Messages `json:"messages"`
		Status   float32                            `json:"status"`
	}
}
type SearchCompaniesByPrompt401Messages string
type SearchCompaniesByPrompt403Messages string

// Status returns HTTPResponse.Status
func (r SearchCompaniesByPromptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchCompaniesByPromptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchCompanyBySocialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyV2
	JSON401      *struct {
		Details  interface{}                     `json:"details,omitempty"`
		Messages FetchCompanyBySocial401Messages `json:"messages"`
		Status   float32                         `json:"status"`
	}
	JSON403 *struct {
		Details  interface{}                     `json:"details,omitempty"`
		Messages FetchCompanyBySocial403Messages `json:"messages"`
		Status   float32                         `json:"status"`
	}
}
type FetchCompanyBySocial401Messages string
type FetchCompanyBySocial403Messages string

// Status returns HTTPResponse.Status
func (r FetchCompanyBySocialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchCompanyBySocialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CountCompaniesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count float32 `json:"count"`
	}
	JSON401 *struct {
		Details  interface{}               `json:"details,omitempty"`
		Messages CountCompanies401Messages `json:"messages"`
		Status   float32                   `json:"status"`
	}
	JSON403 *struct {
		Details  interface{}               `json:"details,omitempty"`
		Messages CountCompanies403Messages `json:"messages"`
		Status   float32                   `json:"status"`
	}
}
type CountCompanies401Messages string
type CountCompanies403Messages string

// Status returns HTTPResponse.Status
func (r CountCompaniesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CountCompaniesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CountCompaniesPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count float32 `json:"count"`
	}
	JSON401 *struct {
		Details  interface{}                   `json:"details,omitempty"`
		Messages CountCompaniesPost401Messages `json:"messages"`
		Status   float32                       `json:"status"`
	}
	JSON403 *struct {
		Details  interface{}                   `json:"details,omitempty"`
		Messages CountCompaniesPost403Messages `json:"messages"`
		Status   float32                       `json:"status"`
	}
}
type CountCompaniesPost401Messages string
type CountCompaniesPost403Messages string

// Status returns HTTPResponse.Status
func (r CountCompaniesPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CountCompaniesPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchSimilarCompaniesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Companies []CompanyV2 `json:"companies"`

		// Meta Metadata about a paginated or billed response.
		Meta PaginationMeta `json:"meta"`
	}
	JSON401 *struct {
		Details  interface{}                       `json:"details,omitempty"`
		Messages SearchSimilarCompanies401Messages `json:"messages"`
		Status   float32                           `json:"status"`
	}
	JSON403 *struct {
		Details  interface{}                       `json:"details,omitempty"`
		Messages SearchSimilarCompanies403Messages `json:"messages"`
		Status   float32                           `json:"status"`
	}
}
type SearchSimilarCompanies401Messages string
type SearchSimilarCompanies403Messages string

// Status returns HTTPResponse.Status
func (r SearchSimilarCompaniesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchSimilarCompaniesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchCompanyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyV2
	JSON401      *struct {
		Details  interface{}             `json:"details,omitempty"`
		Messages FetchCompany401Messages `json:"messages"`
		Status   float32                 `json:"status"`
	}
	JSON403 *struct {
		Details  interface{}             `json:"details,omitempty"`
		Messages FetchCompany403Messages `json:"messages"`
		Status   float32                 `json:"status"`
	}
	JSON404 *struct {
		Details  interface{}             `json:"details,omitempty"`
		Messages FetchCompany404Messages `json:"messages"`
		Status   float32                 `json:"status"`
	}
}
type FetchCompany401Messages string
type FetchCompany403Messages string
type FetchCompany404Messages string

// Status returns HTTPResponse.Status
func (r FetchCompanyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchCompanyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AskCompanyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Meta struct {
			Cost  float32                `json:"cost"`
			Model AskCompany200MetaModel `json:"model"`
			Score *float32               `json:"score,omitempty"`
		} `json:"meta"`

		// Prompt A natural language request made to the platform resolving to a specific action or search segment.
		Prompt struct {
			CompanyId *float32                   `json:"companyId,omitempty"`
			Context   AskCompany200PromptContext `json:"context"`
			CreatedAt *string                    `json:"createdAt,omitempty"`
			Data      *struct {
				All     *bool     `json:"all,omitempty"`
				Count   *float32  `json:"count,omitempty"`
				Domains *[]string `json:"domains,omitempty"`
				Explain *bool     `json:"explain,omitempty"`
				Fields  *[]struct {
					Description *string                           `json:"description,omitempty"`
					Key         string                            `json:"key"`
					Type        AskCompany200PromptDataFieldsType `json:"type"`
					Values      *[]string                         `json:"values,omitempty"`
				} `json:"fields,omitempty"`
				Model        *AskCompany200PromptDataModel `json:"model,omitempty"`
				Names        *[]string                     `json:"names,omitempty"`
				Query        *[]SegmentationCondition      `json:"query,omitempty"`
				Question     *string                       `json:"question,omitempty"`
				Segmentation *bool                         `json:"segmentation,omitempty"`
			} `json:"data,omitempty"`
			Feature   *AskCompany200PromptFeature `json:"feature,omitempty"`
			Hits      *float32                    `json:"hits,omitempty"`
			Id        float32                     `json:"id"`
			Model     *AskCompany200PromptModel   `json:"model,omitempty"`
			Prompt    string                      `json:"prompt"`
			PromptKey string                      `json:"promptKey"`
			Response  struct {
				Action *struct {
					Cost *float32 `json:"cost,omitempty"`
					Data *struct {
						// Answer An answer from a query made to the LLM.
						Answer  LLMAnswer `json:"answer"`
						Domains *[]string `json:"domains,omitempty"`
						Fields  []struct {
							Description *string                                         `json:"description,omitempty"`
							Key         string                                          `json:"key"`
							Type        AskCompany200PromptResponseActionDataFieldsType `json:"type"`
							Values      *[]string                                       `json:"values,omitempty"`
						} `json:"fields"`
						Job      AskCompany200PromptResponseActionDataJob `json:"job"`
						Query    *[]SegmentationCondition                 `json:"query,omitempty"`
						Question string                                   `json:"question"`
					} `json:"data,omitempty"`
					ListId   *float32                                `json:"listId,omitempty"`
					PromptId float32                                 `json:"promptId"`
					Status   AskCompany200PromptResponseActionStatus `json:"status"`
					Type     AskCompany200PromptResponseActionType   `json:"type"`
				} `json:"action,omitempty"`
				All    *bool `json:"all,omitempty"`
				Answer *struct {
					Explanation *string                `json:"explanation,omitempty"`
					Output      map[string]interface{} `json:"output"`
					Score       float32                `json:"score"`
				} `json:"answer,omitempty"`
				Cost   *float32 `json:"cost,omitempty"`
				Count  *float32 `json:"count,omitempty"`
				Domain *string  `json:"domain,omitempty"`
				Error  *string  `json:"error,omitempty"`
			} `json:"response"`
			UpdatedAt *string `json:"updatedAt,omitempty"`
		} `json:"prompt"`
	}
	JSON401 *struct {
		Details  interface{}           `json:"details,omitempty"`
		Messages AskCompany401Messages `json:"messages"`
		Status   float32               `json:"status"`
	}
	JSON403 *struct {
		Details  interface{}           `json:"details,omitempty"`
		Messages AskCompany403Messages `json:"messages"`
		Status   float32               `json:"status"`
	}
	JSON404 *struct {
		Details  interface{}           `json:"details,omitempty"`
		Messages AskCompany404Messages `json:"messages"`
		Status   float32               `json:"status"`
	}
}
type AskCompany200MetaModel string
type AskCompany200PromptContext string
type AskCompany200PromptDataFieldsType string
type AskCompany200PromptDataModel string
type AskCompany200PromptFeature string
type AskCompany200PromptModel string
type AskCompany200PromptResponseActionDataFieldsType string
type AskCompany200PromptResponseActionDataJob string
type AskCompany200PromptResponseActionStatus string
type AskCompany200PromptResponseActionType string
type AskCompany401Messages string
type AskCompany403Messages string
type AskCompany404Messages string

// Status returns HTTPResponse.Status
func (r AskCompanyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AskCompanyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchCompanyContextResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Context *struct {
			// Company Our complete schema for company data.
			Company *CompanyV2 `json:"company,omitempty"`
			Domain  string     `json:"domain"`

			// Ideated A collection of categorized facts about a company aggregated from multiple sources.
			Ideated *PageContentsIdeated `json:"ideated,omitempty"`
			Sources *[]PageContentsPage  `json:"sources,omitempty"`
		} `json:"context,omitempty"`
		Meta struct {
			Cost   float32 `json:"cost"`
			Tokens float32 `json:"tokens"`
		} `json:"meta"`
	}
	JSON401 *struct {
		Details  interface{}                    `json:"details,omitempty"`
		Messages FetchCompanyContext401Messages `json:"messages"`
		Status   float32                        `json:"status"`
	}
	JSON403 *struct {
		Details  interface{}                    `json:"details,omitempty"`
		Messages FetchCompanyContext403Messages `json:"messages"`
		Status   float32                        `json:"status"`
	}
	JSON404 *struct {
		Details  interface{}                    `json:"details,omitempty"`
		Messages FetchCompanyContext404Messages `json:"messages"`
		Status   float32                        `json:"status"`
	}
}
type FetchCompanyContext401Messages string
type FetchCompanyContext403Messages string
type FetchCompanyContext404Messages string

// Status returns HTTPResponse.Status
func (r FetchCompanyContextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchCompanyContextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchCompanyEmailPatternsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EmailPattern
	JSON401      *struct {
		Details  interface{}                          `json:"details,omitempty"`
		Messages FetchCompanyEmailPatterns401Messages `json:"messages"`
		Status   float32                              `json:"status"`
	}
	JSON403 *struct {
		Details  interface{}                          `json:"details,omitempty"`
		Messages FetchCompanyEmailPatterns403Messages `json:"messages"`
		Status   float32                              `json:"status"`
	}
	JSON404 *struct {
		Details  interface{}                          `json:"details,omitempty"`
		Messages FetchCompanyEmailPatterns404Messages `json:"messages"`
		Status   float32                              `json:"status"`
	}
}
type FetchCompanyEmailPatterns401Messages string
type FetchCompanyEmailPatterns403Messages string
type FetchCompanyEmailPatterns404Messages string

// Status returns HTTPResponse.Status
func (r FetchCompanyEmailPatternsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchCompanyEmailPatternsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchIndustriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Industries []struct {
			CompaniesCount *float32    `json:"companiesCount"`
			Name           string      `json:"name"`
			Slug           interface{} `json:"slug,omitempty"`
		} `json:"industries"`

		// Meta Metadata about a paginated or billed response.
		Meta PaginationMeta `json:"meta"`
	}
	JSON401 *struct {
		Details  interface{}                 `json:"details,omitempty"`
		Messages SearchIndustries401Messages `json:"messages"`
		Status   float32                     `json:"status"`
	}
}
type SearchIndustries401Messages string

// Status returns HTTPResponse.Status
func (r SearchIndustriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchIndustriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchIndustriesSimilarResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Industries []struct {
			CompaniesCount *float32    `json:"companiesCount"`
			Name           string      `json:"name"`
			Slug           interface{} `json:"slug,omitempty"`
		} `json:"industries"`

		// Meta Metadata about a paginated or billed response.
		Meta PaginationMeta `json:"meta"`
	}
	JSON401 *struct {
		Details  interface{}                        `json:"details,omitempty"`
		Messages SearchIndustriesSimilar401Messages `json:"messages"`
		Status   float32                            `json:"status"`
	}
}
type SearchIndustriesSimilar401Messages string

// Status returns HTTPResponse.Status
func (r SearchIndustriesSimilarResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchIndustriesSimilarResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnrichJobTitlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
	JSON401 *struct {
		Details  interface{}                `json:"details,omitempty"`
		Messages EnrichJobTitles401Messages `json:"messages"`
		Status   float32                    `json:"status"`
	}
}
type EnrichJobTitles2001 map[string]interface{}
type EnrichJobTitles401Messages string

// Status returns HTTPResponse.Status
func (r EnrichJobTitlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnrichJobTitlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchListsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Lists []List `json:"lists"`

		// Meta Metadata about a paginated or billed response.
		Meta PaginationMeta `json:"meta"`
	}
	JSON401 *struct {
		Details  interface{}           `json:"details,omitempty"`
		Messages FetchLists401Messages `json:"messages"`
		Status   float32               `json:"status"`
	}
}
type FetchLists401Messages string

// Status returns HTTPResponse.Status
func (r FetchListsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchListsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *List
	JSON401      *struct {
		Details  interface{}           `json:"details,omitempty"`
		Messages CreateList401Messages `json:"messages"`
		Status   float32               `json:"status"`
	}
}
type CreateList401Messages string

// Status returns HTTPResponse.Status
func (r CreateListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *List
	JSON400      *struct {
		Details  interface{}           `json:"details,omitempty"`
		Messages DeleteList400Messages `json:"messages"`
		Status   float32               `json:"status"`
	}
	JSON401 *struct {
		Details  interface{}           `json:"details,omitempty"`
		Messages DeleteList401Messages `json:"messages"`
		Status   float32               `json:"status"`
	}
	JSON403 *struct {
		Details  interface{}           `json:"details,omitempty"`
		Messages DeleteList403Messages `json:"messages"`
		Status   float32               `json:"status"`
	}
}
type DeleteList400Messages string
type DeleteList401Messages string
type DeleteList403Messages string

// Status returns HTTPResponse.Status
func (r DeleteListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *List
	JSON400      *struct {
		Details  interface{}           `json:"details,omitempty"`
		Messages UpdateList400Messages `json:"messages"`
		Status   float32               `json:"status"`
	}
	JSON401 *struct {
		Details  interface{}           `json:"details,omitempty"`
		Messages UpdateList401Messages `json:"messages"`
		Status   float32               `json:"status"`
	}
	JSON403 *struct {
		Details  interface{}           `json:"details,omitempty"`
		Messages UpdateList403Messages `json:"messages"`
		Status   float32               `json:"status"`
	}
}
type UpdateList400Messages string
type UpdateList401Messages string
type UpdateList403Messages string

// Status returns HTTPResponse.Status
func (r UpdateListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchCompaniesInListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Companies []CompanyV2 `json:"companies"`

		// Meta Metadata about a paginated or billed response.
		Meta  PaginationMeta           `json:"meta"`
		Query *[]SegmentationCondition `json:"query,omitempty"`
	}
	JSON400 *struct {
		Details  interface{}                     `json:"details,omitempty"`
		Messages FetchCompaniesInList400Messages `json:"messages"`
		Status   float32                         `json:"status"`
	}
	JSON401 *struct {
		Details  interface{}                     `json:"details,omitempty"`
		Messages FetchCompaniesInList401Messages `json:"messages"`
		Status   float32                         `json:"status"`
	}
	JSON403 *struct {
		Details  interface{}                     `json:"details,omitempty"`
		Messages FetchCompaniesInList403Messages `json:"messages"`
		Status   float32                         `json:"status"`
	}
}
type FetchCompaniesInList400Messages string
type FetchCompaniesInList401Messages string
type FetchCompaniesInList403Messages string

// Status returns HTTPResponse.Status
func (r FetchCompaniesInListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchCompaniesInListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchCompaniesInListPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Companies []CompanyV2 `json:"companies"`

		// Meta Metadata about a paginated or billed response.
		Meta  PaginationMeta           `json:"meta"`
		Query *[]SegmentationCondition `json:"query,omitempty"`
	}
	JSON400 *struct {
		Details  interface{}                         `json:"details,omitempty"`
		Messages FetchCompaniesInListPost400Messages `json:"messages"`
		Status   float32                             `json:"status"`
	}
	JSON401 *struct {
		Details  interface{}                         `json:"details,omitempty"`
		Messages FetchCompaniesInListPost401Messages `json:"messages"`
		Status   float32                             `json:"status"`
	}
	JSON403 *struct {
		Details  interface{}                         `json:"details,omitempty"`
		Messages FetchCompaniesInListPost403Messages `json:"messages"`
		Status   float32                             `json:"status"`
	}
}
type FetchCompaniesInListPost400Messages string
type FetchCompaniesInListPost401Messages string
type FetchCompaniesInListPost403Messages string

// Status returns HTTPResponse.Status
func (r FetchCompaniesInListPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchCompaniesInListPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToggleCompaniesInListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *List
	JSON400      *struct {
		Details  interface{}                      `json:"details,omitempty"`
		Messages ToggleCompaniesInList400Messages `json:"messages"`
		Status   float32                          `json:"status"`
	}
	JSON401 *struct {
		Details  interface{}                      `json:"details,omitempty"`
		Messages ToggleCompaniesInList401Messages `json:"messages"`
		Status   float32                          `json:"status"`
	}
	JSON403 *struct {
		Details  interface{}                      `json:"details,omitempty"`
		Messages ToggleCompaniesInList403Messages `json:"messages"`
		Status   float32                          `json:"status"`
	}
	JSON404 *struct {
		Details  interface{}                      `json:"details,omitempty"`
		Messages ToggleCompaniesInList404Messages `json:"messages"`
		Status   float32                          `json:"status"`
	}
}
type ToggleCompaniesInList400Messages string
type ToggleCompaniesInList401Messages string
type ToggleCompaniesInList403Messages string
type ToggleCompaniesInList404Messages string

// Status returns HTTPResponse.Status
func (r ToggleCompaniesInListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToggleCompaniesInListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchCompanyInListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompanyV2
	JSON400      *struct {
		Details  interface{}                   `json:"details,omitempty"`
		Messages FetchCompanyInList400Messages `json:"messages"`
		Status   float32                       `json:"status"`
	}
	JSON401 *struct {
		Details  interface{}                   `json:"details,omitempty"`
		Messages FetchCompanyInList401Messages `json:"messages"`
		Status   float32                       `json:"status"`
	}
	JSON403 *struct {
		Details  interface{}                   `json:"details,omitempty"`
		Messages FetchCompanyInList403Messages `json:"messages"`
		Status   float32                       `json:"status"`
	}
	JSON404 *struct {
		Details  interface{}                   `json:"details,omitempty"`
		Messages FetchCompanyInList404Messages `json:"messages"`
		Status   float32                       `json:"status"`
	}
}
type FetchCompanyInList400Messages string
type FetchCompanyInList401Messages string
type FetchCompanyInList403Messages string
type FetchCompanyInList404Messages string

// Status returns HTTPResponse.Status
func (r FetchCompanyInListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchCompanyInListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchCitiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Cities []NominatimCity `json:"cities"`

		// Meta Metadata about a paginated or billed response.
		Meta PaginationMeta `json:"meta"`
	}
	JSON401 *struct {
		Details  interface{}             `json:"details,omitempty"`
		Messages SearchCities401Messages `json:"messages"`
		Status   float32                 `json:"status"`
	}
}
type SearchCities401Messages string

// Status returns HTTPResponse.Status
func (r SearchCitiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchCitiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchContinentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Continents []NominatimContinent `json:"continents"`

		// Meta Metadata about a paginated or billed response.
		Meta PaginationMeta `json:"meta"`
	}
	JSON401 *struct {
		Details  interface{}                 `json:"details,omitempty"`
		Messages SearchContinents401Messages `json:"messages"`
		Status   float32                     `json:"status"`
	}
}
type SearchContinents401Messages string

// Status returns HTTPResponse.Status
func (r SearchContinentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchContinentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchCountiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Counties []NominatimCounty `json:"counties"`

		// Meta Metadata about a paginated or billed response.
		Meta PaginationMeta `json:"meta"`
	}
	JSON401 *struct {
		Details  interface{}               `json:"details,omitempty"`
		Messages SearchCounties401Messages `json:"messages"`
		Status   float32                   `json:"status"`
	}
}
type SearchCounties401Messages string

// Status returns HTTPResponse.Status
func (r SearchCountiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchCountiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchCountriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Countries []NominatimCountry `json:"countries"`

		// Meta Metadata about a paginated or billed response.
		Meta PaginationMeta `json:"meta"`
	}
	JSON401 *struct {
		Details  interface{}                `json:"details,omitempty"`
		Messages SearchCountries401Messages `json:"messages"`
		Status   float32                    `json:"status"`
	}
}
type SearchCountries401Messages string

// Status returns HTTPResponse.Status
func (r SearchCountriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchCountriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchStatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Meta Metadata about a paginated or billed response.
		Meta   PaginationMeta   `json:"meta"`
		States []NominatimState `json:"states"`
	}
	JSON401 *struct {
		Details  interface{}             `json:"details,omitempty"`
		Messages SearchStates401Messages `json:"messages"`
		Status   float32                 `json:"status"`
	}
}
type SearchStates401Messages string

// Status returns HTTPResponse.Status
func (r SearchStatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchStatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchOpenApiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r FetchOpenApiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchOpenApiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchPromptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Meta Metadata about a paginated or billed response.
		Meta    PaginationMeta `json:"meta"`
		Prompts []Prompt       `json:"prompts"`
	}
	JSON401 *struct {
		Details  interface{}             `json:"details,omitempty"`
		Messages FetchPrompts401Messages `json:"messages"`
		Status   float32                 `json:"status"`
	}
}
type FetchPrompts401Messages string

// Status returns HTTPResponse.Status
func (r FetchPromptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchPromptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ProductPromptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Meta Metadata about a paginated or billed response.
		Meta PaginationMeta `json:"meta"`

		// Prompt A natural language request made to the platform resolving to a specific action or search segment.
		Prompt   Prompt                     `json:"prompt"`
		Response ProductPrompt_200_Response `json:"response"`
	}
	JSON401 *struct {
		Details  interface{}              `json:"details,omitempty"`
		Messages ProductPrompt401Messages `json:"messages"`
		Status   float32                  `json:"status"`
	}
	JSON403 *struct {
		Details  interface{}              `json:"details,omitempty"`
		Messages ProductPrompt403Messages `json:"messages"`
		Status   float32                  `json:"status"`
	}
}
type ProductPrompt200Response0 struct {
	Action *struct {
		Cost *float32 `json:"cost,omitempty"`
		Data *struct {
			// Answer An answer from a query made to the LLM.
			Answer  LLMAnswer `json:"answer"`
			Domains *[]string `json:"domains,omitempty"`
			Fields  []struct {
				Description *string                                       `json:"description,omitempty"`
				Key         string                                        `json:"key"`
				Type        ProductPrompt200Response0ActionDataFieldsType `json:"type"`
				Values      *[]string                                     `json:"values,omitempty"`
			} `json:"fields"`
			Job      ProductPrompt200Response0ActionDataJob `json:"job"`
			Query    *[]SegmentationCondition               `json:"query,omitempty"`
			Question string                                 `json:"question"`
		} `json:"data,omitempty"`
		ListId   *float32                              `json:"listId,omitempty"`
		PromptId float32                               `json:"promptId"`
		Status   ProductPrompt200Response0ActionStatus `json:"status"`
		Type     ProductPrompt200Response0ActionType   `json:"type"`
	} `json:"action,omitempty"`
	All    *bool `json:"all,omitempty"`
	Answer *struct {
		Explanation *string                `json:"explanation,omitempty"`
		Output      map[string]interface{} `json:"output"`
		Score       float32                `json:"score"`
	} `json:"answer,omitempty"`
	Cost   *float32 `json:"cost,omitempty"`
	Count  *float32 `json:"count,omitempty"`
	Domain *string  `json:"domain,omitempty"`
	Error  *string  `json:"error,omitempty"`
}
type ProductPrompt200Response0ActionDataFieldsType string
type ProductPrompt200Response0ActionDataJob string
type ProductPrompt200Response0ActionStatus string
type ProductPrompt200Response0ActionType string
type ProductPrompt200Response1 struct {
	Action *struct {
		Cost *ProductPrompt200Response1ActionCost `json:"cost,omitempty"`
		Data *struct {
			Domains *[]string                              `json:"domains,omitempty"`
			Job     ProductPrompt200Response1ActionDataJob `json:"job"`
			Query   *[]SegmentationCondition               `json:"query,omitempty"`
		} `json:"data,omitempty"`
		ListId   *float32                              `json:"listId,omitempty"`
		PromptId float32                               `json:"promptId"`
		Status   ProductPrompt200Response1ActionStatus `json:"status"`
		Type     ProductPrompt200Response1ActionType   `json:"type"`
	} `json:"action,omitempty"`
	All    *bool    `json:"all,omitempty"`
	Cost   *float32 `json:"cost,omitempty"`
	Count  *float32 `json:"count,omitempty"`
	Domain *string  `json:"domain,omitempty"`
	Error  *string  `json:"error,omitempty"`
}
type ProductPrompt200Response1ActionCost float32
type ProductPrompt200Response1ActionDataJob string
type ProductPrompt200Response1ActionStatus string
type ProductPrompt200Response1ActionType string
type ProductPrompt200Response2 struct {
	Action *struct {
		Cost *float32 `json:"cost,omitempty"`
		Data struct {
			Domains *[]string                              `json:"domains,omitempty"`
			Job     ProductPrompt200Response2ActionDataJob `json:"job"`
			Query   *[]SegmentationCondition               `json:"query,omitempty"`
		} `json:"data"`
		ListId   *float32                              `json:"listId,omitempty"`
		PromptId float32                               `json:"promptId"`
		Status   ProductPrompt200Response2ActionStatus `json:"status"`
		Type     ProductPrompt200Response2ActionType   `json:"type"`
	} `json:"action,omitempty"`
	All    *bool    `json:"all,omitempty"`
	Cost   *float32 `json:"cost,omitempty"`
	Count  *float32 `json:"count,omitempty"`
	Domain *string  `json:"domain,omitempty"`
	Error  *string  `json:"error,omitempty"`
}
type ProductPrompt200Response2ActionDataJob string
type ProductPrompt200Response2ActionStatus string
type ProductPrompt200Response2ActionType string
type ProductPrompt200Response3 struct {
	All     *bool                    `json:"all,omitempty"`
	Cost    *float32                 `json:"cost,omitempty"`
	Count   *float32                 `json:"count,omitempty"`
	Domain  *string                  `json:"domain,omitempty"`
	Domains *[]string                `json:"domains,omitempty"`
	Error   *string                  `json:"error,omitempty"`
	ListId  *float32                 `json:"listId,omitempty"`
	Query   *[]SegmentationCondition `json:"query,omitempty"`
}
type ProductPrompt200Response4 struct {
	All     *bool     `json:"all,omitempty"`
	Cost    *float32  `json:"cost,omitempty"`
	Count   *float32  `json:"count,omitempty"`
	Domain  *string   `json:"domain,omitempty"`
	Domains *[]string `json:"domains,omitempty"`
	Error   *string   `json:"error,omitempty"`
}
type ProductPrompt_200_Response struct {
	union json.RawMessage
}
type ProductPrompt401Messages string
type ProductPrompt403Messages string

// Status returns HTTPResponse.Status
func (r ProductPromptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ProductPromptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PromptToSegmentationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Meta Metadata about a paginated or billed response.
		Meta PaginationMeta `json:"meta"`

		// Prompt A natural language request made to the platform resolving to a specific action or search segment.
		Prompt   Prompt `json:"prompt"`
		Response struct {
			All     *bool                    `json:"all,omitempty"`
			Cost    *float32                 `json:"cost,omitempty"`
			Count   *float32                 `json:"count,omitempty"`
			Domain  *string                  `json:"domain,omitempty"`
			Domains *[]string                `json:"domains,omitempty"`
			Error   *string                  `json:"error,omitempty"`
			ListId  *float32                 `json:"listId,omitempty"`
			Query   *[]SegmentationCondition `json:"query,omitempty"`
		} `json:"response"`
	}
	JSON401 *struct {
		Details  interface{}                     `json:"details,omitempty"`
		Messages PromptToSegmentation401Messages `json:"messages"`
		Status   float32                         `json:"status"`
	}
}
type PromptToSegmentation401Messages string

// Status returns HTTPResponse.Status
func (r PromptToSegmentationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PromptToSegmentationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePromptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Prompt
	JSON400      *struct {
		Details  interface{}             `json:"details,omitempty"`
		Messages DeletePrompt400Messages `json:"messages"`
		Status   float32                 `json:"status"`
	}
	JSON401 *struct {
		Details  interface{}             `json:"details,omitempty"`
		Messages DeletePrompt401Messages `json:"messages"`
		Status   float32                 `json:"status"`
	}
	JSON403 *struct {
		Details  interface{}             `json:"details,omitempty"`
		Messages DeletePrompt403Messages `json:"messages"`
		Status   float32                 `json:"status"`
	}
}
type DeletePrompt400Messages string
type DeletePrompt401Messages string
type DeletePrompt403Messages string

// Status returns HTTPResponse.Status
func (r DeletePromptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePromptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Team
	JSON401      *struct {
		Details  interface{}          `json:"details,omitempty"`
		Messages FetchTeam401Messages `json:"messages"`
		Status   float32              `json:"status"`
	}
	JSON403 *struct {
		Details  interface{}          `json:"details,omitempty"`
		Messages FetchTeam403Messages `json:"messages"`
		Status   float32              `json:"status"`
	}
	JSON404 *struct {
		Details  interface{}          `json:"details,omitempty"`
		Messages FetchTeam404Messages `json:"messages"`
		Status   float32              `json:"status"`
	}
}
type FetchTeam401Messages string
type FetchTeam403Messages string
type FetchTeam404Messages string

// Status returns HTTPResponse.Status
func (r FetchTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Team
	JSON401      *struct {
		Details  interface{}           `json:"details,omitempty"`
		Messages UpdateTeam401Messages `json:"messages"`
		Status   float32               `json:"status"`
	}
	JSON403 *struct {
		Details  interface{}           `json:"details,omitempty"`
		Messages UpdateTeam403Messages `json:"messages"`
		Status   float32               `json:"status"`
	}
	JSON404 *struct {
		Details  interface{}           `json:"details,omitempty"`
		Messages UpdateTeam404Messages `json:"messages"`
		Status   float32               `json:"status"`
	}
}
type UpdateTeam401Messages string
type UpdateTeam403Messages string
type UpdateTeam404Messages string

// Status returns HTTPResponse.Status
func (r UpdateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchTechnologiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Meta Metadata about a paginated or billed response.
		Meta         PaginationMeta `json:"meta"`
		Technologies []Technology   `json:"technologies"`
	}
	JSON401 *struct {
		Details  interface{}                   `json:"details,omitempty"`
		Messages SearchTechnologies401Messages `json:"messages"`
		Status   float32                       `json:"status"`
	}
}
type SearchTechnologies401Messages string

// Status returns HTTPResponse.Status
func (r SearchTechnologiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchTechnologiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON401      *struct {
		Details  interface{}          `json:"details,omitempty"`
		Messages FetchUser401Messages `json:"messages"`
		Status   float32              `json:"status"`
	}
}
type FetchUser401Messages string

// Status returns HTTPResponse.Status
func (r FetchUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// FetchApiHealthWithResponse request returning *FetchApiHealthResponse
func (c *ClientWithResponses) FetchApiHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FetchApiHealthResponse, error) {
	rsp, err := c.FetchApiHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchApiHealthResponse(rsp)
}

// FetchActionsWithResponse request returning *FetchActionsResponse
func (c *ClientWithResponses) FetchActionsWithResponse(ctx context.Context, params *FetchActionsParams, reqEditors ...RequestEditorFn) (*FetchActionsResponse, error) {
	rsp, err := c.FetchActions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchActionsResponse(rsp)
}

// RequestActionWithBodyWithResponse request with arbitrary body returning *RequestActionResponse
func (c *ClientWithResponses) RequestActionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RequestActionResponse, error) {
	rsp, err := c.RequestActionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestActionResponse(rsp)
}

func (c *ClientWithResponses) RequestActionWithResponse(ctx context.Context, body RequestActionJSONRequestBody, reqEditors ...RequestEditorFn) (*RequestActionResponse, error) {
	rsp, err := c.RequestAction(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRequestActionResponse(rsp)
}

// RetryActionWithBodyWithResponse request with arbitrary body returning *RetryActionResponse
func (c *ClientWithResponses) RetryActionWithBodyWithResponse(ctx context.Context, actionId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RetryActionResponse, error) {
	rsp, err := c.RetryActionWithBody(ctx, actionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetryActionResponse(rsp)
}

func (c *ClientWithResponses) RetryActionWithResponse(ctx context.Context, actionId float32, body RetryActionJSONRequestBody, reqEditors ...RequestEditorFn) (*RetryActionResponse, error) {
	rsp, err := c.RetryAction(ctx, actionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRetryActionResponse(rsp)
}

// SearchCompaniesWithResponse request returning *SearchCompaniesResponse
func (c *ClientWithResponses) SearchCompaniesWithResponse(ctx context.Context, params *SearchCompaniesParams, reqEditors ...RequestEditorFn) (*SearchCompaniesResponse, error) {
	rsp, err := c.SearchCompanies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchCompaniesResponse(rsp)
}

// SearchCompaniesPostWithBodyWithResponse request with arbitrary body returning *SearchCompaniesPostResponse
func (c *ClientWithResponses) SearchCompaniesPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchCompaniesPostResponse, error) {
	rsp, err := c.SearchCompaniesPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchCompaniesPostResponse(rsp)
}

func (c *ClientWithResponses) SearchCompaniesPostWithResponse(ctx context.Context, body SearchCompaniesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchCompaniesPostResponse, error) {
	rsp, err := c.SearchCompaniesPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchCompaniesPostResponse(rsp)
}

// FetchCompaniesAnalyticsWithResponse request returning *FetchCompaniesAnalyticsResponse
func (c *ClientWithResponses) FetchCompaniesAnalyticsWithResponse(ctx context.Context, params *FetchCompaniesAnalyticsParams, reqEditors ...RequestEditorFn) (*FetchCompaniesAnalyticsResponse, error) {
	rsp, err := c.FetchCompaniesAnalytics(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchCompaniesAnalyticsResponse(rsp)
}

// ExportCompaniesAnalyticsWithBodyWithResponse request with arbitrary body returning *ExportCompaniesAnalyticsResponse
func (c *ClientWithResponses) ExportCompaniesAnalyticsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExportCompaniesAnalyticsResponse, error) {
	rsp, err := c.ExportCompaniesAnalyticsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportCompaniesAnalyticsResponse(rsp)
}

func (c *ClientWithResponses) ExportCompaniesAnalyticsWithResponse(ctx context.Context, body ExportCompaniesAnalyticsJSONRequestBody, reqEditors ...RequestEditorFn) (*ExportCompaniesAnalyticsResponse, error) {
	rsp, err := c.ExportCompaniesAnalytics(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportCompaniesAnalyticsResponse(rsp)
}

// FetchCompanyByEmailWithResponse request returning *FetchCompanyByEmailResponse
func (c *ClientWithResponses) FetchCompanyByEmailWithResponse(ctx context.Context, params *FetchCompanyByEmailParams, reqEditors ...RequestEditorFn) (*FetchCompanyByEmailResponse, error) {
	rsp, err := c.FetchCompanyByEmail(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchCompanyByEmailResponse(rsp)
}

// SearchCompaniesByNameWithResponse request returning *SearchCompaniesByNameResponse
func (c *ClientWithResponses) SearchCompaniesByNameWithResponse(ctx context.Context, params *SearchCompaniesByNameParams, reqEditors ...RequestEditorFn) (*SearchCompaniesByNameResponse, error) {
	rsp, err := c.SearchCompaniesByName(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchCompaniesByNameResponse(rsp)
}

// SearchCompaniesByPromptWithResponse request returning *SearchCompaniesByPromptResponse
func (c *ClientWithResponses) SearchCompaniesByPromptWithResponse(ctx context.Context, params *SearchCompaniesByPromptParams, reqEditors ...RequestEditorFn) (*SearchCompaniesByPromptResponse, error) {
	rsp, err := c.SearchCompaniesByPrompt(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchCompaniesByPromptResponse(rsp)
}

// FetchCompanyBySocialWithResponse request returning *FetchCompanyBySocialResponse
func (c *ClientWithResponses) FetchCompanyBySocialWithResponse(ctx context.Context, params *FetchCompanyBySocialParams, reqEditors ...RequestEditorFn) (*FetchCompanyBySocialResponse, error) {
	rsp, err := c.FetchCompanyBySocial(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchCompanyBySocialResponse(rsp)
}

// CountCompaniesWithResponse request returning *CountCompaniesResponse
func (c *ClientWithResponses) CountCompaniesWithResponse(ctx context.Context, params *CountCompaniesParams, reqEditors ...RequestEditorFn) (*CountCompaniesResponse, error) {
	rsp, err := c.CountCompanies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCountCompaniesResponse(rsp)
}

// CountCompaniesPostWithBodyWithResponse request with arbitrary body returning *CountCompaniesPostResponse
func (c *ClientWithResponses) CountCompaniesPostWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CountCompaniesPostResponse, error) {
	rsp, err := c.CountCompaniesPostWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCountCompaniesPostResponse(rsp)
}

func (c *ClientWithResponses) CountCompaniesPostWithResponse(ctx context.Context, body CountCompaniesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CountCompaniesPostResponse, error) {
	rsp, err := c.CountCompaniesPost(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCountCompaniesPostResponse(rsp)
}

// SearchSimilarCompaniesWithResponse request returning *SearchSimilarCompaniesResponse
func (c *ClientWithResponses) SearchSimilarCompaniesWithResponse(ctx context.Context, params *SearchSimilarCompaniesParams, reqEditors ...RequestEditorFn) (*SearchSimilarCompaniesResponse, error) {
	rsp, err := c.SearchSimilarCompanies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchSimilarCompaniesResponse(rsp)
}

// FetchCompanyWithResponse request returning *FetchCompanyResponse
func (c *ClientWithResponses) FetchCompanyWithResponse(ctx context.Context, domain string, params *FetchCompanyParams, reqEditors ...RequestEditorFn) (*FetchCompanyResponse, error) {
	rsp, err := c.FetchCompany(ctx, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchCompanyResponse(rsp)
}

// AskCompanyWithBodyWithResponse request with arbitrary body returning *AskCompanyResponse
func (c *ClientWithResponses) AskCompanyWithBodyWithResponse(ctx context.Context, domain string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AskCompanyResponse, error) {
	rsp, err := c.AskCompanyWithBody(ctx, domain, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAskCompanyResponse(rsp)
}

func (c *ClientWithResponses) AskCompanyWithResponse(ctx context.Context, domain string, body AskCompanyJSONRequestBody, reqEditors ...RequestEditorFn) (*AskCompanyResponse, error) {
	rsp, err := c.AskCompany(ctx, domain, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAskCompanyResponse(rsp)
}

// FetchCompanyContextWithResponse request returning *FetchCompanyContextResponse
func (c *ClientWithResponses) FetchCompanyContextWithResponse(ctx context.Context, domain string, reqEditors ...RequestEditorFn) (*FetchCompanyContextResponse, error) {
	rsp, err := c.FetchCompanyContext(ctx, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchCompanyContextResponse(rsp)
}

// FetchCompanyEmailPatternsWithResponse request returning *FetchCompanyEmailPatternsResponse
func (c *ClientWithResponses) FetchCompanyEmailPatternsWithResponse(ctx context.Context, domain string, params *FetchCompanyEmailPatternsParams, reqEditors ...RequestEditorFn) (*FetchCompanyEmailPatternsResponse, error) {
	rsp, err := c.FetchCompanyEmailPatterns(ctx, domain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchCompanyEmailPatternsResponse(rsp)
}

// SearchIndustriesWithResponse request returning *SearchIndustriesResponse
func (c *ClientWithResponses) SearchIndustriesWithResponse(ctx context.Context, params *SearchIndustriesParams, reqEditors ...RequestEditorFn) (*SearchIndustriesResponse, error) {
	rsp, err := c.SearchIndustries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchIndustriesResponse(rsp)
}

// SearchIndustriesSimilarWithResponse request returning *SearchIndustriesSimilarResponse
func (c *ClientWithResponses) SearchIndustriesSimilarWithResponse(ctx context.Context, params *SearchIndustriesSimilarParams, reqEditors ...RequestEditorFn) (*SearchIndustriesSimilarResponse, error) {
	rsp, err := c.SearchIndustriesSimilar(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchIndustriesSimilarResponse(rsp)
}

// EnrichJobTitlesWithResponse request returning *EnrichJobTitlesResponse
func (c *ClientWithResponses) EnrichJobTitlesWithResponse(ctx context.Context, params *EnrichJobTitlesParams, reqEditors ...RequestEditorFn) (*EnrichJobTitlesResponse, error) {
	rsp, err := c.EnrichJobTitles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnrichJobTitlesResponse(rsp)
}

// FetchListsWithResponse request returning *FetchListsResponse
func (c *ClientWithResponses) FetchListsWithResponse(ctx context.Context, params *FetchListsParams, reqEditors ...RequestEditorFn) (*FetchListsResponse, error) {
	rsp, err := c.FetchLists(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchListsResponse(rsp)
}

// CreateListWithBodyWithResponse request with arbitrary body returning *CreateListResponse
func (c *ClientWithResponses) CreateListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateListResponse, error) {
	rsp, err := c.CreateListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateListResponse(rsp)
}

func (c *ClientWithResponses) CreateListWithResponse(ctx context.Context, body CreateListJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateListResponse, error) {
	rsp, err := c.CreateList(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateListResponse(rsp)
}

// DeleteListWithResponse request returning *DeleteListResponse
func (c *ClientWithResponses) DeleteListWithResponse(ctx context.Context, listId float32, reqEditors ...RequestEditorFn) (*DeleteListResponse, error) {
	rsp, err := c.DeleteList(ctx, listId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteListResponse(rsp)
}

// UpdateListWithBodyWithResponse request with arbitrary body returning *UpdateListResponse
func (c *ClientWithResponses) UpdateListWithBodyWithResponse(ctx context.Context, listId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateListResponse, error) {
	rsp, err := c.UpdateListWithBody(ctx, listId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateListResponse(rsp)
}

func (c *ClientWithResponses) UpdateListWithResponse(ctx context.Context, listId float32, body UpdateListJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateListResponse, error) {
	rsp, err := c.UpdateList(ctx, listId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateListResponse(rsp)
}

// FetchCompaniesInListWithResponse request returning *FetchCompaniesInListResponse
func (c *ClientWithResponses) FetchCompaniesInListWithResponse(ctx context.Context, listId float32, params *FetchCompaniesInListParams, reqEditors ...RequestEditorFn) (*FetchCompaniesInListResponse, error) {
	rsp, err := c.FetchCompaniesInList(ctx, listId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchCompaniesInListResponse(rsp)
}

// FetchCompaniesInListPostWithBodyWithResponse request with arbitrary body returning *FetchCompaniesInListPostResponse
func (c *ClientWithResponses) FetchCompaniesInListPostWithBodyWithResponse(ctx context.Context, listId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*FetchCompaniesInListPostResponse, error) {
	rsp, err := c.FetchCompaniesInListPostWithBody(ctx, listId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchCompaniesInListPostResponse(rsp)
}

func (c *ClientWithResponses) FetchCompaniesInListPostWithResponse(ctx context.Context, listId float32, body FetchCompaniesInListPostJSONRequestBody, reqEditors ...RequestEditorFn) (*FetchCompaniesInListPostResponse, error) {
	rsp, err := c.FetchCompaniesInListPost(ctx, listId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchCompaniesInListPostResponse(rsp)
}

// ToggleCompaniesInListWithBodyWithResponse request with arbitrary body returning *ToggleCompaniesInListResponse
func (c *ClientWithResponses) ToggleCompaniesInListWithBodyWithResponse(ctx context.Context, listId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToggleCompaniesInListResponse, error) {
	rsp, err := c.ToggleCompaniesInListWithBody(ctx, listId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToggleCompaniesInListResponse(rsp)
}

func (c *ClientWithResponses) ToggleCompaniesInListWithResponse(ctx context.Context, listId float32, body ToggleCompaniesInListJSONRequestBody, reqEditors ...RequestEditorFn) (*ToggleCompaniesInListResponse, error) {
	rsp, err := c.ToggleCompaniesInList(ctx, listId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToggleCompaniesInListResponse(rsp)
}

// FetchCompanyInListWithResponse request returning *FetchCompanyInListResponse
func (c *ClientWithResponses) FetchCompanyInListWithResponse(ctx context.Context, listId float32, domain string, reqEditors ...RequestEditorFn) (*FetchCompanyInListResponse, error) {
	rsp, err := c.FetchCompanyInList(ctx, listId, domain, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchCompanyInListResponse(rsp)
}

// SearchCitiesWithResponse request returning *SearchCitiesResponse
func (c *ClientWithResponses) SearchCitiesWithResponse(ctx context.Context, params *SearchCitiesParams, reqEditors ...RequestEditorFn) (*SearchCitiesResponse, error) {
	rsp, err := c.SearchCities(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchCitiesResponse(rsp)
}

// SearchContinentsWithResponse request returning *SearchContinentsResponse
func (c *ClientWithResponses) SearchContinentsWithResponse(ctx context.Context, params *SearchContinentsParams, reqEditors ...RequestEditorFn) (*SearchContinentsResponse, error) {
	rsp, err := c.SearchContinents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchContinentsResponse(rsp)
}

// SearchCountiesWithResponse request returning *SearchCountiesResponse
func (c *ClientWithResponses) SearchCountiesWithResponse(ctx context.Context, params *SearchCountiesParams, reqEditors ...RequestEditorFn) (*SearchCountiesResponse, error) {
	rsp, err := c.SearchCounties(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchCountiesResponse(rsp)
}

// SearchCountriesWithResponse request returning *SearchCountriesResponse
func (c *ClientWithResponses) SearchCountriesWithResponse(ctx context.Context, params *SearchCountriesParams, reqEditors ...RequestEditorFn) (*SearchCountriesResponse, error) {
	rsp, err := c.SearchCountries(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchCountriesResponse(rsp)
}

// SearchStatesWithResponse request returning *SearchStatesResponse
func (c *ClientWithResponses) SearchStatesWithResponse(ctx context.Context, params *SearchStatesParams, reqEditors ...RequestEditorFn) (*SearchStatesResponse, error) {
	rsp, err := c.SearchStates(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchStatesResponse(rsp)
}

// FetchOpenApiWithResponse request returning *FetchOpenApiResponse
func (c *ClientWithResponses) FetchOpenApiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FetchOpenApiResponse, error) {
	rsp, err := c.FetchOpenApi(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchOpenApiResponse(rsp)
}

// FetchPromptsWithResponse request returning *FetchPromptsResponse
func (c *ClientWithResponses) FetchPromptsWithResponse(ctx context.Context, params *FetchPromptsParams, reqEditors ...RequestEditorFn) (*FetchPromptsResponse, error) {
	rsp, err := c.FetchPrompts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchPromptsResponse(rsp)
}

// ProductPromptWithBodyWithResponse request with arbitrary body returning *ProductPromptResponse
func (c *ClientWithResponses) ProductPromptWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ProductPromptResponse, error) {
	rsp, err := c.ProductPromptWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductPromptResponse(rsp)
}

func (c *ClientWithResponses) ProductPromptWithResponse(ctx context.Context, body ProductPromptJSONRequestBody, reqEditors ...RequestEditorFn) (*ProductPromptResponse, error) {
	rsp, err := c.ProductPrompt(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseProductPromptResponse(rsp)
}

// PromptToSegmentationWithBodyWithResponse request with arbitrary body returning *PromptToSegmentationResponse
func (c *ClientWithResponses) PromptToSegmentationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PromptToSegmentationResponse, error) {
	rsp, err := c.PromptToSegmentationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePromptToSegmentationResponse(rsp)
}

func (c *ClientWithResponses) PromptToSegmentationWithResponse(ctx context.Context, body PromptToSegmentationJSONRequestBody, reqEditors ...RequestEditorFn) (*PromptToSegmentationResponse, error) {
	rsp, err := c.PromptToSegmentation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePromptToSegmentationResponse(rsp)
}

// DeletePromptWithResponse request returning *DeletePromptResponse
func (c *ClientWithResponses) DeletePromptWithResponse(ctx context.Context, promptId float32, reqEditors ...RequestEditorFn) (*DeletePromptResponse, error) {
	rsp, err := c.DeletePrompt(ctx, promptId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePromptResponse(rsp)
}

// FetchTeamWithResponse request returning *FetchTeamResponse
func (c *ClientWithResponses) FetchTeamWithResponse(ctx context.Context, teamId float32, reqEditors ...RequestEditorFn) (*FetchTeamResponse, error) {
	rsp, err := c.FetchTeam(ctx, teamId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchTeamResponse(rsp)
}

// UpdateTeamWithBodyWithResponse request with arbitrary body returning *UpdateTeamResponse
func (c *ClientWithResponses) UpdateTeamWithBodyWithResponse(ctx context.Context, teamId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error) {
	rsp, err := c.UpdateTeamWithBody(ctx, teamId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamResponse(rsp)
}

func (c *ClientWithResponses) UpdateTeamWithResponse(ctx context.Context, teamId float32, body UpdateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error) {
	rsp, err := c.UpdateTeam(ctx, teamId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamResponse(rsp)
}

// SearchTechnologiesWithResponse request returning *SearchTechnologiesResponse
func (c *ClientWithResponses) SearchTechnologiesWithResponse(ctx context.Context, params *SearchTechnologiesParams, reqEditors ...RequestEditorFn) (*SearchTechnologiesResponse, error) {
	rsp, err := c.SearchTechnologies(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchTechnologiesResponse(rsp)
}

// FetchUserWithResponse request returning *FetchUserResponse
func (c *ClientWithResponses) FetchUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*FetchUserResponse, error) {
	rsp, err := c.FetchUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchUserResponse(rsp)
}

// ParseFetchApiHealthResponse parses an HTTP response from a FetchApiHealthWithResponse call
func ParseFetchApiHealthResponse(rsp *http.Response) (*FetchApiHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchApiHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Healthy  bool   `json:"healthy"`
			NodeName string `json:"nodeName"`
			Report   map[string]struct {
				DisplayName string `json:"displayName"`
				Health      struct {
					Healthy bool `json:"healthy"`
				} `json:"health"`
			} `json:"report"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFetchActionsResponse parses an HTTP response from a FetchActionsWithResponse call
func ParseFetchActionsResponse(rsp *http.Response) (*FetchActionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchActionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Actions []Action `json:"actions"`

			// Meta Metadata about a paginated or billed response.
			Meta PaginationMeta `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Details  interface{}             `json:"details,omitempty"`
			Messages FetchActions400Messages `json:"messages"`
			Status   float32                 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}             `json:"details,omitempty"`
			Messages FetchActions401Messages `json:"messages"`
			Status   float32                 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseRequestActionResponse parses an HTTP response from a RequestActionWithResponse call
func ParseRequestActionResponse(rsp *http.Response) (*RequestActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RequestActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Actions []Action `json:"actions"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Details  interface{}              `json:"details,omitempty"`
			Messages RequestAction400Messages `json:"messages"`
			Status   float32                  `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}              `json:"details,omitempty"`
			Messages RequestAction401Messages `json:"messages"`
			Status   float32                  `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details  interface{}              `json:"details,omitempty"`
			Messages RequestAction403Messages `json:"messages"`
			Status   float32                  `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseRetryActionResponse parses an HTTP response from a RetryActionWithResponse call
func ParseRetryActionResponse(rsp *http.Response) (*RetryActionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetryActionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Action An action tracks a request made to our job queue and its result.
			Action Action `json:"action"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Details  interface{}            `json:"details,omitempty"`
			Messages RetryAction400Messages `json:"messages"`
			Status   float32                `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}            `json:"details,omitempty"`
			Messages RetryAction401Messages `json:"messages"`
			Status   float32                `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseSearchCompaniesResponse parses an HTTP response from a SearchCompaniesWithResponse call
func ParseSearchCompaniesResponse(rsp *http.Response) (*SearchCompaniesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchCompaniesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Companies []CompanyV2 `json:"companies"`

			// Meta Metadata about a paginated or billed response.
			Meta  PaginationMeta          `json:"meta"`
			Query []SegmentationCondition `json:"query"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}                `json:"details,omitempty"`
			Messages SearchCompanies401Messages `json:"messages"`
			Status   float32                    `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details  interface{}                `json:"details,omitempty"`
			Messages SearchCompanies403Messages `json:"messages"`
			Status   float32                    `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseSearchCompaniesPostResponse parses an HTTP response from a SearchCompaniesPostWithResponse call
func ParseSearchCompaniesPostResponse(rsp *http.Response) (*SearchCompaniesPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchCompaniesPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Companies []CompanyV2 `json:"companies"`

			// Meta Metadata about a paginated or billed response.
			Meta  PaginationMeta          `json:"meta"`
			Query []SegmentationCondition `json:"query"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}                    `json:"details,omitempty"`
			Messages SearchCompaniesPost401Messages `json:"messages"`
			Status   float32                        `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details  interface{}                    `json:"details,omitempty"`
			Messages SearchCompaniesPost403Messages `json:"messages"`
			Status   float32                        `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseFetchCompaniesAnalyticsResponse parses an HTTP response from a FetchCompaniesAnalyticsWithResponse call
func ParseFetchCompaniesAnalyticsResponse(rsp *http.Response) (*FetchCompaniesAnalyticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchCompaniesAnalyticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []struct {
				Count             float32 `json:"count"`
				Name              string  `json:"name"`
				PercentageOfAll   float32 `json:"percentageOfAll"`
				PercentageOfTotal float32 `json:"percentageOfTotal"`
			} `json:"data"`
			Meta struct {
				ListId          *float32                `json:"listId,omitempty"`
				Query           []SegmentationCondition `json:"query"`
				TotalDatapoints float32                 `json:"totalDatapoints"`
				TotalDocuments  float32                 `json:"totalDocuments"`
				TotalValues     float32                 `json:"totalValues"`
			} `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}                        `json:"details,omitempty"`
			Messages FetchCompaniesAnalytics401Messages `json:"messages"`
			Status   float32                            `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseExportCompaniesAnalyticsResponse parses an HTTP response from a ExportCompaniesAnalyticsWithResponse call
func ParseExportCompaniesAnalyticsResponse(rsp *http.Response) (*ExportCompaniesAnalyticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportCompaniesAnalyticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data []struct {
				Count             float32 `json:"count"`
				Name              string  `json:"name"`
				PercentageOfAll   float32 `json:"percentageOfAll"`
				PercentageOfTotal float32 `json:"percentageOfTotal"`
			} `json:"data"`
			Meta struct {
				ListId          *float32                `json:"listId,omitempty"`
				Query           []SegmentationCondition `json:"query"`
				TotalDatapoints float32                 `json:"totalDatapoints"`
				TotalDocuments  float32                 `json:"totalDocuments"`
				TotalValues     float32                 `json:"totalValues"`
			} `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}                         `json:"details,omitempty"`
			Messages ExportCompaniesAnalytics401Messages `json:"messages"`
			Status   float32                             `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseFetchCompanyByEmailResponse parses an HTTP response from a FetchCompanyByEmailWithResponse call
func ParseFetchCompanyByEmailResponse(rsp *http.Response) (*FetchCompanyByEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchCompanyByEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Company Our complete schema for company data.
			Company *CompanyV2 `json:"company,omitempty"`
			Email   struct {
				Address  *string `json:"address,omitempty"`
				Domain   string  `json:"domain"`
				FullName struct {
					First  *string `json:"first,omitempty"`
					Last   *string `json:"last,omitempty"`
					Middle *string `json:"middle,omitempty"`
				} `json:"fullName"`
				IsDisposable  bool    `json:"isDisposable"`
				IsFree        bool    `json:"isFree"`
				IsSubaddress  bool    `json:"isSubaddress"`
				IsValid       bool    `json:"isValid"`
				IsValidFormat bool    `json:"isValidFormat"`
				Name          string  `json:"name"`
				Pattern       *string `json:"pattern,omitempty"`
			} `json:"email"`
			Meta *struct {
				FreeRequest *bool `json:"freeRequest,omitempty"`
			} `json:"meta,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}                    `json:"details,omitempty"`
			Messages FetchCompanyByEmail401Messages `json:"messages"`
			Status   float32                        `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details  interface{}                    `json:"details,omitempty"`
			Messages FetchCompanyByEmail403Messages `json:"messages"`
			Status   float32                        `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseSearchCompaniesByNameResponse parses an HTTP response from a SearchCompaniesByNameWithResponse call
func ParseSearchCompaniesByNameResponse(rsp *http.Response) (*SearchCompaniesByNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchCompaniesByNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Companies []CompanyV2 `json:"companies"`

			// Meta Metadata about a paginated or billed response.
			Meta PaginationMeta `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Details  interface{}                      `json:"details,omitempty"`
			Messages SearchCompaniesByName400Messages `json:"messages"`
			Status   float32                          `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}                      `json:"details,omitempty"`
			Messages SearchCompaniesByName401Messages `json:"messages"`
			Status   float32                          `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details  interface{}                      `json:"details,omitempty"`
			Messages SearchCompaniesByName403Messages `json:"messages"`
			Status   float32                          `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseSearchCompaniesByPromptResponse parses an HTTP response from a SearchCompaniesByPromptWithResponse call
func ParseSearchCompaniesByPromptResponse(rsp *http.Response) (*SearchCompaniesByPromptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchCompaniesByPromptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Companies []CompanyV2 `json:"companies"`

			// Meta Metadata about a paginated or billed response.
			Meta PaginationMeta `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}                        `json:"details,omitempty"`
			Messages SearchCompaniesByPrompt401Messages `json:"messages"`
			Status   float32                            `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details  interface{}                        `json:"details,omitempty"`
			Messages SearchCompaniesByPrompt403Messages `json:"messages"`
			Status   float32                            `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseFetchCompanyBySocialResponse parses an HTTP response from a FetchCompanyBySocialWithResponse call
func ParseFetchCompanyBySocialResponse(rsp *http.Response) (*FetchCompanyBySocialResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchCompanyBySocialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}                     `json:"details,omitempty"`
			Messages FetchCompanyBySocial401Messages `json:"messages"`
			Status   float32                         `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details  interface{}                     `json:"details,omitempty"`
			Messages FetchCompanyBySocial403Messages `json:"messages"`
			Status   float32                         `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCountCompaniesResponse parses an HTTP response from a CountCompaniesWithResponse call
func ParseCountCompaniesResponse(rsp *http.Response) (*CountCompaniesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CountCompaniesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count float32 `json:"count"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}               `json:"details,omitempty"`
			Messages CountCompanies401Messages `json:"messages"`
			Status   float32                   `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details  interface{}               `json:"details,omitempty"`
			Messages CountCompanies403Messages `json:"messages"`
			Status   float32                   `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseCountCompaniesPostResponse parses an HTTP response from a CountCompaniesPostWithResponse call
func ParseCountCompaniesPostResponse(rsp *http.Response) (*CountCompaniesPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CountCompaniesPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count float32 `json:"count"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}                   `json:"details,omitempty"`
			Messages CountCompaniesPost401Messages `json:"messages"`
			Status   float32                       `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details  interface{}                   `json:"details,omitempty"`
			Messages CountCompaniesPost403Messages `json:"messages"`
			Status   float32                       `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseSearchSimilarCompaniesResponse parses an HTTP response from a SearchSimilarCompaniesWithResponse call
func ParseSearchSimilarCompaniesResponse(rsp *http.Response) (*SearchSimilarCompaniesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchSimilarCompaniesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Companies []CompanyV2 `json:"companies"`

			// Meta Metadata about a paginated or billed response.
			Meta PaginationMeta `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}                       `json:"details,omitempty"`
			Messages SearchSimilarCompanies401Messages `json:"messages"`
			Status   float32                           `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details  interface{}                       `json:"details,omitempty"`
			Messages SearchSimilarCompanies403Messages `json:"messages"`
			Status   float32                           `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseFetchCompanyResponse parses an HTTP response from a FetchCompanyWithResponse call
func ParseFetchCompanyResponse(rsp *http.Response) (*FetchCompanyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchCompanyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}             `json:"details,omitempty"`
			Messages FetchCompany401Messages `json:"messages"`
			Status   float32                 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details  interface{}             `json:"details,omitempty"`
			Messages FetchCompany403Messages `json:"messages"`
			Status   float32                 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Details  interface{}             `json:"details,omitempty"`
			Messages FetchCompany404Messages `json:"messages"`
			Status   float32                 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseAskCompanyResponse parses an HTTP response from a AskCompanyWithResponse call
func ParseAskCompanyResponse(rsp *http.Response) (*AskCompanyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AskCompanyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Meta struct {
				Cost  float32                `json:"cost"`
				Model AskCompany200MetaModel `json:"model"`
				Score *float32               `json:"score,omitempty"`
			} `json:"meta"`

			// Prompt A natural language request made to the platform resolving to a specific action or search segment.
			Prompt struct {
				CompanyId *float32                   `json:"companyId,omitempty"`
				Context   AskCompany200PromptContext `json:"context"`
				CreatedAt *string                    `json:"createdAt,omitempty"`
				Data      *struct {
					All     *bool     `json:"all,omitempty"`
					Count   *float32  `json:"count,omitempty"`
					Domains *[]string `json:"domains,omitempty"`
					Explain *bool     `json:"explain,omitempty"`
					Fields  *[]struct {
						Description *string                           `json:"description,omitempty"`
						Key         string                            `json:"key"`
						Type        AskCompany200PromptDataFieldsType `json:"type"`
						Values      *[]string                         `json:"values,omitempty"`
					} `json:"fields,omitempty"`
					Model        *AskCompany200PromptDataModel `json:"model,omitempty"`
					Names        *[]string                     `json:"names,omitempty"`
					Query        *[]SegmentationCondition      `json:"query,omitempty"`
					Question     *string                       `json:"question,omitempty"`
					Segmentation *bool                         `json:"segmentation,omitempty"`
				} `json:"data,omitempty"`
				Feature   *AskCompany200PromptFeature `json:"feature,omitempty"`
				Hits      *float32                    `json:"hits,omitempty"`
				Id        float32                     `json:"id"`
				Model     *AskCompany200PromptModel   `json:"model,omitempty"`
				Prompt    string                      `json:"prompt"`
				PromptKey string                      `json:"promptKey"`
				Response  struct {
					Action *struct {
						Cost *float32 `json:"cost,omitempty"`
						Data *struct {
							// Answer An answer from a query made to the LLM.
							Answer  LLMAnswer `json:"answer"`
							Domains *[]string `json:"domains,omitempty"`
							Fields  []struct {
								Description *string                                         `json:"description,omitempty"`
								Key         string                                          `json:"key"`
								Type        AskCompany200PromptResponseActionDataFieldsType `json:"type"`
								Values      *[]string                                       `json:"values,omitempty"`
							} `json:"fields"`
							Job      AskCompany200PromptResponseActionDataJob `json:"job"`
							Query    *[]SegmentationCondition                 `json:"query,omitempty"`
							Question string                                   `json:"question"`
						} `json:"data,omitempty"`
						ListId   *float32                                `json:"listId,omitempty"`
						PromptId float32                                 `json:"promptId"`
						Status   AskCompany200PromptResponseActionStatus `json:"status"`
						Type     AskCompany200PromptResponseActionType   `json:"type"`
					} `json:"action,omitempty"`
					All    *bool `json:"all,omitempty"`
					Answer *struct {
						Explanation *string                `json:"explanation,omitempty"`
						Output      map[string]interface{} `json:"output"`
						Score       float32                `json:"score"`
					} `json:"answer,omitempty"`
					Cost   *float32 `json:"cost,omitempty"`
					Count  *float32 `json:"count,omitempty"`
					Domain *string  `json:"domain,omitempty"`
					Error  *string  `json:"error,omitempty"`
				} `json:"response"`
				UpdatedAt *string `json:"updatedAt,omitempty"`
			} `json:"prompt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}           `json:"details,omitempty"`
			Messages AskCompany401Messages `json:"messages"`
			Status   float32               `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details  interface{}           `json:"details,omitempty"`
			Messages AskCompany403Messages `json:"messages"`
			Status   float32               `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Details  interface{}           `json:"details,omitempty"`
			Messages AskCompany404Messages `json:"messages"`
			Status   float32               `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseFetchCompanyContextResponse parses an HTTP response from a FetchCompanyContextWithResponse call
func ParseFetchCompanyContextResponse(rsp *http.Response) (*FetchCompanyContextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchCompanyContextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Context *struct {
				// Company Our complete schema for company data.
				Company *CompanyV2 `json:"company,omitempty"`
				Domain  string     `json:"domain"`

				// Ideated A collection of categorized facts about a company aggregated from multiple sources.
				Ideated *PageContentsIdeated `json:"ideated,omitempty"`
				Sources *[]PageContentsPage  `json:"sources,omitempty"`
			} `json:"context,omitempty"`
			Meta struct {
				Cost   float32 `json:"cost"`
				Tokens float32 `json:"tokens"`
			} `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}                    `json:"details,omitempty"`
			Messages FetchCompanyContext401Messages `json:"messages"`
			Status   float32                        `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details  interface{}                    `json:"details,omitempty"`
			Messages FetchCompanyContext403Messages `json:"messages"`
			Status   float32                        `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Details  interface{}                    `json:"details,omitempty"`
			Messages FetchCompanyContext404Messages `json:"messages"`
			Status   float32                        `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseFetchCompanyEmailPatternsResponse parses an HTTP response from a FetchCompanyEmailPatternsWithResponse call
func ParseFetchCompanyEmailPatternsResponse(rsp *http.Response) (*FetchCompanyEmailPatternsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchCompanyEmailPatternsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EmailPattern
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}                          `json:"details,omitempty"`
			Messages FetchCompanyEmailPatterns401Messages `json:"messages"`
			Status   float32                              `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details  interface{}                          `json:"details,omitempty"`
			Messages FetchCompanyEmailPatterns403Messages `json:"messages"`
			Status   float32                              `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Details  interface{}                          `json:"details,omitempty"`
			Messages FetchCompanyEmailPatterns404Messages `json:"messages"`
			Status   float32                              `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSearchIndustriesResponse parses an HTTP response from a SearchIndustriesWithResponse call
func ParseSearchIndustriesResponse(rsp *http.Response) (*SearchIndustriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchIndustriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Industries []struct {
				CompaniesCount *float32    `json:"companiesCount"`
				Name           string      `json:"name"`
				Slug           interface{} `json:"slug,omitempty"`
			} `json:"industries"`

			// Meta Metadata about a paginated or billed response.
			Meta PaginationMeta `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}                 `json:"details,omitempty"`
			Messages SearchIndustries401Messages `json:"messages"`
			Status   float32                     `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseSearchIndustriesSimilarResponse parses an HTTP response from a SearchIndustriesSimilarWithResponse call
func ParseSearchIndustriesSimilarResponse(rsp *http.Response) (*SearchIndustriesSimilarResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchIndustriesSimilarResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Industries []struct {
				CompaniesCount *float32    `json:"companiesCount"`
				Name           string      `json:"name"`
				Slug           interface{} `json:"slug,omitempty"`
			} `json:"industries"`

			// Meta Metadata about a paginated or billed response.
			Meta PaginationMeta `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}                        `json:"details,omitempty"`
			Messages SearchIndustriesSimilar401Messages `json:"messages"`
			Status   float32                            `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseEnrichJobTitlesResponse parses an HTTP response from a EnrichJobTitlesWithResponse call
func ParseEnrichJobTitlesResponse(rsp *http.Response) (*EnrichJobTitlesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnrichJobTitlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}                `json:"details,omitempty"`
			Messages EnrichJobTitles401Messages `json:"messages"`
			Status   float32                    `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseFetchListsResponse parses an HTTP response from a FetchListsWithResponse call
func ParseFetchListsResponse(rsp *http.Response) (*FetchListsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchListsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Lists []List `json:"lists"`

			// Meta Metadata about a paginated or billed response.
			Meta PaginationMeta `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}           `json:"details,omitempty"`
			Messages FetchLists401Messages `json:"messages"`
			Status   float32               `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseCreateListResponse parses an HTTP response from a CreateListWithResponse call
func ParseCreateListResponse(rsp *http.Response) (*CreateListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest List
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}           `json:"details,omitempty"`
			Messages CreateList401Messages `json:"messages"`
			Status   float32               `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseDeleteListResponse parses an HTTP response from a DeleteListWithResponse call
func ParseDeleteListResponse(rsp *http.Response) (*DeleteListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest List
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Details  interface{}           `json:"details,omitempty"`
			Messages DeleteList400Messages `json:"messages"`
			Status   float32               `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}           `json:"details,omitempty"`
			Messages DeleteList401Messages `json:"messages"`
			Status   float32               `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details  interface{}           `json:"details,omitempty"`
			Messages DeleteList403Messages `json:"messages"`
			Status   float32               `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseUpdateListResponse parses an HTTP response from a UpdateListWithResponse call
func ParseUpdateListResponse(rsp *http.Response) (*UpdateListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest List
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Details  interface{}           `json:"details,omitempty"`
			Messages UpdateList400Messages `json:"messages"`
			Status   float32               `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}           `json:"details,omitempty"`
			Messages UpdateList401Messages `json:"messages"`
			Status   float32               `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details  interface{}           `json:"details,omitempty"`
			Messages UpdateList403Messages `json:"messages"`
			Status   float32               `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseFetchCompaniesInListResponse parses an HTTP response from a FetchCompaniesInListWithResponse call
func ParseFetchCompaniesInListResponse(rsp *http.Response) (*FetchCompaniesInListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchCompaniesInListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Companies []CompanyV2 `json:"companies"`

			// Meta Metadata about a paginated or billed response.
			Meta  PaginationMeta           `json:"meta"`
			Query *[]SegmentationCondition `json:"query,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Details  interface{}                     `json:"details,omitempty"`
			Messages FetchCompaniesInList400Messages `json:"messages"`
			Status   float32                         `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}                     `json:"details,omitempty"`
			Messages FetchCompaniesInList401Messages `json:"messages"`
			Status   float32                         `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details  interface{}                     `json:"details,omitempty"`
			Messages FetchCompaniesInList403Messages `json:"messages"`
			Status   float32                         `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseFetchCompaniesInListPostResponse parses an HTTP response from a FetchCompaniesInListPostWithResponse call
func ParseFetchCompaniesInListPostResponse(rsp *http.Response) (*FetchCompaniesInListPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchCompaniesInListPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Companies []CompanyV2 `json:"companies"`

			// Meta Metadata about a paginated or billed response.
			Meta  PaginationMeta           `json:"meta"`
			Query *[]SegmentationCondition `json:"query,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Details  interface{}                         `json:"details,omitempty"`
			Messages FetchCompaniesInListPost400Messages `json:"messages"`
			Status   float32                             `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}                         `json:"details,omitempty"`
			Messages FetchCompaniesInListPost401Messages `json:"messages"`
			Status   float32                             `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details  interface{}                         `json:"details,omitempty"`
			Messages FetchCompaniesInListPost403Messages `json:"messages"`
			Status   float32                             `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseToggleCompaniesInListResponse parses an HTTP response from a ToggleCompaniesInListWithResponse call
func ParseToggleCompaniesInListResponse(rsp *http.Response) (*ToggleCompaniesInListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToggleCompaniesInListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest List
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Details  interface{}                      `json:"details,omitempty"`
			Messages ToggleCompaniesInList400Messages `json:"messages"`
			Status   float32                          `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}                      `json:"details,omitempty"`
			Messages ToggleCompaniesInList401Messages `json:"messages"`
			Status   float32                          `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details  interface{}                      `json:"details,omitempty"`
			Messages ToggleCompaniesInList403Messages `json:"messages"`
			Status   float32                          `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Details  interface{}                      `json:"details,omitempty"`
			Messages ToggleCompaniesInList404Messages `json:"messages"`
			Status   float32                          `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseFetchCompanyInListResponse parses an HTTP response from a FetchCompanyInListWithResponse call
func ParseFetchCompanyInListResponse(rsp *http.Response) (*FetchCompanyInListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchCompanyInListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompanyV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Details  interface{}                   `json:"details,omitempty"`
			Messages FetchCompanyInList400Messages `json:"messages"`
			Status   float32                       `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}                   `json:"details,omitempty"`
			Messages FetchCompanyInList401Messages `json:"messages"`
			Status   float32                       `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details  interface{}                   `json:"details,omitempty"`
			Messages FetchCompanyInList403Messages `json:"messages"`
			Status   float32                       `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Details  interface{}                   `json:"details,omitempty"`
			Messages FetchCompanyInList404Messages `json:"messages"`
			Status   float32                       `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSearchCitiesResponse parses an HTTP response from a SearchCitiesWithResponse call
func ParseSearchCitiesResponse(rsp *http.Response) (*SearchCitiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchCitiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Cities []NominatimCity `json:"cities"`

			// Meta Metadata about a paginated or billed response.
			Meta PaginationMeta `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}             `json:"details,omitempty"`
			Messages SearchCities401Messages `json:"messages"`
			Status   float32                 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseSearchContinentsResponse parses an HTTP response from a SearchContinentsWithResponse call
func ParseSearchContinentsResponse(rsp *http.Response) (*SearchContinentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchContinentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Continents []NominatimContinent `json:"continents"`

			// Meta Metadata about a paginated or billed response.
			Meta PaginationMeta `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}                 `json:"details,omitempty"`
			Messages SearchContinents401Messages `json:"messages"`
			Status   float32                     `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseSearchCountiesResponse parses an HTTP response from a SearchCountiesWithResponse call
func ParseSearchCountiesResponse(rsp *http.Response) (*SearchCountiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchCountiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Counties []NominatimCounty `json:"counties"`

			// Meta Metadata about a paginated or billed response.
			Meta PaginationMeta `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}               `json:"details,omitempty"`
			Messages SearchCounties401Messages `json:"messages"`
			Status   float32                   `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseSearchCountriesResponse parses an HTTP response from a SearchCountriesWithResponse call
func ParseSearchCountriesResponse(rsp *http.Response) (*SearchCountriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchCountriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Countries []NominatimCountry `json:"countries"`

			// Meta Metadata about a paginated or billed response.
			Meta PaginationMeta `json:"meta"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}                `json:"details,omitempty"`
			Messages SearchCountries401Messages `json:"messages"`
			Status   float32                    `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseSearchStatesResponse parses an HTTP response from a SearchStatesWithResponse call
func ParseSearchStatesResponse(rsp *http.Response) (*SearchStatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchStatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Meta Metadata about a paginated or billed response.
			Meta   PaginationMeta   `json:"meta"`
			States []NominatimState `json:"states"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}             `json:"details,omitempty"`
			Messages SearchStates401Messages `json:"messages"`
			Status   float32                 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseFetchOpenApiResponse parses an HTTP response from a FetchOpenApiWithResponse call
func ParseFetchOpenApiResponse(rsp *http.Response) (*FetchOpenApiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchOpenApiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFetchPromptsResponse parses an HTTP response from a FetchPromptsWithResponse call
func ParseFetchPromptsResponse(rsp *http.Response) (*FetchPromptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchPromptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Meta Metadata about a paginated or billed response.
			Meta    PaginationMeta `json:"meta"`
			Prompts []Prompt       `json:"prompts"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}             `json:"details,omitempty"`
			Messages FetchPrompts401Messages `json:"messages"`
			Status   float32                 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseProductPromptResponse parses an HTTP response from a ProductPromptWithResponse call
func ParseProductPromptResponse(rsp *http.Response) (*ProductPromptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ProductPromptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Meta Metadata about a paginated or billed response.
			Meta PaginationMeta `json:"meta"`

			// Prompt A natural language request made to the platform resolving to a specific action or search segment.
			Prompt   Prompt                     `json:"prompt"`
			Response ProductPrompt_200_Response `json:"response"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}              `json:"details,omitempty"`
			Messages ProductPrompt401Messages `json:"messages"`
			Status   float32                  `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details  interface{}              `json:"details,omitempty"`
			Messages ProductPrompt403Messages `json:"messages"`
			Status   float32                  `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParsePromptToSegmentationResponse parses an HTTP response from a PromptToSegmentationWithResponse call
func ParsePromptToSegmentationResponse(rsp *http.Response) (*PromptToSegmentationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PromptToSegmentationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Meta Metadata about a paginated or billed response.
			Meta PaginationMeta `json:"meta"`

			// Prompt A natural language request made to the platform resolving to a specific action or search segment.
			Prompt   Prompt `json:"prompt"`
			Response struct {
				All     *bool                    `json:"all,omitempty"`
				Cost    *float32                 `json:"cost,omitempty"`
				Count   *float32                 `json:"count,omitempty"`
				Domain  *string                  `json:"domain,omitempty"`
				Domains *[]string                `json:"domains,omitempty"`
				Error   *string                  `json:"error,omitempty"`
				ListId  *float32                 `json:"listId,omitempty"`
				Query   *[]SegmentationCondition `json:"query,omitempty"`
			} `json:"response"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}                     `json:"details,omitempty"`
			Messages PromptToSegmentation401Messages `json:"messages"`
			Status   float32                         `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseDeletePromptResponse parses an HTTP response from a DeletePromptWithResponse call
func ParseDeletePromptResponse(rsp *http.Response) (*DeletePromptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePromptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Prompt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Details  interface{}             `json:"details,omitempty"`
			Messages DeletePrompt400Messages `json:"messages"`
			Status   float32                 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}             `json:"details,omitempty"`
			Messages DeletePrompt401Messages `json:"messages"`
			Status   float32                 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details  interface{}             `json:"details,omitempty"`
			Messages DeletePrompt403Messages `json:"messages"`
			Status   float32                 `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseFetchTeamResponse parses an HTTP response from a FetchTeamWithResponse call
func ParseFetchTeamResponse(rsp *http.Response) (*FetchTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}          `json:"details,omitempty"`
			Messages FetchTeam401Messages `json:"messages"`
			Status   float32              `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details  interface{}          `json:"details,omitempty"`
			Messages FetchTeam403Messages `json:"messages"`
			Status   float32              `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Details  interface{}          `json:"details,omitempty"`
			Messages FetchTeam404Messages `json:"messages"`
			Status   float32              `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateTeamResponse parses an HTTP response from a UpdateTeamWithResponse call
func ParseUpdateTeamResponse(rsp *http.Response) (*UpdateTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Team
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}           `json:"details,omitempty"`
			Messages UpdateTeam401Messages `json:"messages"`
			Status   float32               `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Details  interface{}           `json:"details,omitempty"`
			Messages UpdateTeam403Messages `json:"messages"`
			Status   float32               `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Details  interface{}           `json:"details,omitempty"`
			Messages UpdateTeam404Messages `json:"messages"`
			Status   float32               `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSearchTechnologiesResponse parses an HTTP response from a SearchTechnologiesWithResponse call
func ParseSearchTechnologiesResponse(rsp *http.Response) (*SearchTechnologiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchTechnologiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Meta Metadata about a paginated or billed response.
			Meta         PaginationMeta `json:"meta"`
			Technologies []Technology   `json:"technologies"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}                   `json:"details,omitempty"`
			Messages SearchTechnologies401Messages `json:"messages"`
			Status   float32                       `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseFetchUserResponse parses an HTTP response from a FetchUserWithResponse call
func ParseFetchUserResponse(rsp *http.Response) (*FetchUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Details  interface{}          `json:"details,omitempty"`
			Messages FetchUser401Messages `json:"messages"`
			Status   float32              `json:"status"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9W3MbOZIv/lUqavdhJv7UxZ7xP+L4ZY9G7Z7Rrtutabl7HnodG2BVkoSFAsoAShLb",
	"6+9+Ape6kUAViiJl0UY/tKkCkLglfplIJBKf04wVJaNApUhff05FtoIC6Z8XmcSMql85iIzj0vyZXtAE",
	"6aREcpTdigQlHD5VIGRSoBwSyRJW8eQjmyefKqggQTRPsBQJB1EReZrO0pKzErjEoCtCUkJRmvrluoT0",
	"dUqrYg48/TJLMyakSqAVIWhOIH0teQUzR0YOSEJ+MZRbSI7pUuXOkUQqY78lGQFEIf+19DSlKAlIyFUq",
	"llB0W9ySth8Q52jdK/YDKxCmYpi2zXSD1N9TK6qodFLP25rDyeW7twQIEhJn/6yAr9PXn7/M0gXCZOrA",
	"mTJDo9bLsUtDFxhI3h+XPkf0WN9B8BbWAxV9ToFWRfr6d1Pj/84ZUxyWzuzftif1n7b4LG3zNTls2gcH",
	"L98hUsGkyf0yS9WSxVxNye+6EzZLS5/NP0ImXYO25KyiuZlNm1Y3+Mss/cjmvY6L2xPDSaqb4vaEYCHT",
	"WQqU42x1ovgeUTXYzSebQa/FqjR/urpdsBxIt6qMoCoHXVT9OCkwxaleFkICqtJZuiyl+X+dtuTsk/2n",
	"/kQIKtBf6h9/VXNAyFxPBTwoxFMkyhX+i7NRnyzLt1Px7xwW6ev0385aoD2zKHt2A8sCqESKvS4ZzbHm",
	"M8eQa3j18aAEVIzV9F7lUXmZRGRoSVUC+BixX1WeL18crIJzJ1E1h1fupJKzovQlGomxvSoRFffARfA4",
	"v33704Uu4oTNQdDfATpdAyMkkpXoLYxM4jvNrY1YaWBylpZAc996V/PtGbBN2GmW12uU55rwRzYXr628",
	"dlKvyjxYjm7gCM7TpqcuILnUrVn/9nJbqfi54kk9EImZtmTBzDdE14mS1w7NYc4qB3vMK4EpCPHejka/",
	"qvcrSFTTErZI6pyJXEFTFxanGo3MEEJeZXqBInKCqZBYVprQLF2yO+BULeATtASaKRCljJacLbAGCcQl",
	"BS5WuNQtx3dIAlmfrIDoKa7mBGcWAVVZAWRxAkVJ2FpPlWAETlTPOAbJDB3XjGGaV+ovh8TSnW3TN7qZ",
	"YKp6Gi4uLaW1ux61UOrK1mp0O7Wdpo6GE0SXFVr62t0k95otqrJkXIppLaeo8LCCSglprMp3QaSnrYhI",
	"4BSpJa0pCgfJaa19C0tEPAOjkoIbriH/jWEr31DrPInBEUUT6uy9oV+h3sp4cfLiPJ2lL85PXql/X52f",
	"vDxXP16eqy/m0/nJi1uV5/bklfr31e3Ji3P1Qy0d/fPDaIvfPCiZ62w2qKRpjd+CzDUg/qZWZ7arUMl9",
	"/pOsLMHsaBToaGzwk/6x1ZUCiN8jkSxMiTGKPyDp4WiF3wFU2/HuUL0mKPOQLVXSBLouMYg8e0q9hMym",
	"0sh8odF/g7VdSoCHlk6rV4ehvE0BHkqCKPI3qZOhoaUpO4eRVbI04gjlRpVD5LpboVIntuowpbzkOypE",
	"xrhnanSSl0TNPtsT4pwiisha4syxGSJ4uZIrVglHM942aXq/f6ka9C+YJ79hiYhINFVhJOvGNGYZCIHn",
	"mGC59nFGJ4vt7J/OT16cn//ZuUrmIOS10tRx5gM8lSUp6zwBNLOqqIjG97dozSp5s8ILDyq1WROi8yZC",
	"Zd7uun/D3sz16BQqKcqXIOQloxKoXFTkGmEqfSJV502yJnNSqtzbbSvEoxtWoIcb4HfA3yKp1SOP1vCA",
	"i6pIhM6aEJPXOQe0Kn5k1CeCWwGwUJl8FH4xuu8oEasje+nc6JKjZEyKn4pcExArgABKbVYftfdI3I7S",
	"kSqTk0IJfMF4gahXBLQZApaMAOYmc/Pm54DiEhfwnl1RCdzuldyqCy60zRG3GQ/CzVrL+Bth2S2my/fY",
	"p04aZWRu8+nWHaA5zuXGqFyR9W9YYLVbCFP0bKHkzpYa0veUoOdWf3txfnvySv96da50OvtRf7Wf1fdC",
	"fS1OXpzrH+fFySv969W5+mY/6q/2s/o+b9TDuUM7dIqssvSp5WXZ7xK7py4ZVKA/jA7gMQNijwJ39UMj",
	"dcvSu20Y33j4Sivtki7d5U2am0LXhHKH4T4A7XS2mpRXW5ajW2pV2jXijd2jVLvhHO6AqBFWKQ8SqFCU",
	"nPYI7tkF/frLW7Xu/cP3JcCWiWjOGc7j1H9/U5+tOCsgzvz3N/OYiTjt39+0FyiL0/4dTjuYo/4479/Z",
	"vOOMM8GMlSZO/vc1+SVBayEb026c/u9r+h/m7CHO+/c2707bkBDWtrppeyeMX3NcIN9xdmkSE50z5KA1",
	"Y3e+8yidlOACLV1Htv2WrQAvVx77vUmrSWh6btMrzzwnRaziGfgItH25x7lcuUnopLEmOA8q2JLdfKqQ",
	"9xRLpyUq2/c6SK5hy1gODgamyJ7RbVf+7uLq8ibR5R7lhiCwZ4Buri4fTd7d1dobcNvlK/tUYaFPVX22",
	"3k4Olxk7zMPTcZzefmkPlJuqnIxhHR7d5HRaKKVAeTNIJUhfQhx8h4YmrZUAI0tzlwHtV/HIMQ0gFjas",
	"o4Scnn7VXOAcI78/VjfHgRm1qeqxYzpCKGw8B4nsJt4zRiXKXAIeCoSJZwZM2oSxz5CEJfNpCnVquzR0",
	"o3pqUqYP+0U6S7MVohSI+rkEChyRdJYWiN+CNN7fHATwO+NXlM5SgYh2j5aQrSjOEPE7gbubp5McbdsB",
	"JgimXm89lRSHdDryrph3TE1aHNTJg3q/QlL4j4X/pZIvyrKuJQ7xvrC4vkfWH7OS5Rny+tzUqa5J2FAC",
	"S3vDZ5vIhUoaJLWzLcASfYwiMUAh3CawTeVRdgFLzmsbCNmp+zsWskpFySReeFbSjUmMU3pEUxq2oe1U",
	"75i8W8ruCeRL+DtHpWd33eRJlipT0F0DTG8h9ym7b3XqFXXp0ENUyxAD0kSaEi2VLuUxy5nEEDr3MBfY",
	"5yNuE6e27R7f4hJyjDxytU6eRtfJJM3WZEMEEIy8dzAwEkklIE/ma10l43iJqd3KuG123VvDA670djd0",
	"j0Rii4xsqEokJXBF50//8fp3dPLH+cn/+dD+PPnw+Xz2/7/4Uqf8+T/++79P//z/1X96cvmrDLuZYi+z",
	"PcooZGi8CwLJgYGHhxLz8IG32d2ALRb3HkPYzY//SoRUtHwt6txc5ZBjDgM3FDoZAnrIYYmF5IjKS6Xv",
	"eTVGk1gTbEuNEL1We4OBbcNEgtzXZZsc0mHGPLOpUjYMCkMoo2fMYztxT2atW885uwWaztIF4ydKW05n",
	"qb2kY/VpM4OQOzXn9pamu+ZKeIehc6ZCPOrH+7c/bBbfvG8ZhkC2iBtJuxcyLRy57mIuMEU0c1laOdwB",
	"rQbdm22WAGfhQAfgl+b3ywAHYDVLLLt986A2T0svm7DsNgGbZ+Ae2AbVm3UxZ2SIptA5AiiOXo/u6CYs",
	"Qx5taAUo/1QhLsHn0d3NMWqbRXnOQfgkhUmsidSt2qayBFYy7x2TOrUxThuy22QI8t5SkVhWebPOa4rO",
	"5UZ8aE0YXYaS2Vg3qmWGsmvpcHTv0+3v20vMnW4HcEbmvfykUsanJGM5+ORLOwKKlpP5p81oTebbmM7A",
	"q8G+oSuZkP7Rr1NHyPjMKZh6T2Wa5L0xR01wHxzSpfVdscnAILonOVw1fPwEa3J7md6G0vc1ub4B9E7t",
	"0Mzud2L3Nq/f57QGH+8G7k0eO6ea2B6mtKHzPc2ob/BC7JPOq5XgjBZnQ9O5JlLIDV08+RNlMimBCywk",
	"5J5L5mp/6jPkcFCbOUyXic1W1yABFQlaSOD1pWV983Ri3QsOYO9Gb9d/tdgK/GCrglxHalClB6rpWFlw",
	"rs1nQXXYvG5CJqiU9zRayATngRFvNh0iO07ka/GJXHk29D+tb/75tnOqsG3T6NzOhvvRLmORULgPG8aB",
	"aBA5kqgfEsJWMEvMKaOeNM4Kwz16R48KBYIqvy6N7hDWgZ/cjnO4wATxCyk5nlfS6+disiWoyZfMQd4D",
	"0E6jMAhXhz0nOw2pwBoNKjhrdWLrwNHpNm1zmBpKfAPm2p7UtYaE3rON8G4W23TLANutW+v4HPrvimv/",
	"Jh2zLggjjGOkGGXkFRLWiVLMErxIBEtW7D4pdPwc891Nf02zEFOYYlGFDwQJmZhCgeK7BGaPkLclO2SM",
	"5o3flsOb6NrY9IecihJr959yXGm8kS7rYCBDh30dxyVbkfesrzmAcLv0mcIWHzRZ54KoBFrCNfAMqEQ+",
	"a5vOpHjH5mr953Qtge7BAUH0WIaRz6fLJCaFPn4qddiwUU9FrBZJvj0jC0YIu/ea3LqRRmzGoFBTJrf3",
	"aHiT7KYU95EdP+4eMrbj/F1VAPe5+lKTGEiM4FsYHTSdKahnBahfowRttjCSdZSMgKP1NjhGfcA+Rr1k",
	"AZFldKYgcuGOBEOqxw6OBGMNk4jcYrq8qOMvDnZXQ25iiyQ6ZuNom0M8FbZWfAiH3uEc2OhYmFxBQ3EP",
	"HP4BPl1saxjuVyxRRZIVcBjfDalxcCkGOcfz+dxIsohdEbsidkXsOhbsWqAM5ozdRuyK2BWxK2LXMWLX",
	"3zmryghgEcAigEUAOyYAW2K5quYRuSJyReSKyHVMyIWpkGjJzVtHEbwieEXwiuB1LODVvX4YsStiV8Su",
	"iF3Hgl0FEpLlLGJXxK6IXRG7jgu7IMdV3DFG5IrIFZHrqJCrRJJDVLoidEXoitB1ZNCl32K0F8kieEXw",
	"iuAVwetYwItDnuOIXBG5InJF5Doq5BIEZdGpPgJXBK4IXMcFXBSV2QpFpStiV8SuiF3HhV0SZbfsDviC",
	"sPsIYBHAIoBFADsuAIPoUh+BKwJXBK4jA65qrpWviF0RuyJ2Rew6JuySKw4oFxG6InRF6IrQdVTQhW9l",
	"jN0VkSsiV0SuI0OuqpgTHpErIldErohcR4Vc91hmq4hcEbkickXkOjbkkhCVrghdEboidB0VdN3hAlgE",
	"rghcEbgicB0VcN0yKtGtjI8DRfCK4BXB66jA6x4IWbCKxlcZI3hF8IrgdVTg9WD5IuJWxK2IWxG3jgW3",
	"1kDiY2YRtyJuRdw6Ltxilazm0c4VoStCV4SuI4KuLy5XCchWlBG2tBjWRzSUSXznaaNJazraJaQaiCUU",
	"msbWWNoPiHO0Vn9nSMKSceyDgDa9N7LdChPEIcF0Wr05SISJp1KbuMEb/l72x21Cl2wFDeH15E5AJiG/",
	"8CyoHEnYqCC5RyKpyzm53SRiRt+vS/APkMmTqOJisw7L901HtgmoYqr3HUKugW5IAa0KxdsZY7dqYGdp",
	"TtX/4Q6RCkno/DyZVzQnvS93wIWqe5auAOVKOig5IZH617RM/ZJoqf6pOFH/3CGO0ZyA6Kwl/0wIUnkw",
	"V6W453kbZ2wznXRsYhCpDUDosMnW9NqmOx2pen3coGnBobeA21XlIqfHdRtk/OKgA9tGAITi9Zyw5ShJ",
	"lSmEWIY4ePWJDj2bL7iRGaMSZeNdt/nC6fKKZqs5EjBK+rLJGkw9hzsgav7GB6TNGk6dZQF0WSZCiMEd",
	"UDlOzmQLIbgkSIicMT5K8+91zuCel4hLClyscDlKvZM3nD7HmVct7NI2+abQvUPZOoSuypeUjOBsHUKZ",
	"wxILydH4aDc5a7I5K5DRB7aoCkRAvEN3eIlkwETeqOxJkz94WIQSfWh8Km2+IJISyWqcnU224IZK4MU4",
	"UZ1LkRPA73AWRLkqlfYxTtvmCyF5D3M1YKMkbb4wkp2z30Gi/6pzBo/tPb7FOZJonLTNOIlyqbYwQaTL",
	"CZsd1y7hDjLJuEN2LwmbI8+ey6TpmioJeWKIuNTbzg5xU+EI2MK8KRAm10hK4A7F6YImoDIkpcmRIJon",
	"WIqEA0GqWZguGC+Qyq71zH4HdVlxySqq5TStCFEqYfpa8gq8VpXtHX7bvO1lItASroFnQCVaQkA1G4pY",
	"t426BW1929Rdetl/svl7LIljWV0kH9k8kSpx4sDloIRUAYPj1tUq6uw3kDGaI74OKucZ7/rl2/CJo6gA",
	"5/SohDciqDEq6488KKsAihnHcv1W6Ug7FJk2TJoLQgdja+/QzKR7nuzgNUPVDMRWN/2dcLHl27c/XVBx",
	"D9y5qpFOShacFQlKPlXA10mBcqhx7+3bn7a50sLelZtr4KEkiCJpd2Bbo7jAQEz8FM++v9dIB4FbWA/s",
	"6j83e1yNf/87Z4wAUovY/G0bWv9pi8/SNl+Tw6a59q1qRwz9TozsbTf4QXXCZhnfM87SJVciE7ojXjf4",
	"yyxllSzN7g/lOVYDh8h1d0xdiP+pAuEdY5ExDo7p3ehFywlNIzqEazJOtsRCupAyY4RYSwZbWAGLQSQC",
	"3UGeMJ7gomRcIed8naBEAiq2GRRRRNYSm03Qv3NYpK/TfztTxBhVu5Qzka2gQOJMteKiyax3k7pD6rth",
	"71HIyzigxnQ0jtBrigpj7/fk7UwrPKiu2u3GQHJg3R6UrwfUXYmSij+qKQea1aPr5rFm3eUIE8XcORaq",
	"PYo3rDU/VYoi3JK1c015OtB9zfjhsmaIx4mjkrMMhLhoLLPbHbdZfqg7ETRjttAVxRIjgv/wjarN9xMI",
	"MaysbDU5fLo1mPcQamgl3MBSySMN25eMmhl2IZEme4MLTMyWMtzKqtbq4KLqSFoqAOiFxgER3AeT31V1",
	"JYAHrueOlt5UGqpqj2B+CxUtEHRXeX9JWyW0WZ4b/N/oC31e3mAUJ0tu8d/GrPrw+qILq5uqhE3aAHCU",
	"ECykT4XA8PhNAQmFapcMfMcKrFSV4hLLtVMcYbk22pHShprsycX1latTuRtu9thbJLGs8jDIqPX3fwDK",
	"CabTCgWu1Dr7P2u0GS/B6DK8D/4dRTN1akz5OnB594tNLnUjkYTAQiUTsmaJg+4tdCVbXGbxo+GY7si3",
	"4FG3sdeCD4NLhVGJqd2SbqtvNjF80WA5aWHUI9po+Quly2v9Xh9kVbpzSh9V4CqQU9XYYUFmKuf0Enza",
	"qs+MPr7zjv3ZwcOeFntjPhgwFzhNvVNG/1FrsMPGM++K7DPRFotYBghauQ4zQae7U5azhk/3YtZJB1/K",
	"+1meHVSqseFiwXGmsOCCSsQzaf8QWP3zplKNT9VQcLlKLrSvlUr4OQNEdZYbVnVSPszGObhpxuUOMBVA",
	"fSoGRZwIwAmV9A5tbAU7Oy9WVqSxZ40O+XNEnXptbDLoNiLthDydAewN16MwyQ9Jx4FIUYM/sAY/RRc/",
	"/CILWDih7K875uJ+vZqORBx/s5LqyJbL0yu1j18J1zqVSqBSXOXaaBZwVmAd6P6APFmgTArr7YYad0i0",
	"XHJY6mNXvYaKikhcEkgEq3gGjvPXxqsu3MqJsnr8ppSac3YL1G0szggTPkOy9WoT02rLKiFZAXxiMeMP",
	"5D7UAyQrDhMJLjBFNJtcivEbRDxme0zzSsjaaTic6Ec2n1iCsAxt26dHi1GxuPec4snV5Cnp+KOFF7K+",
	"B1ML2VUyrZiArOLWuDqhlL5eMLUMqXaYj916VZUl43L6+cfUEv17BRNKKjhxH1kYRzF7YDnkbjbhZHsQ",
	"wd9ieuuCbyVJE+MKhmliPasyU2gbiiU8eFpsrqsMu277rqF123ltj+I229ltlz2HRiJBVmokC8Y7Mkbn",
	"e3CeeGgCzi6MeTzAgwROEQk/CtsafwePrGRBPPth7adpW7O3+mTtHRU4hbP0DgvsY9XwCcbGGeUncLkQ",
	"qq/aZ7BWFkpTwDgbzDEhkCccRMmoANesCulcZRmHHEv3CswqzoHKmt+27ypiLgZSOcAvoJ0s3HKEoIHS",
	"BXq4yTgj5BcQFZHiF0DZyntMDdxLSDKJSIiHiNA6oh2Ofue7Xe13rNOLthl1pc555qwonUcSVGkmiCQE",
	"0WWlljI3dfT8nEqC5ILxQk01I3f6+idTa7yEDC9wpi9qKT2TJwIQz1aJMAfmU72jLD70TIPNseosRSXu",
	"qtjNb+1PwbKqOaPXd3k4zlbWpYwgmpszZIL1+AlzmKtEr/MEpOu2sg1I1t12QxsmxKeFVtS9DIzKOFF4",
	"aQ8y7NGGo/vYDu5jBcuNf2TdOVGoyVRsw3vurP196MR5O5zHyYCjWoeKi2FcyondrPQmW9yqtabKVGWz",
	"tszazqtMLyi97tuV5Ry1lQ/zPeaNHSambJDOk/RfHgavpZjxkFv/vEhf/+66q2oGMlDOeZCi8Tgd9L5r",
	"XFN3RYoIBjuAwUc232D9Ey0zPjypE5lvSW/ejzQM0ky1aX6HgqvHrU/QtlOGXiKexPZuUD04JRix6r+7",
	"2ub9yObitVUuHAU2OtY0pKl2YAq9krddaBs3LkacsHfyGA50Cm4cgf3ev361eUSTcG+POGfczUqbNU/F",
	"Ozu35x9modC3E45tLEkrh554WW5Mo2rT9724joZLn5A1jWJ00t2h2E+RWXdkVj1Zs2+OZ5+mhbttMD3d",
	"GuSXQ7HxtziQ2936MGJ53jIbGTNJfRPT7Hm6OxzXqnAPuttN1SRq6y2reGsA6m4oE6BLTB1mPyQlx/NK",
	"9vcIc1bJ03klMAUh3q+1c5n52DmV2vi0bj7Yo1HzhzZ0vSlKwtbQKbQGxH+0N8FmKcKnzaa0MSKdNlG2",
	"BNYXGWYpKkthz2/FKUXG0mT+EvoKQnOKWLPBqWWU5m9J8rQ9rzvlcAe0gu4nIVl2++YhWyG6NKe+9njs",
	"dAUo/1QhLoGL0wzL9ak9SfZlqV2URvPpc/CQXGOZtGNFnacAiU4NENQBbk6NKlv/saaZvcZhDqpE++u0",
	"9g841YzbC3XUxHrpfe0FftHBXT64Y7Fkt5D/XAKvIy44ThA7qa11UV/Oc5srBF7SnnT/VJnewAPK5Jv6",
	"r6U2FnI9fmY3RlmdGrijbQ0Om7m3YOrDaMycZvV1umw701Tuwof39gRu2JGgEiagHZJJhmiCsgyECc0k",
	"UAFJcxDqgIW8wDTspljWut2Ou31OumI4ePJg0q5RdjvFSlX7pIzWzRkJy6h+lXBp/RACXW9MoWtjkZtU",
	"5qaaqxmf+w46erk0X+xCXhe8aTTH0cI2vsavPOTq+uYa0KzW8tGsd7usc9zSmXErTK2g2ZqC7QF2DJ9n",
	"rAZGotdP96qsQ3C51mYnhlknyTjwdAW34yCmFz/Or9R4Br71ltnB/W3SilUz5NFHFxwgDFBGlq7Tvn+z",
	"poyui0eOT4lw4PXYOrqbx+sgdLwmubQ9bpltObvZubIz019RvSG142I73e1irwOjq+NX4QzdoKVUHYdm",
	"YA0wwvhPG3cRcsRv9UHhcqV1mLWQUIyfEo5LHnO0+37snm8nVkSBsPvoH+zF80Du19l/A44XOPSudq/I",
	"LyCAysB+LipC3oWKxBUS10iIe8bzRy1kpblq4apWHM5kxQM5WjH0AjhHZJIIr5mF3VOt8Sl+C7iksrl+",
	"eixRT3h3ejfnzjcxnWHvD2q9RWzHxBm0tXZEu1EbdKuuldielW3HXbq4vkpuYZ1IplaacfKp5AqoxGYH",
	"MUvWrNIK4hJkgu2Fx7USSaqsccDSvkM6WJOia4Jm1njxOr2o5Ipx/Ed9oF8Dq2nWly8dz58fvBH9mhvh",
	"utofNnwEtGdNupKyFK/Pzu7v70/lChpQQyU+zVhxpuMFaufJBat9lWxMRbtCa4+3/+so3nZoqz2hLdhy",
	"gtIRpxr/hnZ3Llntf4FonnBQe+o76EZRso48XQOlDrv28+LGBF0LGA976Htmoro1nkvO/jXBRtOXp+en",
	"53YbRlGJ09fpX07PT/9iIkmt9Pyd6Xhf4HBU+TuYyMwrQESu6vhzFuCtf7/Z7FjtNP0RZLa6KPE/dIm0",
	"PeDVNb08P99wO0NlSSzznn0UxjBizFXbpmLTirVbW6Ysh3c+vYJD7RnpixOyYZTGoiRo7aVnWjKphRsY",
	"VOd0wkLPENtpSlPxwImqh0xdX2egmmFxtGGL9cc5QdvX0FJoxzeJiXbTTz+oz2d3L89QGzfDy2pq+Sww",
	"kcANZtkyPi6zFHWATVSA1I7Kv382uGYsow0KKJzWp381a23Pj7sgzkWvXHiEOzc9a8x1NKU9uXSXLI27",
	"2eRyrY/IZslWPnpK4j92q7HeZLUlG8tPE1qYFSUBE0NkgbAJyeM/z/BVJWshPrmR0thCt5vYOyjp7LRe",
	"ozyH3NW2D3uFObS3CDOF9S4dcZLt+qK6QkGbRaaJhUKFdyV/maV/fdTotLHddQd1rJjemRimd4jg3EbL",
	"+jAYbbVAD7hQxV69eDFLC0zNX389Px+7hdTU3JALGRolq/XxRGLLm/F4ccjx0ErfOya1iV5rfXp8Lkp8",
	"AxkHxeIFNqF5Op+UZv2OyYtWvYQjGMze3Y7fW2X69w9qjdbSqebpDzYeyrYwsh6/CeMJCIkLJCFBCYV7",
	"y8jbEsmWsGvRdA+E/BvL14+Z3JDzrwI9XJnEF+fqP8eJmO1DdF49pL9aczzVOK/NxjwTZuNeNQOHvzt4",
	"ww76F3wNV9lBL4Ug4dufRs8Efvny5VnKaI+0DYG/cYx6allrGv2TESZR8n5XklcN5l+egNWuawD75nSR",
	"/j757LP5cZV/OeNgD2XdysqFuLX3/XRG/V6c3lANKCuSrxtVxbV7LpE23titUt2UtDtUxtLq33Z92F0J",
	"ehLwDoVsJ0QHMcX4xDwZQl+0M4iaB4KuTFpE6rhHGselrBvk2GnBuzE28DY8diX0+3597zWtZG5Dkinc",
	"jSQbYNTr4NJk84/dWr1nbx4yYuKATLaP1W5VjyKyq1mv/tNhmtyLD+jejYm65I/1jRlHs/s+i/b8uu/7",
	"N/5cm9+WWZSkPs2bbgbeMoU2K/mFWrvNSn4xCzaSMi6HRqMPYXaP/fXcOr+SK+djPDYP6Ik57nrpdrL0",
	"ulJa8dKd4//R99DTWfo/BHmMA4zn0HesFFlqZMD4VtlYPAyJkCcC/Wz8X7B2G/sjl35LXDrEAj9z40Xg",
	"YIJBltzv0UlPSQkSh0bjWP/2cl/nJ09ztahrUNStrKsNUQonKWpR+T4qMwlll8a59hdQkHUUhriwHUnL",
	"8v5zm31uQa5NkJj9HOQ0O5WBeCTtLsJ9CWxzr+EMtuCLjHMg277dDriDYHT0/b2r+bOuQu92n1ca+xRF",
	"fdZVyaMmHjXxZ6qJzxqdO7Lht8uGrVI9gakObDiP6nVUr6N6/e2r15sm/7Pe25VO47/2yE2afIkOX7nY",
	"ikxowFS7BxIspM+1t1HCLzphCA98INC9wOs/5dyTvP0aIva7uy6/q0z23YQPt4jt7uT9lU51hk43HnG+",
	"8dUNgnXMIc9ezh+UxP9Ka/Pg+s+LC0LcUXw6ed6HhqQ1Fy/rJ/A2anHRDIqxCa6YS08dUMbGyP0BSVQy",
	"TD1xAEwee1dsIMtvjavn8JDW/LhZ91ZNfbrjN3JMaKRgf/idRWPUDb+mGtSRv4Mq0Zl5H9fvn/VGp+9D",
	"NzKUnMrRE5gpGwVpyJwXNaLvWyNyvoxSoF5s8UzcpbNU8+IslTqg1oOu/KEgTpL68p47rPyTSzKXWTnI",
	"sPyM7DhRK4pa0dfWinaXilEtesZq0Xx90sRP8d/zbl6m0ZM+Xye6zKAxaP239RsbpyPAEFSH9Bh1Vx/b",
	"yXNYcBCrHX0Gw1wOD+EDs55kmW+mbDN0XM5BiIHQnO74UJ1QNH2C5hzNebyNPAkFznPnCz2uYOBY/IBF",
	"yYSJBeN8ik3U8XtcaTfVfLvPvRy/aY/5ocQfG33HEaTCKz+RlMADQs8352SdwDO9Xjdd3OhP2/jNltpm",
	"uQSnW1COPPYzGovCcFvwVXIfWEQ5EI9Onv/RyXx9Uq/6sFsT83WiCoz6J/2tjgkTIA6bJ/13cdzXYVf/",
	"xXgufkIy200UatXtUdckaB2y5pEC/XFRVL696wsvX8XbC9FZJd5eiLcX4u2FeHthzA9qJ/+nRqM5/HVn",
	"u1VQmtGbovQ8MxnvNsdNTNzETNzEtC88Bm9jTJGAjcx185LK+Fbm8TuJXXcAzXsvj96DdJ7BdevkHU45",
	"D1fJD7VFeBUvOEflK24R4hYhbhHiFuFgW4RaW4gacdSIj0IjNiAz8aDbFEoKyDEaO+++MRWE3XygSyA2",
	"pmg7l7XvVVpxnAbDXc7xfG7OEh9LaoEymDN2uwdSSyxX1XwPhDAVEi05KvZAq76VvQdSJaYSOOxlBp/C",
	"a8FXnKIyW6F99EKwimaEVfkeaEl8K/fChvIeS7mhCexG6R4IWVgR9Fhaa1bJaj5pxT5WMQlUOkIP9fvA",
	"GJWAqAQ8fyWgcZQdfDxH50rYYsewJPpJticMjBjjCroP5ve9kXP7WDsdoKc80DOR2yLQRqA9mvBOU3l8",
	"zvJRQH26ME/fWgimp4g38pVB0jBQxMiIkc9fGbWHioPqqM3TYXvzZDWFRLVG78dMMDrfqe2NoTBRH63f",
	"MRo6Ow184ChUoXzEKe8DLrBcv3lAmXwUhffAC+eJQUaY0NdMkX54FRCfchgRA1nHE7R4zhvPeSOXxnPe",
	"Z37OO1XniJp21LSfv6b92fDrl5GjX8VEBLYOOrAUluGHz3+DXuZqgP27uOj8yCOngAmJABQB6AkG5a9P",
	"cQei5rHvCZLPkLgdfikRJfV7tIlWvDtH0SPgfCFuDwzNH/Zlh4aHkvSjM8T3nh/33vNAcKCC5UC6/RYF",
	"0sGJCOJLcLb+6V9a3o4CJLzvWO7XiO+OIZExIfc1mmZ3GHBMoI0QpgLXnLdXXBAhPy/0wh7cMZn8Sivq",
	"d64evaGnRwOHow7VtUGGintjLxlq39u3P12YjO0jI9OeC49QsZ+n4b2vu391ILCc1Ey1af5sCCAGwXDw",
	"gflW66gHpwSa++Zt8Gn4UaNg05Cm2oEpRL74gu1CcwhYYy1x8hOrZFlJG0NJTxMi110KruhFgThmadf5",
	"Xf3xwok/tN9APCetrgVFYNpoaYOD2238sPVYckKRrDgiCUF0WaElJHaukwLlkEimT25LguSC8SLhIBi5",
	"w3SpUlAiSsjwAmf2aeVkK47cqUN/1RHrLOqHPugcrj/GvWTcS8a95BHvJfWgPow7eC4qQhKbOWGL8B1l",
	"19x3aSs75NZyj8cTzcg8PvjggOTBOWh0Gj+6gEvTE3Fli+iouxXPJhyhdMlc2/U1qBhuuUqNRc7zymWN",
	"5CJ4D2OzjwZlnXRQM4mVo3CLwi0KtyMWbjqI5omNOyoGZZzOmtRZdYzmnUScjt97Xdf4tMdbug/i0sYT",
	"n37EVXLIsMCMhvhOOTjisfI3SIB1B9ghvJyoP2VyI+hH0I+gfyyg3/FMG4na1Ob0uf1edb3cAhx+Hxdl",
	"dadrYLv7te53b9Qfdu8TG3a6LmuDHK0IMWHLjYQLf3tDkGqp+N3nsHXZfURjyvMYj/AW63lFTg0L0mXH",
	"KHKeHks6k+cAk0kXDdpi215/U1DHXjsIA58e8+1y4eCwNwwiUh0/Uu3C4xHKngeUfWTzE4klAXEGlGNz",
	"d9KJZG90cvKRzRNTwPEkn87yn2z+XmcIAyh7H+Bw1lpE1wH+C3WrtQdD8DnlB9djTtsDFbn96bm95eyW",
	"23W81GFPZZonC0wk8GTNKj74MPdbTe2wW4CBOKRPKh6bkQuyvaiROZCIInbQJ0knz6zGZfn0y9LMnz+s",
	"wSUHJCFBCYV7PU+OmAU6y1u8x1gF+ZqiAmeet6yKknF78radWiBMftStoFnvNmeO9SNUatpzhIla1fcA",
	"t/qHvcjmvjSIHi67N568KmWBHt4CXcpV+vrlq1cOSiVnGQhxRbHEiOA/fF042OugWif8Ybqz3QaLelTg",
	"xztnjmPYNuc7GDTiyNfDka5kP/tsnPG+mDElIGEbYH7Q3xPkAReTbMFl/FDGev8FHMrsTTDvwrQbnT78",
	"2xOqnuMxK8f1e0xHOWpYLivOgcr3gIor8Y7JKyokohn8fE+Bf4O6kn5sbgvLfi1zNIBlJvngWHZwBYwg",
	"IW8A6FdSwPqvm28ebgdbAEfVtQOpYRzEmmaBj5N+FZVqg42jdIrSKUqn49bAz3pBO7zmtjYOBqZ2/Sf3",
	"WK4Cw8F2HKowiCt6SFE323902V2tgl8pKm2MtRWjGMVYWzHWVuTSGGvrgLG2DrQR2lcIr4kqS9zMxM1M",
	"3Mwc/bHklJXvjrTu2qvYeOvP2zQ3GMddb2GeMsB7uwlxGgP1LmPK5mLW3UbE3UPcPTzT3cOs2SdENvx2",
	"2bDdCExgqoM/PBG3BPvZEnRe0Ig7grgjiDuCb+B440yy5ZKY6HbuQ/r3OkNzE4JxcAHG9obBlHui0409",
	"7xZ64ktKpK8xKt7KVk7+sBdRr3Knm2AnNMiGMNkpkF8d3dl9It4LCJcdLC7kLufkoZwUJUyUMFHCxIv7",
	"36zMDXx0oI7cMSBkuyFZnsZ/4KtHL9vTW9VR3kR5E+VNlDffkryp7X5nGZYBoWJMLl/AhktDI+h+qLmc",
	"KHaJ9fKcosu83N2Ry+cBoy2z4rQT0ucYvSoadgoyX75jhTZ/FpeKfQ/0hFnNnVMD0tRMH6XcV8CrGqCc",
	"mMWoxJoHRnGryenFrpbW0YW4iiDkj1Pc8sdEIKrLHuxBxQ6/TUakDjtHVHp2qFTRIF3K5vMjkqUT8eib",
	"waOWM6aiUUUPpxi1jDYdiGoejjD0HGGIh+IQHwMiHnd2EcQaEOO7oxg/KIzxR+BYjNP3LIFMO6GNopjJ",
	"5YOwG0MjalLfCAjt5lLXctI03NLcM+pMZx8Us5VMAJ+adSPyPAvkYSVQVOLRd58yc4KS/FwCvbi+at6g",
	"0/Q85646b4nTRy6G4Ad9RtqofWntSFQSE2MhbUbCvI3nh17dpcTmSlZYSOa9s35taQVBcOMctQsOZ81T",
	"Wg6Mqr25tfc2Tmc9F9ised85Z1nVeLGms9REilVf9FO05tVK8xJm2oR9U5wWDqYLQLLi4IHSW9UcAohW",
	"ZVO9ea0wrzJdZyNtbGzs8JoJLrDcZWQbH4DJJc2ru66ujr3vu++tgn3vcRcpvT/5ftjIpbsJx85iD3su",
	"rX7+OEgq1tRDwNwDK1E8Pr14bKZtQySc1UDkfWz/n2oJmDdbTVY7odvi4dqkX9cLcz9eua0IcT+E27xg",
	"+BVFw6wRAnvH/lm6YDwDT3Sxvb5m376bHvIk8xM+Ob8L/oWjXveV9zbgenzvPb73Ht97j++9fxfvvc+m",
	"4p2d2/MPs1Do2wnHNpaklaVPvCw3plG16fteXEfDpU/Imka5O+lqmvZTZNYdmVVP1uyb49mnaeFOPO3r",
	"1iC/HIqNv8WBdL7CNGBm6ZiXg8wD/r16tLnEJ3+ftyGqG27Cb426ZPQOuEyQCVKXSLYRqcJplipK+Z51",
	"oWeP1qlnYn+KRqInMxJFgb4Pgb5PuReAClEAPiOs/1wr9WHPHfkOHEyG5rxh/O5zZy/xPB49qgFm4Nmj",
	"ngZ30JvKpqZ4VzmqtPGu8j5RTwIqxNln9Y9FPL87EqAiwXTBeDHkfaQGMAjwTJ3PBu50u31eTltdjwv8",
	"6Ba4XtN6lmPgAcXQ31rUAQ1lQc+6qZy+Z90ODl/72dmbOw4hz58Fv5N2D3OBJfzKSUD2p37jzIfOG3Ma",
	"YTnCcoTlZwnLjcLZRm4eu27Ti/LsuXTzvkvv6K7ejL7R9RycdjenLMj21szLOtR7t1fNhJstfS6JEuBr",
	"LPHuzNUrXfV4+JVCe29EZQzYWP4qtFPZwVQMTd8Xitzb1MhvT89vqm+a0XR2flejfZ+8dfnGjCYmk3kh",
	"IH2drqQsxeuzM1TiU7mC5ghM/Z2xIv3y4cv/CwAA///701PPZWQCAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
